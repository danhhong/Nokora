{
.appVersion = "1342";
copyright = "Copyright 2012 Google Inc. All Rights Reserved.";
customParameters = (
{
name = vendorID;
value = MONO;
},
{
name = panose;
value = (
2,
2,
6,
0,
6,
5,
0,
2,
2,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
4,
5,
6,
7,
9,
29,
30,
31,
32,
33,
34,
35,
36,
37,
38,
39,
43,
44,
45,
46,
60,
62,
64,
67,
69
);
},
{
name = glyphOrder;
value = (
.notdef,
CR,
space,
uni0000,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde,
guillemotleft,
guillemotright,
uni1780,
uni1781,
uni1782,
uni1783,
uni1784,
uni1785,
uni1786,
uni1787,
uni1788,
uni1789,
uni178A,
uni178B,
uni178C,
uni178D,
uni178E,
uni178F,
uni1790,
uni1791,
uni1792,
uni1793,
uni1794,
uni1795,
uni1796,
uni1797,
uni1798,
uni1799,
uni179A,
uni179B,
uni179C,
uni179D,
uni179E,
uni179F,
uni17A0,
uni17A1,
uni17A2,
uni17A3,
uni17A4,
uni17A5,
uni17A6,
uni17A7,
uni17A8,
uni17A9,
uni17AA,
uni17AB,
uni17AC,
uni17AD,
uni17AE,
uni17AF,
uni17B0,
uni17B1,
uni17B2,
uni17B3,
uni17B4,
uni17B5,
uni17B6,
uni17B7,
uni17B8,
uni17B9,
uni17BA,
uni17BB,
uni17BC,
uni17BD,
uni17BE,
uni17BF,
uni17C0,
uni17C1,
uni17C2,
uni17C3,
uni17C4,
uni17C5,
uni17C6,
uni17C7,
uni17C8,
uni17C9,
uni17CA,
uni17CB,
uni17CC,
uni17CD,
uni17CE,
uni17CF,
uni17D0,
uni17D1,
uni17D2,
uni17D3,
uni17D4,
uni17D5,
uni17D6,
uni17D7,
uni17D8,
uni17D9,
uni17DA,
uni17DB,
uni17DC,
uni17DD,
uni17E0,
uni17E1,
uni17E2,
uni17E3,
uni17E4,
uni17E5,
uni17E6,
uni17E7,
uni17E8,
uni17E9,
uni17D2_1780,
uni17D2_1781,
uni17D2_1782,
uni17D21783,
uni17D2_1784,
uni17D2_1785,
uni17D2_1786,
uni17D2_1787,
uni17D21788,
uni17D2_1789,
coeng_1789khmer.a,
uni17D2_178A,
uni17D2_178B,
uni17D2_178C,
uni17D2178D,
uni17D2_178E,
uni17D2_178F,
uni17D2_1790,
uni17D2_1791,
uni17D2_1792,
uni17D2_1793,
uni17D21794,
uni17D2_1795,
uni17D2_1796,
uni17D2_1797,
uni17D2_1798,
uni17D21799,
uni17D2179A,
uni17D2_179B,
uni17D2_179C,
uni17D2179F,
uni17D2_17A0,
uni17D2_17A2,
uni17BB.b,
uni17BC.b,
uni17BD.b,
uni17B7.a,
uni17B8.a,
uni17B9.a,
uni17BA.a,
uni17C6.a,
uni17CE.a,
uni17D0.a,
uni1789.a,
uni17D2179A.b,
uni17BF.b,
uni17C0.b,
uni17B7_17CD,
uni17B7.r,
uni17B8.r,
uni17B9.r,
uni17BA.r,
uni17C6.r,
uni17C9.r,
uni17CD.r,
iMark_17CDkhmer.r,
coeng_178Akhmer.n,
coeng_178Bkhmer.n,
coeng_178Ckhmer.n,
coeng_17A0khmer.n,
coeng_178Akhmer.r,
coeng_1797khmer.r,
coeng_1798khmer.r,
uni17BB.n,
uni17BC.n,
uni17BD.n,
uni17BB.n2,
uni17BC.n2,
uni17BD.n2,
coeng_1798khmer.b,
coeng_17A0khmer.b,
uni1794.a
);
}
);
date = "2020-02-19 02:17:00 +0000";
designer = "Danh Hong";
designerURL = "http://www.nextspell.com";
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
familyName = Nokora;
featurePrefixes = (
{
code = "lookup lookup_0 {\012sub uni17B7 by uni17B7.r;\012sub uni17B8 by uni17B8.r;\012sub uni17B9 by uni17B9.r;\012sub uni17BA by uni17BA.r;\012sub uni17BE by uni17B8.r;\012sub uni17C6 by uni17C6.r;\012sub uni17C9 by uni17C9.r;\012sub uni17CD by uni17CD.r;\012sub uni17B7_17CD by iMark_17CDkhmer.r;\012} lookup_0;\012";
name = lookup_0;
},
{
code = "lookup lookup_1 {\012sub uni17BB by uni17BB.b;\012sub uni17BC by uni17BC.b;\012sub uni17BD by uni17BD.b;\012} lookup_1;\012";
name = lookup_1;
},
{
code = "lookup lookup_10 {\012sub uni17D2_1798 by coeng_1798khmer.b;\012sub uni17D2_17A0 by coeng_17A0khmer.b;\012} lookup_10;\012";
name = lookup_10;
},
{
code = "lookup lookup_11 {\012sub uni1794 by uni1794.a;\012} lookup_11;\012";
name = lookup_11;
},
{
code = "lookup lookup_12 {\012sub uni17D2179A by uni17D2179A.b;\012} lookup_12;\012";
name = lookup_12;
},
{
code = "lookup lookup_13 {\012sub uni17B7 by uni17B7.a;\012sub uni17B8 by uni17B8.a;\012sub uni17B9 by uni17B9.a;\012sub uni17BA by uni17BA.a;\012sub uni17BE by uni17B8.a;\012sub uni17C6 by uni17C6.a;\012sub uni17CE by uni17CE.a;\012sub uni17D0 by uni17D0.a;\012} lookup_13;\012";
name = lookup_13;
},
{
code = "lookup lookup_14 {\012sub uni1789 by uni1789.a;\012} lookup_14;\012";
name = lookup_14;
},
{
code = "lookup lookup_15 {\012sub uni17BF by uni17BF.b;\012sub uni17C0 by uni17C0.b;\012} lookup_15;\012";
name = lookup_15;
},
{
code = "lookup lookup_2 {\012sub uni17CA by uni17BB;\012} lookup_2;\012";
name = lookup_2;
},
{
code = "lookup lookup_3 {\012sub uni17C9 by uni17BB.b;\012sub uni17CA by uni17BB.b;\012} lookup_3;\012";
name = lookup_3;
},
{
code = "lookup lookup_4 {\012sub uni17C9 by uni17BB;\012sub uni17C9.r by uni17BB;\012} lookup_4;\012";
name = lookup_4;
},
{
code = "lookup lookup_5 {\012sub uni17D2_178A by coeng_178Akhmer.n;\012sub uni17D2_178B by coeng_178Bkhmer.n;\012sub uni17D2_178C by coeng_178Ckhmer.n;\012sub uni17D2_178F by coeng_178Akhmer.n;\012sub uni17D2_17A0 by coeng_17A0khmer.n;\012} lookup_5;\012";
name = lookup_5;
},
{
code = "lookup lookup_6 {\012sub uni17BB by uni17BB.n;\012sub uni17BC by uni17BC.n;\012sub uni17BD by uni17BD.n;\012} lookup_6;\012";
name = lookup_6;
},
{
code = "lookup lookup_7 {\012sub uni17BB.b by uni17BB.n2;\012sub uni17BC.b by uni17BC.n2;\012sub uni17BD.b by uni17BD.n2;\012} lookup_7;\012";
name = lookup_7;
},
{
code = "lookup lookup_8 {\012sub uni17D2_178A by coeng_178Akhmer.r;\012sub uni17D2_178F by coeng_178Akhmer.r;\012sub uni17D2_1797 by coeng_1797khmer.r;\012sub uni17D2_1798 by coeng_1798khmer.r;\012} lookup_8;\012";
name = lookup_8;
},
{
code = "lookup lookup_9 {\012sub uni17D2_1789 by coeng_1789khmer.a;\012} lookup_9;\012";
name = lookup_9;
}
);
features = (
{
code = "script khmr;\012sub uni17B7 uni17CD by uni17B7_17CD;\012sub [uni179A uni179C] [uni17B7 uni17B8 uni17B9 uni17BA uni17BE uni17C6 uni17C9 uni17CD uni17B7_17CD]' lookup lookup_0 ;\012sub [coeng_178Akhmer.r coeng_1797khmer.r coeng_1798khmer.r] [uni17B7 uni17B8 uni17B9 uni17BA uni17C6 uni17C9 uni17CD uni17B7_17CD]' lookup lookup_0 ;\012sub [uni179A uni179C] uni17BB [uni17B7 uni17B8 uni17B9 uni17BA uni17BE uni17C6 uni17C9 uni17CD uni17B7_17CD]' lookup lookup_0 ;\012";
name = abvs;
},
{
code = "script khmr;\012sub uni17D2 uni1780 by uni17D2_1780;\012sub uni17D2 uni1781 by uni17D2_1781;\012sub uni17D2 uni1782 by uni17D2_1782;\012sub uni17D2 uni1784 by uni17D2_1784;\012sub uni17D2 uni1785 by uni17D2_1785;\012sub uni17D2 uni1786 by uni17D2_1786;\012sub uni17D2 uni1787 by uni17D2_1787;\012sub uni17D2 uni1789 by uni17D2_1789;\012sub uni17D2 uni178A by uni17D2_178A;\012sub uni17D2 uni178B by uni17D2_178B;\012sub uni17D2 uni178C by uni17D2_178C;\012sub uni17D2 uni178E by uni17D2_178E;\012sub uni17D2 uni178F by uni17D2_178F;\012sub uni17D2 uni1790 by uni17D2_1790;\012sub uni17D2 uni1791 by uni17D2_1791;\012sub uni17D2 uni1792 by uni17D2_1792;\012sub uni17D2 uni1793 by uni17D2_1793;\012sub uni17D2 uni1795 by uni17D2_1795;\012sub uni17D2 uni1796 by uni17D2_1796;\012sub uni17D2 uni1797 by uni17D2_1797;\012sub uni17D2 uni1798 by uni17D2_1798;\012sub uni17D2 uni179B by uni17D2_179B;\012sub uni17D2 uni179C by uni17D2_179C;\012sub uni17D2 uni17A0 by uni17D2_17A0;\012sub uni17D2 uni17A2 by uni17D2_17A2;\012sub [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 uni17C9 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni17A1 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni179F uni17CA' lookup lookup_2 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni17A0 uni17CA' lookup lookup_2 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni17CA' lookup lookup_2 uni17B6 uni17C6 ;\012sub uni179F uni17CA' lookup lookup_2 uni17BE ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17C9 uni17CA]' lookup lookup_3 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 [uni17B7.a uni17B8.a uni17B9.a uni17BA.a] ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17BE ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17C6 ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17D0 ;\012sub [uni17C9 uni17C9.r]' lookup lookup_4 uni17B6 uni17C6 ;\012sub uni178E [uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178F uni17D2_17A0]' lookup lookup_5 ;\012sub uni178E [uni17BB uni17BC uni17BD]' lookup lookup_6 ;\012sub [coeng_178Akhmer.n coeng_178Bkhmer.n coeng_178Ckhmer.n coeng_17A0khmer.n] [uni17BB.b uni17BC.b uni17BD.b]' lookup lookup_7 ;\012sub uni179A [uni17D2_178A uni17D2_178F uni17D2_1797 uni17D2_1798]' lookup lookup_8 ;\012sub uni179C [uni17D2_178A uni17D2_178F uni17D2_1797 uni17D2_1798]' lookup lookup_8 ;\012sub uni1789.a uni17D2_1789' lookup lookup_9 ;\012sub uni17D2179F [uni17D2_1798 uni17D2_17A0]' lookup lookup_10 ;\012sub uni17A1 [uni17D2_1798 uni17D2_17A0]' lookup lookup_10 ;\012";
name = blwf;
},
{
code = "script khmr;\012sub [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1789 uni17C9 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni17A1 [uni17BB uni17BC uni17BD]' lookup lookup_1 ;\012sub uni1794' lookup lookup_11 uni17B6 ;\012sub uni1794' lookup lookup_11 uni17C4 ;\012sub uni1794' lookup lookup_11 uni17C5 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17B6 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17C4 ;\012sub uni1794' lookup lookup_11 uni17C9 uni17C5 ;\012sub uni1794' lookup lookup_11 uni17CA uni17B6 ;\012sub uni1794' lookup lookup_11 uni17CA uni17C4 ;\012sub uni1794' lookup lookup_11 uni17CA uni17C5 ;\012sub uni1794' lookup lookup_11 [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] uni17B6 ;\012sub uni1794' lookup lookup_11 [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] uni17C4 ;\012sub uni1794' lookup lookup_11 [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] uni17C5 ;\012sub uni1794' lookup lookup_11 uni17BB uni17B6 ;\012sub uni1794' lookup lookup_11 uni17BB uni17C4 ;\012sub uni1794' lookup lookup_11 uni17BB uni17C5 ;\012sub uni17D2179A' lookup lookup_12 [uni1780 uni1781 uni1782 uni1784 uni1785 uni1786 uni1787 uni178A uni178B uni178C uni178F uni1790 uni1791 uni1792 uni1793 uni1794 uni1795 uni1796 uni1797 uni1798 uni17A2] [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] ;\012sub uni17CA [uni17B7 uni17B8 uni17B9 uni17BA uni17BE uni17C6 uni17CE uni17D0]' lookup lookup_13 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17C9 uni17CA]' lookup lookup_3 [uni17B7 uni17B8 uni17B9 uni17BA] ;\012sub uni1789' lookup lookup_14 [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] ;\012sub uni1789' lookup lookup_14 [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] ;\012sub uni1789.a uni17D2_1789' lookup lookup_9 ;\012sub uni17D2179F [uni17D2_1798 uni17D2_17A0]' lookup lookup_10 ;\012sub uni17A1 [uni17D2_1798 uni17D2_17A0]' lookup lookup_10 ;\012";
name = clig;
},
{
code = "script khmr;\012sub uni17D2 uni179A by uni17D2179A;\012sub uni17D2179A' lookup lookup_12 [uni1780 uni1781 uni1782 uni1784 uni1785 uni1786 uni1787 uni178A uni178B uni178C uni178F uni1790 uni1791 uni1792 uni1793 uni1794 uni1795 uni1796 uni1797 uni1798 uni17A2] [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] ;\012";
name = pref;
},
{
code = "script khmr;\012sub uni17D2 uni1783 by uni17D21783;\012sub uni17D2 uni1788 by uni17D21788;\012sub uni17D2 uni178D by uni17D2178D;\012sub uni17D2 uni1794 by uni17D21794;\012sub uni17D2 uni1799 by uni17D21799;\012sub uni17D2 uni179F by uni17D2179F;\012sub [uni17D2_1780 uni17D2_1781 uni17D2_1782 uni17D2_1784 uni17D2_1785 uni17D2_1786 uni17D2_1787 uni17D2_1789 coeng_1789khmer.a uni17D2_178A uni17D2_178B uni17D2_178C uni17D2_178E uni17D2_178F uni17D2_1790 uni17D2_1791 uni17D2_1792 uni17D2_1793 uni17D2_1795 uni17D2_1796 uni17D2_1797 uni17D2_1798 uni17D2_179B uni17D2_179C uni17D2_17A0 uni17D2_17A2] [uni17BF uni17C0]' lookup lookup_15 ;\012sub uni1789 [uni17BF uni17C0]' lookup lookup_15 ;\012sub [uni17D21783 uni17D21788 uni17D2178D uni17D21794 uni17D21799 uni17D2179F] [uni17BF uni17C0]' lookup lookup_15 ;\012";
name = pstf;
}
);
fontMaster = (
{
ascender = 1900;
capHeight = 1462;
custom = Thin;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1900;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 498;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01240 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 8 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01237 6 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01231 6 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
188,
188,
138,
138,
1200,
-50,
0,
-500,
-800,
1200,
-50,
0,
-500,
-800,
186,
186,
150,
150,
1462,
0,
1532,
1098,
0,
-492,
1485,
-20,
1532,
1118,
-20,
-492
);
}
);
descender = -800;
iconName = Light;
id = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
widthValue = 5;
xHeight = 1098;
},
{
ascender = 1900;
capHeight = 1462;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1900;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 498;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01240 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 8 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01237 6 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01231 6 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
188,
188,
138,
138,
1200,
-50,
0,
-500,
-800,
1200,
-50,
0,
-500,
-800,
186,
186,
150,
150,
1462,
0,
1532,
1098,
0,
-492,
1485,
-20,
1532,
1118,
-20,
-492
);
}
);
descender = -800;
iconName = SemiLight;
id = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
weight = Light;
weightValue = 300;
widthValue = 5;
xHeight = 1098;
},
{
ascender = 1900;
capHeight = 1462;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1900;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 498;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01240 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 8 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01237 6 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01231 6 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
188,
188,
138,
138,
1200,
-50,
0,
-500,
-800,
1200,
-50,
0,
-500,
-800,
186,
186,
150,
150,
1462,
0,
1532,
1098,
0,
-492,
1485,
-20,
1532,
1118,
-20,
-492
);
}
);
descender = -800;
id = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
weightValue = 400;
widthValue = 5;
xHeight = 1098;
},
{
ascender = 1900;
capHeight = 1462;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1900;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 498;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01240 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 8 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01237 6 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01231 6 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
188,
188,
138,
138,
1200,
-50,
0,
-500,
-800,
1200,
-50,
0,
-500,
-800,
186,
186,
150,
150,
1462,
0,
1532,
1098,
0,
-492,
1485,
-20,
1532,
1118,
-20,
-492
);
}
);
descender = -800;
iconName = SemiBold;
id = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
weight = Bold;
weightValue = 700;
widthValue = 5;
xHeight = 1098;
},
{
ascender = 1900;
capHeight = 1462;
custom = Black;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -800;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1900;
},
{
name = winDescent;
value = 800;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -800;
},
{
name = strikeoutPosition;
value = 498;
},
{
name = strikeoutSize;
value = 102;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01240 22 2 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01229 8 15 7 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 6 values pushed */\01237 6 22 5 2 10 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 9 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\0121920 1024 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 11 \012WS[ ]	/* WriteStore */\012PUSHW[ ]	/* 4 values pushed */\01264 64 2 11 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\01239 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01231 6 17 5 2 14 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 4 values pushed */\0123 20 21 0 \012WS[ ]	/* WriteStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01219 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 20 \012RS[ ]	/* ReadStore */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01237 3 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012JROT[ ]	/* JumpRelativeOnTrue */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01233 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 3 values pushed */\01214 21 1 \012WS[ ]	/* WriteStore */\012JMPR[ ]	/* Jump */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01219 1 19 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\01222 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01221 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01222 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0127 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 13 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0127 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0129 14 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 4 values pushed */\01213 12 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 18 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01218 18 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01217 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01215 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01216 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01216 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 8 values pushed */\01224 24 1 0 17 0 19 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01220 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 21 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01218 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01224 24 1 0 17 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01220 8 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012139 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 32 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01224 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01246 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01214 6 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01252 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01256 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01223 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01223 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0124 32 5 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0124 38 5 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01248 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01277 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 71 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 72 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 62 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01248 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01265 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012138 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 63 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01266 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012139 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\01211 0 3 \012RCVT[ ]	/* ReadCVT */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0124 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
188,
188,
138,
138,
1200,
-50,
0,
-500,
-800,
1200,
-50,
0,
-500,
-800,
186,
186,
150,
150,
1462,
0,
1532,
1098,
0,
-492,
1485,
-20,
1532,
1118,
-20,
-492
);
}
);
descender = -800;
iconName = Bold;
id = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
weightValue = 900;
widthValue = 5;
xHeight = 1098;
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"922 1462 LINE",
"102 1462 LINE",
"102 0 LINE",
"922 0 LINE"
);
},
{
closed = 1;
nodes = (
"823 1364 LINE",
"823 98 LINE",
"201 98 LINE",
"201 1364 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1024;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"922 1462 LINE",
"102 1462 LINE",
"102 0 LINE",
"922 0 LINE"
);
},
{
closed = 1;
nodes = (
"823 1364 LINE",
"823 98 LINE",
"201 98 LINE",
"201 1364 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1024;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"922 1462 LINE",
"102 1462 LINE",
"102 0 LINE",
"922 0 LINE"
);
},
{
closed = 1;
nodes = (
"823 1364 LINE",
"823 98 LINE",
"201 98 LINE",
"201 1364 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1024;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"922 1462 LINE",
"102 1462 LINE",
"102 0 LINE",
"922 0 LINE"
);
},
{
closed = 1;
nodes = (
"823 1364 LINE",
"823 98 LINE",
"201 98 LINE",
"201 1364 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1024;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"922 1462 LINE",
"102 1462 LINE",
"102 0 LINE",
"922 0 LINE"
);
},
{
closed = 1;
nodes = (
"823 1364 LINE",
"823 98 LINE",
"201 98 LINE",
"201 1364 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 0 0 3 2 0 3 103 0 2 1 1 2 87 0 2 2 1 95 4 1 1 2 1 79 0 0 7 6 5 4 0 3 0 3 17 5 6 23 \012CALL[ ]	/* CallFunction */";
};
width = 1024;
}
);
note = .notdef;
},
{
glyphname = CR;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 1044;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 1044;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 1044;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 1044;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 1044;
}
);
note = CR;
},
{
glyphname = space;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 532;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 532;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 532;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 532;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 532;
}
);
note = space;
unicode = 0020;
},
{
glyphname = uni0000;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni0000;
},
{
glyphname = exclam;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"201 1462 LINE",
"205 356 LINE",
"256 356 LINE",
"260 1462 LINE"
);
},
{
closed = 1;
nodes = (
"194 -16 OFFCURVE",
"225 -16 QCURVE SMOOTH",
"262 -16 OFFCURVE",
"280 20 OFFCURVE",
"280 47 QCURVE SMOOTH",
"280 72 OFFCURVE",
"262 111 OFFCURVE",
"225 111 QCURVE SMOOTH",
"194 111 OFFCURVE",
"174 72 OFFCURVE",
"174 47 QCURVE SMOOTH",
"174 20 OFFCURVE"
);
}
);
width = 456;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"184 1462 LINE",
"210 385 LINE",
"294 385 LINE",
"323 1462 LINE"
);
},
{
closed = 1;
nodes = (
"249 -23 QCURVE SMOOTH",
"339 -23 OFFCURVE",
"339 78 QCURVE SMOOTH",
"339 178 OFFCURVE",
"249 178 QCURVE SMOOTH",
"159 178 OFFCURVE",
"159 78 QCURVE SMOOTH",
"159 -23 OFFCURVE"
);
}
);
width = 503;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"221 -29 OFFCURVE",
"274 -29 QCURVE SMOOTH",
"325 -29 OFFCURVE",
"401 37 OFFCURVE",
"401 111 QCURVE SMOOTH",
"401 186 OFFCURVE",
"325 248 OFFCURVE",
"274 248 QCURVE SMOOTH",
"221 248 OFFCURVE",
"147 186 OFFCURVE",
"147 111 QCURVE SMOOTH",
"147 37 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"333 412 LINE",
"385 1462 LINE",
"165 1462 LINE",
"217 412 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 3 3 2 95 0 2 2 31 77 0 0 0 1 97 0 1 1 38 1 78 17 18 36 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 550;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"120 1462 LINE",
"171 485 LINE",
"415 485 LINE",
"466 1462 LINE"
);
},
{
closed = 1;
nodes = (
"218 -27 OFFCURVE",
"292 -27 QCURVE SMOOTH",
"364 -27 OFFCURVE",
"466 53 OFFCURVE",
"466 143 QCURVE SMOOTH",
"466 238 OFFCURVE",
"364 313 OFFCURVE",
"292 313 QCURVE SMOOTH",
"218 313 OFFCURVE",
"116 238 OFFCURVE",
"116 143 QCURVE SMOOTH",
"116 53 OFFCURVE"
);
}
);
width = 585;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"81 1462 LINE",
"132 516 LINE",
"462 516 LINE",
"513 1462 LINE"
);
},
{
closed = 1;
nodes = (
"210 -25 OFFCURVE",
"296 -25 QCURVE SMOOTH",
"380 -25 OFFCURVE",
"503 66 OFFCURVE",
"503 166 QCURVE SMOOTH",
"503 272 OFFCURVE",
"380 358 OFFCURVE",
"296 358 QCURVE SMOOTH",
"210 358 OFFCURVE",
"85 272 OFFCURVE",
"85 166 QCURVE SMOOTH",
"85 66 OFFCURVE"
);
}
);
width = 593;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = quotedbl;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"157 934 LINE",
"198 934 LINE",
"206 1462 LINE",
"149 1462 LINE"
);
},
{
closed = 1;
nodes = (
"456 934 LINE",
"497 934 LINE",
"505 1462 LINE",
"448 1462 LINE"
);
}
);
width = 655;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"166 934 LINE",
"241 934 LINE",
"266 1462 LINE",
"141 1462 LINE"
);
},
{
closed = 1;
nodes = (
"503 934 LINE",
"579 934 LINE",
"604 1462 LINE",
"479 1462 LINE"
);
}
);
width = 745;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"328 1462 LINE",
"133 1462 LINE",
"174 934 LINE",
"287 934 LINE"
);
},
{
closed = 1;
nodes = (
"702 1462 LINE",
"508 1462 LINE",
"549 934 LINE",
"661 934 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\0125 3 4 3 1 1 0 95 2 1 0 0 31 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 835;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"174 934 LINE",
"371 934 LINE",
"412 1462 LINE",
"133 1462 LINE"
);
},
{
closed = 1;
nodes = (
"596 934 LINE",
"792 934 LINE",
"833 1462 LINE",
"555 1462 LINE"
);
}
);
width = 966;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"161 934 LINE",
"435 934 LINE",
"476 1462 LINE",
"120 1462 LINE"
);
},
{
closed = 1;
nodes = (
"636 934 LINE",
"911 934 LINE",
"951 1462 LINE",
"595 1462 LINE"
);
}
);
width = 1073;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = numbersign;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1265 995 LINE",
"964 995 LINE",
"1054 1462 LINE",
"1003 1462 LINE",
"913 995 LINE",
"506 995 LINE",
"596 1462 LINE",
"544 1462 LINE",
"454 995 LINE",
"137 995 LINE",
"137 946 LINE",
"446 946 LINE",
"362 514 LINE",
"57 514 LINE",
"57 465 LINE",
"354 465 LINE",
"264 0 LINE",
"315 0 LINE",
"405 465 LINE",
"813 465 LINE",
"723 0 LINE",
"774 0 LINE",
"864 465 LINE",
"1185 465 LINE",
"1185 514 LINE",
"872 514 LINE",
"956 946 LINE",
"1265 946 LINE"
);
},
{
closed = 1;
nodes = (
"905 946 LINE",
"821 514 LINE",
"413 514 LINE",
"497 946 LINE"
);
}
);
width = 1323;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1267 1012 LINE",
"987 1012 LINE",
"1073 1462 LINE",
"977 1462 LINE",
"891 1012 LINE",
"540 1012 LINE",
"626 1462 LINE",
"526 1462 LINE",
"440 1012 LINE",
"131 1012 LINE",
"131 920 LINE",
"424 920 LINE",
"348 541 LINE",
"53 541 LINE",
"53 446 LINE",
"332 446 LINE",
"248 0 LINE",
"344 0 LINE",
"430 446 LINE",
"780 446 LINE",
"692 0 LINE",
"790 0 LINE",
"878 446 LINE",
"1192 446 LINE",
"1192 541 LINE",
"897 541 LINE",
"971 920 LINE",
"1267 920 LINE"
);
},
{
closed = 1;
nodes = (
"872 920 LINE",
"798 541 LINE",
"446 541 LINE",
"520 920 LINE"
);
}
);
width = 1323;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1091 1462 LINE",
"950 1462 LINE",
"868 1028 LINE",
"573 1028 LINE",
"655 1462 LINE",
"508 1462 LINE",
"426 1028 LINE",
"127 1028 LINE",
"127 893 LINE",
"401 893 LINE",
"336 565 LINE",
"51 565 LINE",
"51 428 LINE",
"309 428 LINE",
"231 0 LINE",
"375 0 LINE",
"454 428 LINE",
"747 428 LINE",
"663 0 LINE",
"809 0 LINE",
"893 428 LINE",
"1200 428 LINE",
"1200 565 LINE",
"919 565 LINE",
"983 893 LINE",
"1270 893 LINE",
"1270 1028 LINE",
"1009 1028 LINE"
);
},
{
closed = 1;
nodes = (
"481 565 LINE",
"545 893 LINE",
"837 893 LINE",
"774 565 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */\01216 13 11 3 9 14 8 2 0 1 9 0 104 15 7 2 1 6 4 2 2 3 1 2 103 12 1 10 10 31 77 5 1 3 3 32 3 78 0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 8 31 \012CALL[ ]	/* CallFunction */";
};
width = 1323;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1278 1053 LINE",
"1038 1053 LINE",
"1116 1460 LINE",
"901 1460 LINE",
"823 1053 LINE",
"625 1053 LINE",
"702 1460 LINE",
"483 1460 LINE",
"405 1053 LINE",
"117 1053 LINE",
"117 844 LINE",
"369 844 LINE",
"321 612 LINE",
"45 612 LINE",
"45 406 LINE",
"283 406 LINE",
"209 0 LINE",
"424 0 LINE",
"500 406 LINE",
"694 406 LINE",
"616 0 LINE",
"836 0 LINE",
"913 406 LINE",
"1210 406 LINE",
"1210 612 LINE",
"952 612 LINE",
"999 844 LINE",
"1278 844 LINE"
);
},
{
closed = 1;
nodes = (
"782 844 LINE",
"735 612 LINE",
"539 612 LINE",
"586 844 LINE"
);
}
);
width = 1323;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1318 1073 LINE",
"1089 1073 LINE",
"1162 1462 LINE",
"894 1462 LINE",
"822 1073 LINE",
"657 1073 LINE",
"730 1462 LINE",
"462 1462 LINE",
"390 1073 LINE",
"104 1073 LINE",
"104 813 LINE",
"341 813 LINE",
"310 645 LINE",
"36 645 LINE",
"36 391 LINE",
"261 391 LINE",
"190 0 LINE",
"456 0 LINE",
"528 391 LINE",
"695 391 LINE",
"622 0 LINE",
"890 0 LINE",
"964 391 LINE",
"1255 391 LINE",
"1255 645 LINE",
"1011 645 LINE",
"1042 813 LINE",
"1318 813 LINE"
);
},
{
closed = 1;
nodes = (
"773 813 LINE",
"743 645 LINE",
"577 645 LINE",
"607 813 LINE"
);
}
);
width = 1355;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = dollar;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"567 20 LINE",
"737 29 OFFCURVE",
"960 207 OFFCURVE",
"960 381 QCURVE SMOOTH",
"960 489 OFFCURVE",
"860 625 OFFCURVE",
"682 717 OFFCURVE",
"567 758 QCURVE",
"567 1391 LINE",
"633 1389 OFFCURVE",
"790 1358 OFFCURVE",
"876 1319 QCURVE",
"899 1366 LINE",
"815 1405 OFFCURVE",
"649 1440 OFFCURVE",
"567 1442 QCURVE",
"567 1554 LINE",
"518 1554 LINE",
"518 1442 LINE",
"407 1436 OFFCURVE",
"233 1354 OFFCURVE",
"131 1204 OFFCURVE",
"131 1098 QCURVE SMOOTH",
"131 987 OFFCURVE",
"237 852 OFFCURVE",
"414 762 OFFCURVE",
"518 723 QCURVE",
"518 72 LINE",
"405 74 OFFCURVE",
"209 111 OFFCURVE",
"137 139 QCURVE",
"137 80 LINE",
"201 57 OFFCURVE",
"389 23 OFFCURVE",
"518 20 QCURVE",
"518 -119 LINE",
"567 -119 LINE"
);
},
{
closed = 1;
nodes = (
"281 887 OFFCURVE",
"186 1008 OFFCURVE",
"186 1102 QCURVE SMOOTH",
"186 1196 OFFCURVE",
"274 1321 OFFCURVE",
"426 1386 OFFCURVE",
"518 1391 QCURVE",
"518 776 LINE",
"430 809 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"672 664 OFFCURVE",
"823 582 OFFCURVE",
"905 469 OFFCURVE",
"905 383 QCURVE SMOOTH",
"905 229 OFFCURVE",
"713 80 OFFCURVE",
"567 72 QCURVE",
"567 702 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"608 63 LINE",
"791 78 OFFCURVE",
"1008 258 OFFCURVE",
"1008 416 QCURVE SMOOTH",
"1008 520 OFFCURVE",
"911 653 OFFCURVE",
"733 741 OFFCURVE",
"608 782 QCURVE",
"608 1307 LINE",
"682 1303 OFFCURVE",
"840 1266 OFFCURVE",
"915 1233 QCURVE",
"954 1333 LINE",
"801 1403 OFFCURVE",
"608 1409 QCURVE",
"608 1554 LINE",
"518 1554 LINE",
"518 1409 LINE",
"344 1399 OFFCURVE",
"129 1225 OFFCURVE",
"129 1069 QCURVE SMOOTH",
"129 965 OFFCURVE",
"223 827 OFFCURVE",
"397 735 OFFCURVE",
"518 696 QCURVE",
"518 164 LINE",
"410 166 OFFCURVE",
"201 211 OFFCURVE",
"131 240 QCURVE",
"131 123 LINE",
"197 96 OFFCURVE",
"397 61 OFFCURVE",
"518 59 QCURVE",
"518 -119 LINE",
"608 -119 LINE"
);
},
{
closed = 1;
nodes = (
"244 967 OFFCURVE",
"244 1077 QCURVE SMOOTH",
"244 1182 OFFCURVE",
"393 1296 OFFCURVE",
"518 1303 QCURVE",
"518 815 LINE",
"391 856 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"754 618 OFFCURVE",
"893 514 OFFCURVE",
"893 410 QCURVE SMOOTH",
"893 299 OFFCURVE",
"741 180 OFFCURVE",
"608 170 QCURVE",
"608 666 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"843 129 OFFCURVE",
"1056 307 OFFCURVE",
"1056 451 QCURVE SMOOTH",
"1056 553 OFFCURVE",
"964 682 OFFCURVE",
"783 770 OFFCURVE",
"648 809 QCURVE",
"648 1221 LINE",
"730 1214 OFFCURVE",
"888 1176 OFFCURVE",
"953 1149 QCURVE",
"1009 1300 LINE",
"935 1331 OFFCURVE",
"757 1372 OFFCURVE",
"648 1376 QCURVE",
"648 1554 LINE",
"517 1554 LINE",
"517 1374 LINE",
"337 1364 OFFCURVE",
"126 1192 OFFCURVE",
"126 1040 QCURVE SMOOTH",
"126 895 OFFCURVE",
"314 727 OFFCURVE",
"517 672 QCURVE",
"517 258 LINE",
"413 260 OFFCURVE",
"196 309 OFFCURVE",
"126 342 QCURVE",
"126 168 LINE",
"192 137 OFFCURVE",
"405 102 OFFCURVE",
"517 100 QCURVE",
"517 -119 LINE",
"648 -119 LINE",
"648 109 LINE"
);
},
{
closed = 1;
nodes = (
"302 973 OFFCURVE",
"302 1055 QCURVE SMOOTH",
"302 1122 OFFCURVE",
"407 1208 OFFCURVE",
"517 1217 QCURVE",
"517 854 LINE",
"394 885 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"880 516 OFFCURVE",
"880 438 QCURVE SMOOTH",
"880 369 OFFCURVE",
"769 281 OFFCURVE",
"648 268 QCURVE",
"648 629 LINE",
"781 594 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01243 42 36 35 27 26 23 22 10 6 10 2 3 34 5 2 1 2 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0125 1 3 4 2 4 3 2 128 0 0 1 0 134 0 2 0 1 0 2 1 106 0 4 4 33 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 4 3 4 133 5 1 3 2 3 133 0 0 1 0 134 0 2 1 1 2 89 0 2 2 1 98 0 1 2 1 82 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01217 17 22 21 17 16 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"655 86 LINE",
"874 106 OFFCURVE",
"1092 307 OFFCURVE",
"1092 457 QCURVE SMOOTH",
"1092 578 OFFCURVE",
"967 725 OFFCURVE",
"766 821 OFFCURVE",
"655 862 QCURVE",
"655 1157 LINE",
"727 1151 OFFCURVE",
"893 1114 OFFCURVE",
"975 1079 QCURVE",
"1069 1313 LINE",
"883 1397 OFFCURVE",
"655 1405 QCURVE",
"655 1554 LINE",
"518 1554 LINE",
"518 1401 LINE",
"328 1384 OFFCURVE",
"88 1202 OFFCURVE",
"88 1049 QCURVE SMOOTH",
"88 948 OFFCURVE",
"170 805 OFFCURVE",
"360 688 OFFCURVE",
"518 627 QCURVE",
"518 317 LINE",
"410 324 OFFCURVE",
"174 391 OFFCURVE",
"90 432 QCURVE",
"90 168 LINE",
"176 129 OFFCURVE",
"385 86 OFFCURVE",
"518 82 QCURVE",
"518 -119 LINE",
"655 -119 LINE"
);
},
{
closed = 1;
nodes = (
"389 1006 OFFCURVE",
"389 1049 QCURVE SMOOTH",
"389 1135 OFFCURVE",
"518 1153 QCURVE",
"518 918 LINE",
"450 948 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"723 543 OFFCURVE",
"790 483 OFFCURVE",
"790 442 QCURVE SMOOTH",
"790 348 OFFCURVE",
"655 324 QCURVE",
"655 573 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"684 49 LINE",
"917 74 OFFCURVE",
"1134 305 OFFCURVE",
"1134 471 QCURVE SMOOTH",
"1134 592 OFFCURVE",
"1028 741 OFFCURVE",
"827 838 OFFCURVE",
"684 881 QCURVE",
"684 1128 LINE",
"766 1120 OFFCURVE",
"932 1081 OFFCURVE",
"1007 1049 QCURVE",
"1095 1323 LINE",
"1011 1356 OFFCURVE",
"809 1411 OFFCURVE",
"684 1417 QCURVE",
"684 1556 LINE",
"495 1556 LINE",
"495 1415 LINE",
"295 1401 OFFCURVE",
"53 1214 OFFCURVE",
"53 1028 QCURVE SMOOTH",
"53 897 OFFCURVE",
"168 731 OFFCURVE",
"368 629 OFFCURVE",
"495 592 QCURVE",
"495 340 LINE",
"401 348 OFFCURVE",
"182 399 OFFCURVE",
"86 442 QCURVE",
"86 129 LINE",
"172 92 OFFCURVE",
"364 49 OFFCURVE",
"495 45 QCURVE",
"495 -119 LINE",
"684 -119 LINE"
);
},
{
closed = 1;
nodes = (
"383 1004 OFFCURVE",
"383 1042 QCURVE SMOOTH",
"383 1116 OFFCURVE",
"495 1126 QCURVE",
"495 936 LINE",
"434 956 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"751 524 OFFCURVE",
"801 477 OFFCURVE",
"801 438 QCURVE SMOOTH",
"801 362 OFFCURVE",
"684 344 QCURVE",
"684 545 LINE"
);
}
);
width = 1181;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = percent;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"120 1253 OFFCURVE",
"120 1026 QCURVE SMOOTH",
"120 799 OFFCURVE",
"263 565 OFFCURVE",
"399 565 QCURVE SMOOTH",
"532 565 OFFCURVE",
"681 795 OFFCURVE",
"681 1026 QCURVE SMOOTH",
"681 1249 OFFCURVE",
"544 1483 OFFCURVE",
"403 1483 QCURVE SMOOTH",
"272 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"378 0 LINE",
"435 0 LINE",
"1246 1462 LINE",
"1189 1462 LINE"
);
},
{
closed = 1;
nodes = (
"626 1223 OFFCURVE",
"626 1026 QCURVE SMOOTH",
"626 827 OFFCURVE",
"511 616 OFFCURVE",
"399 616 QCURVE SMOOTH",
"290 616 OFFCURVE",
"175 823 OFFCURVE",
"175 1026 QCURVE SMOOTH",
"175 1231 OFFCURVE",
"294 1432 OFFCURVE",
"403 1432 QCURVE SMOOTH",
"519 1432 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"941 668 OFFCURVE",
"941 440 QCURVE SMOOTH",
"941 213 OFFCURVE",
"1085 -20 OFFCURVE",
"1220 -20 QCURVE SMOOTH",
"1351 -20 OFFCURVE",
"1502 209 OFFCURVE",
"1502 440 QCURVE SMOOTH",
"1502 664 OFFCURVE",
"1365 897 OFFCURVE",
"1224 897 QCURVE SMOOTH",
"1093 897 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1447 637 OFFCURVE",
"1447 440 QCURVE SMOOTH",
"1447 242 OFFCURVE",
"1334 31 OFFCURVE",
"1220 31 QCURVE SMOOTH",
"1113 31 OFFCURVE",
"997 238 OFFCURVE",
"997 440 QCURVE SMOOTH",
"997 645 OFFCURVE",
"1117 846 OFFCURVE",
"1224 846 QCURVE SMOOTH",
"1341 846 OFFCURVE"
);
}
);
width = 1624;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"110 1249 OFFCURVE",
"110 1026 QCURVE SMOOTH",
"110 803 OFFCURVE",
"260 565 OFFCURVE",
"399 565 QCURVE SMOOTH",
"544 565 OFFCURVE",
"694 803 OFFCURVE",
"694 1026 QCURVE SMOOTH",
"694 1245 OFFCURVE",
"546 1483 OFFCURVE",
"401 1483 QCURVE SMOOTH",
"257 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"372 0 LINE",
"479 0 LINE",
"1290 1462 LINE",
"1183 1462 LINE"
);
},
{
closed = 1;
nodes = (
"591 1206 OFFCURVE",
"591 1026 QCURVE SMOOTH",
"591 655 OFFCURVE",
"399 655 QCURVE SMOOTH",
"212 655 OFFCURVE",
"212 1026 QCURVE SMOOTH",
"212 1393 OFFCURVE",
"401 1393 QCURVE SMOOTH",
"499 1393 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"968 664 OFFCURVE",
"968 440 QCURVE SMOOTH",
"968 217 OFFCURVE",
"1116 -20 OFFCURVE",
"1257 -20 QCURVE SMOOTH",
"1400 -20 OFFCURVE",
"1552 217 OFFCURVE",
"1552 440 QCURVE SMOOTH",
"1552 659 OFFCURVE",
"1404 897 OFFCURVE",
"1259 897 QCURVE SMOOTH",
"1116 897 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1449 621 OFFCURVE",
"1449 440 QCURVE SMOOTH",
"1449 70 OFFCURVE",
"1257 70 QCURVE SMOOTH",
"1071 70 OFFCURVE",
"1071 440 QCURVE SMOOTH",
"1071 807 OFFCURVE",
"1259 807 QCURVE SMOOTH",
"1357 807 OFFCURVE"
);
}
);
width = 1662;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"100 1243 OFFCURVE",
"100 1026 QCURVE SMOOTH",
"100 809 OFFCURVE",
"254 565 OFFCURVE",
"399 565 QCURVE SMOOTH",
"557 565 OFFCURVE",
"706 809 OFFCURVE",
"706 1026 QCURVE SMOOTH",
"706 1243 OFFCURVE",
"549 1483 OFFCURVE",
"399 1483 QCURVE SMOOTH",
"243 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"557 1026 QCURVE SMOOTH",
"557 694 OFFCURVE",
"399 694 QCURVE SMOOTH",
"321 694 OFFCURVE",
"250 862 OFFCURVE",
"250 1026 QCURVE SMOOTH",
"250 1190 OFFCURVE",
"321 1356 OFFCURVE",
"399 1356 QCURVE SMOOTH",
"557 1356 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"995 657 OFFCURVE",
"995 440 QCURVE SMOOTH",
"995 223 OFFCURVE",
"1149 -20 OFFCURVE",
"1294 -20 QCURVE SMOOTH",
"1452 -20 OFFCURVE",
"1601 223 OFFCURVE",
"1601 440 QCURVE SMOOTH",
"1601 657 OFFCURVE",
"1443 897 OFFCURVE",
"1294 897 QCURVE SMOOTH",
"1138 897 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1452 440 QCURVE SMOOTH",
"1452 109 OFFCURVE",
"1294 109 QCURVE SMOOTH",
"1216 109 OFFCURVE",
"1144 274 OFFCURVE",
"1144 440 QCURVE SMOOTH",
"1144 604 OFFCURVE",
"1216 768 OFFCURVE",
"1294 768 QCURVE SMOOTH",
"1452 768 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1335 1462 LINE",
"1177 1462 LINE",
"366 0 LINE",
"524 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\01212 1 4 13 1 6 3 4 6 106 0 3 0 1 7 3 1 105 11 1 2 2 0 97 8 10 2 0 0 37 77 0 7 7 5 97 14 9 2 5 5 38 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 52 values pushed */\01212 1 4 13 1 6 3 4 6 106 0 3 0 1 7 3 1 105 0 8 8 31 77 11 1 2 2 0 97 10 1 0 0 37 77 14 1 9 9 32 77 0 7 7 5 97 0 5 5 38 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 43 values pushed */\01244 44 35 34 23 22 13 12 1 0 44 47 44 47 46 45 41 39 34 43 35 43 29 27 22 33 23 33 19 17 12 21 13 21 7 5 0 11 1 11 15 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1701;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"63 1243 OFFCURVE",
"63 1026 QCURVE SMOOTH",
"63 809 OFFCURVE",
"237 565 OFFCURVE",
"407 565 QCURVE SMOOTH",
"589 565 OFFCURVE",
"757 809 OFFCURVE",
"757 1026 QCURVE SMOOTH",
"757 1243 OFFCURVE",
"579 1483 OFFCURVE",
"407 1483 QCURVE SMOOTH",
"227 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"395 0 LINE",
"634 0 LINE",
"1445 1462 LINE",
"1206 1462 LINE"
);
},
{
closed = 1;
nodes = (
"505 1024 QCURVE SMOOTH",
"505 772 OFFCURVE",
"409 772 QCURVE SMOOTH",
"315 772 OFFCURVE",
"315 1024 QCURVE SMOOTH",
"315 1274 OFFCURVE",
"409 1274 QCURVE SMOOTH",
"505 1274 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1087 659 OFFCURVE",
"1087 442 QCURVE SMOOTH",
"1087 225 OFFCURVE",
"1261 -18 OFFCURVE",
"1431 -18 QCURVE SMOOTH",
"1613 -18 OFFCURVE",
"1781 225 OFFCURVE",
"1781 442 QCURVE SMOOTH",
"1781 659 OFFCURVE",
"1603 899 OFFCURVE",
"1431 899 QCURVE SMOOTH",
"1251 899 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1529 440 QCURVE SMOOTH",
"1529 188 OFFCURVE",
"1433 188 QCURVE SMOOTH",
"1339 188 OFFCURVE",
"1339 440 QCURVE SMOOTH",
"1339 690 OFFCURVE",
"1433 690 QCURVE SMOOTH",
"1529 690 OFFCURVE"
);
}
);
width = 1845;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"36 1243 OFFCURVE",
"36 1026 QCURVE SMOOTH",
"36 809 OFFCURVE",
"241 565 OFFCURVE",
"409 565 QCURVE SMOOTH",
"595 565 OFFCURVE",
"790 809 OFFCURVE",
"790 1026 QCURVE SMOOTH",
"790 1243 OFFCURVE",
"581 1483 OFFCURVE",
"409 1483 QCURVE SMOOTH",
"229 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"411 0 LINE",
"708 0 LINE",
"1519 1462 LINE",
"1222 1462 LINE"
);
},
{
closed = 1;
nodes = (
"489 1122 OFFCURVE",
"489 1022 QCURVE SMOOTH",
"489 922 OFFCURVE",
"456 805 OFFCURVE",
"413 805 QCURVE SMOOTH",
"370 805 OFFCURVE",
"337 924 OFFCURVE",
"337 1022 QCURVE SMOOTH",
"337 1122 OFFCURVE",
"370 1239 OFFCURVE",
"413 1239 QCURVE SMOOTH",
"456 1239 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1148 662 OFFCURVE",
"1148 444 QCURVE SMOOTH",
"1148 227 OFFCURVE",
"1353 -16 OFFCURVE",
"1521 -16 QCURVE SMOOTH",
"1707 -16 OFFCURVE",
"1902 227 OFFCURVE",
"1902 444 QCURVE SMOOTH",
"1902 662 OFFCURVE",
"1693 901 OFFCURVE",
"1521 901 QCURVE SMOOTH",
"1341 901 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1601 543 OFFCURVE",
"1601 440 QCURVE SMOOTH",
"1601 340 OFFCURVE",
"1568 223 OFFCURVE",
"1525 223 QCURVE SMOOTH",
"1482 223 OFFCURVE",
"1449 342 OFFCURVE",
"1449 440 QCURVE SMOOTH",
"1449 541 OFFCURVE",
"1482 657 OFFCURVE",
"1525 657 QCURVE SMOOTH",
"1568 657 OFFCURVE"
);
}
);
width = 1941;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = ampersand;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"285 1319 OFFCURVE",
"285 1180 QCURVE SMOOTH",
"285 1110 OFFCURVE",
"334 995 OFFCURVE",
"432 881 OFFCURVE",
"504 809 QCURVE",
"385 752 OFFCURVE",
"217 635 OFFCURVE",
"129 481 OFFCURVE",
"129 367 QCURVE SMOOTH",
"129 180 OFFCURVE",
"379 -20 OFFCURVE",
"575 -20 QCURVE SMOOTH",
"758 -20 OFFCURVE",
"995 113 OFFCURVE",
"1092 215 QCURVE",
"1294 0 LINE",
"1366 0 LINE",
"1124 250 LINE",
"1194 340 OFFCURVE",
"1300 545 OFFCURVE",
"1329 672 QCURVE",
"1274 672 LINE",
"1249 557 OFFCURVE",
"1151 362 OFFCURVE",
"1090 289 QCURVE",
"592 795 LINE",
"752 872 OFFCURVE",
"942 1049 OFFCURVE",
"942 1190 QCURVE SMOOTH",
"942 1327 OFFCURVE",
"762 1485 OFFCURVE",
"623 1485 QCURVE SMOOTH",
"471 1485 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"887 1303 OFFCURVE",
"887 1190 QCURVE SMOOTH",
"887 1065 OFFCURVE",
"707 899 OFFCURVE",
"551 831 QCURVE",
"451 934 OFFCURVE",
"340 1085 OFFCURVE",
"340 1180 QCURVE SMOOTH",
"340 1296 OFFCURVE",
"491 1434 OFFCURVE",
"623 1434 QCURVE SMOOTH",
"741 1434 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"963 147 OFFCURVE",
"745 31 OFFCURVE",
"575 31 QCURVE SMOOTH",
"401 31 OFFCURVE",
"184 205 OFFCURVE",
"184 367 QCURVE SMOOTH",
"184 471 OFFCURVE",
"266 612 OFFCURVE",
"426 717 OFFCURVE",
"541 772 QCURVE",
"1057 250 LINE"
);
}
);
width = 1437;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"265 1315 OFFCURVE",
"265 1171 QCURVE SMOOTH",
"265 1065 OFFCURVE",
"376 901 OFFCURVE",
"462 811 QCURVE",
"354 754 OFFCURVE",
"200 637 OFFCURVE",
"118 483 OFFCURVE",
"118 373 QCURVE SMOOTH",
"118 182 OFFCURVE",
"368 -20 OFFCURVE",
"573 -20 QCURVE SMOOTH",
"749 -20 OFFCURVE",
"986 98 OFFCURVE",
"1081 193 QCURVE",
"1273 0 LINE",
"1429 0 LINE",
"1158 270 LINE",
"1306 442 OFFCURVE",
"1367 700 QCURVE",
"1248 700 LINE",
"1224 596 OFFCURVE",
"1142 416 OFFCURVE",
"1085 348 QCURVE",
"638 791 LINE",
"780 866 OFFCURVE",
"958 1044 OFFCURVE",
"958 1180 QCURVE SMOOTH",
"958 1323 OFFCURVE",
"773 1485 OFFCURVE",
"622 1485 QCURVE SMOOTH",
"458 1485 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"843 1274 OFFCURVE",
"843 1180 QCURVE SMOOTH",
"843 1075 OFFCURVE",
"700 932 OFFCURVE",
"560 862 QCURVE",
"474 950 OFFCURVE",
"380 1090 OFFCURVE",
"380 1174 QCURVE SMOOTH",
"380 1272 OFFCURVE",
"511 1384 OFFCURVE",
"618 1384 QCURVE SMOOTH",
"720 1384 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"927 186 OFFCURVE",
"724 84 OFFCURVE",
"575 84 QCURVE SMOOTH",
"423 84 OFFCURVE",
"239 240 OFFCURVE",
"239 377 QCURVE SMOOTH",
"239 467 OFFCURVE",
"308 590 OFFCURVE",
"442 686 OFFCURVE",
"536 735 QCURVE",
"1007 266 LINE"
);
}
);
width = 1468;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"245 1315 OFFCURVE",
"245 1165 QCURVE SMOOTH",
"245 1053 OFFCURVE",
"358 885 OFFCURVE",
"423 811 QCURVE",
"278 729 OFFCURVE",
"108 537 OFFCURVE",
"108 381 QCURVE SMOOTH",
"108 188 OFFCURVE",
"356 -20 OFFCURVE",
"569 -20 QCURVE SMOOTH",
"739 -20 OFFCURVE",
"976 86 OFFCURVE",
"1073 172 QCURVE",
"1251 0 LINE",
"1494 0 LINE",
"1195 291 LINE",
"1273 375 OFFCURVE",
"1372 598 OFFCURVE",
"1404 731 QCURVE",
"1222 731 LINE",
"1200 635 OFFCURVE",
"1132 469 OFFCURVE",
"1079 406 QCURVE",
"683 786 LINE",
"810 860 OFFCURVE",
"976 1040 OFFCURVE",
"976 1169 QCURVE SMOOTH",
"976 1319 OFFCURVE",
"786 1485 OFFCURVE",
"622 1485 QCURVE SMOOTH",
"446 1485 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"798 1243 OFFCURVE",
"798 1169 QCURVE SMOOTH",
"798 1085 OFFCURVE",
"694 963 OFFCURVE",
"573 893 QCURVE",
"499 969 OFFCURVE",
"421 1094 OFFCURVE",
"421 1167 QCURVE SMOOTH",
"421 1247 OFFCURVE",
"530 1337 OFFCURVE",
"616 1337 QCURVE SMOOTH",
"700 1337 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"706 139 OFFCURVE",
"575 139 QCURVE SMOOTH",
"448 139 OFFCURVE",
"296 274 OFFCURVE",
"296 387 QCURVE SMOOTH",
"296 498 OFFCURVE",
"421 633 OFFCURVE",
"532 698 QCURVE",
"958 285 LINE",
"892 225 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01238 26 6 3 1 4 45 17 14 7 4 5 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0127 1 4 4 0 97 6 1 0 0 37 77 0 1 1 2 97 3 1 2 2 32 77 0 5 5 2 97 3 1 2 2 32 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0127 1 4 4 0 97 6 1 0 0 37 77 0 1 1 2 95 0 2 2 32 77 0 5 5 3 97 0 3 3 38 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01233 32 1 0 52 50 32 43 33 43 21 19 16 15 11 10 0 31 1 31 8 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1499;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"314 1401 OFFCURVE",
"206 1249 OFFCURVE",
"206 1145 QCURVE SMOOTH",
"206 1057 OFFCURVE",
"269 901 OFFCURVE",
"349 809 QCURVE",
"224 737 OFFCURVE",
"81 551 OFFCURVE",
"81 395 QCURVE SMOOTH",
"81 209 OFFCURVE",
"362 -20 OFFCURVE",
"611 -20 QCURVE SMOOTH",
"738 -20 OFFCURVE",
"953 51 OFFCURVE",
"1044 113 QCURVE",
"1158 0 LINE",
"1535 0 LINE",
"1234 293 LINE",
"1326 408 OFFCURVE",
"1445 670 OFFCURVE",
"1476 784 QCURVE",
"1158 784 LINE",
"1138 707 OFFCURVE",
"1076 553 OFFCURVE",
"1035 483 QCURVE",
"751 760 LINE",
"876 831 OFFCURVE",
"1044 1024 OFFCURVE",
"1044 1165 QCURVE SMOOTH",
"1044 1266 OFFCURVE",
"937 1409 OFFCURVE",
"753 1483 OFFCURVE",
"634 1483 QCURVE SMOOTH",
"507 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"761 1194 OFFCURVE",
"761 1133 QCURVE SMOOTH",
"761 1071 OFFCURVE",
"669 977 OFFCURVE",
"583 930 QCURVE",
"540 979 OFFCURVE",
"489 1073 OFFCURVE",
"489 1124 QCURVE SMOOTH",
"489 1196 OFFCURVE",
"581 1247 OFFCURVE",
"632 1247 QCURVE SMOOTH",
"679 1247 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"812 268 OFFCURVE",
"697 236 OFFCURVE",
"632 236 QCURVE SMOOTH",
"534 236 OFFCURVE",
"403 336 OFFCURVE",
"403 424 QCURVE SMOOTH",
"403 487 OFFCURVE",
"470 584 OFFCURVE",
"527 627 QCURVE",
"859 297 LINE"
);
}
);
width = 1536;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"212 1284 OFFCURVE",
"212 1133 QCURVE SMOOTH",
"212 1034 OFFCURVE",
"282 877 OFFCURVE",
"343 807 QCURVE",
"212 739 OFFCURVE",
"71 537 OFFCURVE",
"71 406 QCURVE SMOOTH",
"71 287 OFFCURVE",
"194 94 OFFCURVE",
"429 -20 OFFCURVE",
"601 -20 QCURVE SMOOTH",
"724 -20 OFFCURVE",
"878 12 OFFCURVE",
"986 68 OFFCURVE",
"1042 102 QCURVE",
"1140 0 LINE",
"1646 0 LINE",
"1326 307 LINE",
"1402 397 OFFCURVE",
"1533 672 OFFCURVE",
"1566 821 QCURVE",
"1161 821 LINE",
"1130 674 OFFCURVE",
"1056 561 QCURVE",
"857 750 LINE",
"974 819 OFFCURVE",
"1122 1006 OFFCURVE",
"1122 1133 QCURVE SMOOTH",
"1122 1296 OFFCURVE",
"882 1481 OFFCURVE",
"675 1481 QCURVE SMOOTH",
"448 1481 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"769 1182 OFFCURVE",
"769 1133 QCURVE SMOOTH",
"769 1085 OFFCURVE",
"710 997 OFFCURVE",
"653 965 QCURVE",
"618 997 OFFCURVE",
"565 1075 OFFCURVE",
"565 1120 QCURVE SMOOTH",
"565 1176 OFFCURVE",
"628 1225 OFFCURVE",
"669 1225 QCURVE SMOOTH",
"712 1225 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"782 322 OFFCURVE",
"696 291 OFFCURVE",
"638 291 QCURVE SMOOTH",
"565 291 OFFCURVE",
"474 371 OFFCURVE",
"474 434 QCURVE SMOOTH",
"474 479 OFFCURVE",
"513 559 OFFCURVE",
"556 592 QCURVE",
"804 340 LINE"
);
}
);
width = 1636;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = quotesingle;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"157 934 LINE",
"198 934 LINE",
"206 1462 LINE",
"149 1462 LINE"
);
}
);
width = 352;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"166 934 LINE",
"241 934 LINE",
"266 1462 LINE",
"141 1462 LINE"
);
}
);
width = 405;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"328 1462 LINE",
"133 1462 LINE",
"174 934 LINE",
"287 934 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0122 1 1 1 0 95 0 0 0 31 1 78 0 0 0 3 0 3 17 3 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 460;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"174 934 LINE",
"371 934 LINE",
"412 1462 LINE",
"133 1462 LINE"
);
}
);
width = 544;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"161 934 LINE",
"435 934 LINE",
"476 1462 LINE",
"120 1462 LINE"
);
}
);
width = 598;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = parenleft;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"244 -152 OFFCURVE",
"383 -324 QCURVE",
"451 -324 LINE",
"295 -141 OFFCURVE",
"141 307 OFFCURVE",
"141 563 QCURVE SMOOTH",
"141 821 OFFCURVE",
"293 1282 OFFCURVE",
"451 1462 QCURVE",
"383 1462 LINE",
"244 1296 OFFCURVE",
"86 834 OFFCURVE",
"86 561 QCURVE SMOOTH",
"86 293 OFFCURVE"
);
}
);
width = 522;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"235 -147 OFFCURVE",
"382 -324 QCURVE",
"499 -324 LINE",
"351 -135 OFFCURVE",
"202 315 OFFCURVE",
"202 563 QCURVE SMOOTH",
"202 813 OFFCURVE",
"351 1274 OFFCURVE",
"501 1462 QCURVE",
"382 1462 LINE",
"235 1286 OFFCURVE",
"83 823 OFFCURVE",
"83 561 QCURVE SMOOTH",
"83 303 OFFCURVE"
);
}
);
width = 569;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"226 -143 OFFCURVE",
"382 -324 QCURVE",
"550 -324 LINE",
"409 -131 OFFCURVE",
"263 326 OFFCURVE",
"263 563 QCURVE SMOOTH",
"263 807 OFFCURVE",
"409 1270 OFFCURVE",
"552 1462 QCURVE",
"382 1462 LINE",
"226 1276 OFFCURVE",
"81 811 OFFCURVE",
"81 561 QCURVE SMOOTH",
"81 313 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 1 0 1 134 0 0 0 31 0 78 22 19 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 614;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"226 -143 OFFCURVE",
"382 -324 QCURVE",
"630 -324 LINE",
"491 -135 OFFCURVE",
"347 326 OFFCURVE",
"347 563 QCURVE SMOOTH",
"347 807 OFFCURVE",
"493 1270 OFFCURVE",
"632 1462 QCURVE",
"382 1462 LINE",
"226 1276 OFFCURVE",
"81 811 OFFCURVE",
"81 561 QCURVE SMOOTH",
"81 313 OFFCURVE"
);
}
);
width = 694;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"126 92 OFFCURVE",
"251 -205 OFFCURVE",
"354 -324 QCURVE",
"677 -324 LINE",
"585 -199 OFFCURVE",
"470 102 OFFCURVE",
"417 426 OFFCURVE",
"417 584 QCURVE SMOOTH",
"417 827 OFFCURVE",
"540 1311 OFFCURVE",
"679 1503 QCURVE",
"354 1503 LINE",
"251 1380 OFFCURVE",
"126 1077 OFFCURVE",
"73 750 OFFCURVE",
"73 582 QCURVE SMOOTH",
"73 418 OFFCURVE"
);
}
);
width = 735;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"280 1290 OFFCURVE",
"141 1462 QCURVE",
"73 1462 LINE",
"229 1280 OFFCURVE",
"382 831 OFFCURVE",
"382 575 QCURVE SMOOTH",
"382 317 OFFCURVE",
"231 -143 OFFCURVE",
"73 -324 QCURVE",
"141 -324 LINE",
"280 -158 OFFCURVE",
"438 305 OFFCURVE",
"438 578 QCURVE SMOOTH",
"438 846 OFFCURVE"
);
}
);
width = 522;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"333 1284 OFFCURVE",
"186 1462 QCURVE",
"67 1462 LINE",
"217 1274 OFFCURVE",
"366 819 OFFCURVE",
"366 569 QCURVE SMOOTH",
"366 319 OFFCURVE",
"219 -135 OFFCURVE",
"69 -324 QCURVE",
"186 -324 LINE",
"333 -152 OFFCURVE",
"485 309 OFFCURVE",
"485 569 QCURVE SMOOTH",
"485 829 OFFCURVE"
);
}
);
width = 569;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"387 1276 OFFCURVE",
"231 1462 QCURVE",
"61 1462 LINE",
"204 1270 OFFCURVE",
"350 807 OFFCURVE",
"350 563 QCURVE SMOOTH",
"350 326 OFFCURVE",
"204 -131 OFFCURVE",
"63 -324 QCURVE",
"231 -324 LINE",
"387 -143 OFFCURVE",
"532 313 OFFCURVE",
"532 561 QCURVE SMOOTH",
"532 811 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 1 0 134 0 1 1 31 1 78 22 19 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 614;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"467 1276 OFFCURVE",
"311 1462 QCURVE",
"61 1462 LINE",
"200 1270 OFFCURVE",
"346 807 OFFCURVE",
"346 563 QCURVE SMOOTH",
"346 326 OFFCURVE",
"200 -135 OFFCURVE",
"63 -324 QCURVE",
"311 -324 LINE",
"467 -143 OFFCURVE",
"612 313 OFFCURVE",
"612 561 QCURVE SMOOTH",
"612 811 OFFCURVE"
);
}
);
width = 694;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"608 1077 OFFCURVE",
"483 1380 OFFCURVE",
"381 1503 QCURVE",
"55 1503 LINE",
"192 1311 OFFCURVE",
"317 827 OFFCURVE",
"317 584 QCURVE SMOOTH",
"317 426 OFFCURVE",
"264 102 OFFCURVE",
"147 -199 OFFCURVE",
"57 -324 QCURVE",
"381 -324 LINE",
"483 -205 OFFCURVE",
"608 92 OFFCURVE",
"661 418 OFFCURVE",
"661 582 QCURVE SMOOTH",
"661 750 OFFCURVE"
);
}
);
width = 735;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = asterisk;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"542 1130 LINE",
"144 1272 LINE",
"126 1217 LINE",
"532 1100 LINE",
"276 766 LINE",
"323 733 LINE",
"558 1079 LINE",
"796 731 LINE",
"843 766 LINE",
"587 1100 LINE",
"988 1217 LINE",
"972 1272 LINE",
"575 1130 LINE",
"587 1552 LINE",
"529 1552 LINE"
);
}
);
width = 1128;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"522 1147 LINE",
"129 1274 LINE",
"106 1151 LINE",
"495 1077 LINE",
"245 750 LINE",
"360 684 LINE",
"557 1036 LINE",
"763 684 LINE",
"876 750 LINE",
"626 1077 LINE",
"1015 1151 LINE",
"991 1274 LINE",
"598 1147 LINE",
"622 1554 LINE",
"495 1554 LINE"
);
}
);
width = 1128;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"83 1085 LINE",
"456 1055 LINE",
"216 731 LINE",
"398 635 LINE",
"556 993 LINE",
"730 635 LINE",
"906 731 LINE",
"663 1055 LINE",
"1039 1085 LINE",
"1011 1274 LINE",
"618 1163 LINE",
"658 1556 LINE",
"458 1556 LINE",
"501 1163 LINE",
"112 1274 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01214 13 12 11 10 9 8 7 6 5 4 3 12 0 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 6 values pushed */\0120 0 0 33 0 78 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 118 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 4 values pushed */\01217 1 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 1128;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"466 1188 LINE",
"102 1292 LINE",
"63 1042 LINE",
"401 1016 LINE",
"180 719 LINE",
"415 600 LINE",
"552 911 LINE",
"708 598 LINE",
"935 719 LINE",
"712 1016 LINE",
"1052 1040 LINE",
"1019 1292 LINE",
"647 1188 LINE",
"688 1556 LINE",
"425 1556 LINE"
);
}
);
width = 1116;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"438 1204 LINE",
"90 1305 LINE",
"45 1014 LINE",
"358 989 LINE",
"151 711 LINE",
"424 575 LINE",
"547 856 LINE",
"690 573 LINE",
"950 711 LINE",
"743 989 LINE",
"1057 1010 LINE",
"1020 1305 LINE",
"663 1204 LINE",
"702 1556 LINE",
"399 1556 LINE"
);
}
);
width = 1099;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = plus;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"558 1194 LINE",
"558 748 LINE",
"112 748 LINE",
"112 698 LINE",
"558 698 LINE",
"558 252 LINE",
"608 252 LINE",
"608 698 LINE",
"1054 698 LINE",
"1054 748 LINE",
"608 748 LINE",
"608 1194 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"534 1206 LINE",
"534 770 LINE",
"106 770 LINE",
"106 674 LINE",
"534 674 LINE",
"534 240 LINE",
"632 240 LINE",
"632 674 LINE",
"1060 674 LINE",
"1060 770 LINE",
"632 770 LINE",
"632 1206 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"102 795 LINE",
"102 649 LINE",
"510 649 LINE",
"510 227 LINE",
"657 227 LINE",
"657 649 LINE",
"1065 649 LINE",
"1065 795 LINE",
"657 795 LINE",
"657 1219 LINE",
"510 1219 LINE",
"510 795 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 0 0 0 3 95 0 3 0 3 79 17 17 17 17 17 16 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"475 1221 LINE",
"475 831 LINE",
"88 831 LINE",
"88 612 LINE",
"475 612 LINE",
"475 227 LINE",
"694 227 LINE",
"694 612 LINE",
"1081 612 LINE",
"1081 831 LINE",
"694 831 LINE",
"694 1221 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"465 1223 LINE",
"465 856 LINE",
"92 856 LINE",
"92 588 LINE",
"465 588 LINE",
"465 227 LINE",
"733 227 LINE",
"733 588 LINE",
"1106 588 LINE",
"1106 856 LINE",
"733 856 LINE",
"733 1223 LINE"
);
}
);
width = 1200;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = comma;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"175 121 OFFCURVE",
"122 -115 OFFCURVE",
"77 -264 QCURVE",
"122 -264 LINE",
"165 -158 OFFCURVE",
"233 98 OFFCURVE",
"255 213 QCURVE",
"249 238 LINE",
"192 238 LINE"
);
}
);
width = 374;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"157 8 OFFCURVE",
"81 -264 QCURVE",
"169 -264 LINE",
"216 -156 OFFCURVE",
"298 102 OFFCURVE",
"323 213 QCURVE",
"314 238 LINE",
"187 238 LINE"
);
}
);
width = 462;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"112 -147 OFFCURVE",
"83 -264 QCURVE",
"216 -264 LINE",
"265 -154 OFFCURVE",
"364 106 OFFCURVE",
"392 215 QCURVE",
"378 238 LINE",
"185 238 LINE",
"171 131 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 20 16 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 548;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"147 131 OFFCURVE",
"92 -143 OFFCURVE",
"63 -264 QCURVE",
"282 -264 LINE",
"333 -152 OFFCURVE",
"430 106 OFFCURVE",
"458 215 QCURVE",
"444 238 LINE",
"163 238 LINE"
);
}
);
width = 583;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"147 217 OFFCURVE",
"114 16 OFFCURVE",
"77 -193 OFFCURVE",
"57 -285 QCURVE",
"336 -285 LINE",
"368 -209 OFFCURVE",
"436 -2 OFFCURVE",
"493 203 OFFCURVE",
"512 276 QCURVE",
"497 299 LINE",
"155 299 LINE"
);
}
);
width = 632;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = hyphen;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"577 582 LINE",
"81 582 LINE",
"81 530 LINE",
"577 530 LINE"
);
}
);
width = 659;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"577 606 LINE",
"81 606 LINE",
"81 500 LINE",
"577 500 LINE"
);
}
);
width = 659;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"81 469 LINE",
"577 469 LINE",
"577 629 LINE",
"81 629 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 659;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"598 674 LINE",
"61 674 LINE",
"61 424 LINE",
"598 424 LINE"
);
}
);
width = 659;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"608 705 LINE",
"43 705 LINE",
"43 393 LINE",
"608 393 LINE"
);
}
);
width = 651;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = period;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"194 -16 OFFCURVE",
"225 -16 QCURVE SMOOTH",
"262 -16 OFFCURVE",
"280 20 OFFCURVE",
"280 47 QCURVE SMOOTH",
"280 72 OFFCURVE",
"262 111 OFFCURVE",
"225 111 QCURVE SMOOTH",
"194 111 OFFCURVE",
"174 72 OFFCURVE",
"174 47 QCURVE SMOOTH",
"174 20 OFFCURVE"
);
}
);
width = 450;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"249 -23 QCURVE SMOOTH",
"339 -23 OFFCURVE",
"339 78 QCURVE SMOOTH",
"339 178 OFFCURVE",
"249 178 QCURVE SMOOTH",
"159 178 OFFCURVE",
"159 78 QCURVE SMOOTH",
"159 -23 OFFCURVE"
);
}
);
width = 499;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"221 -29 OFFCURVE",
"272 -29 QCURVE SMOOTH",
"323 -29 OFFCURVE",
"401 37 OFFCURVE",
"401 111 QCURVE SMOOTH",
"401 186 OFFCURVE",
"323 248 OFFCURVE",
"272 248 QCURVE SMOOTH",
"221 248 OFFCURVE",
"147 186 OFFCURVE",
"147 111 QCURVE SMOOTH",
"147 37 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 1 97 0 1 1 38 1 78 36 34 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 548;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"218 -27 OFFCURVE",
"292 -27 QCURVE SMOOTH",
"364 -27 OFFCURVE",
"466 53 OFFCURVE",
"466 143 QCURVE SMOOTH",
"466 238 OFFCURVE",
"364 313 OFFCURVE",
"292 313 QCURVE SMOOTH",
"218 313 OFFCURVE",
"116 238 OFFCURVE",
"116 143 QCURVE SMOOTH",
"116 53 OFFCURVE"
);
}
);
width = 583;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"211 -25 OFFCURVE",
"299 -25 QCURVE SMOOTH",
"381 -25 OFFCURVE",
"504 66 OFFCURVE",
"504 166 QCURVE SMOOTH",
"504 272 OFFCURVE",
"381 358 OFFCURVE",
"299 358 QCURVE SMOOTH",
"211 358 OFFCURVE",
"86 272 OFFCURVE",
"86 166 QCURVE SMOOTH",
"86 66 OFFCURVE"
);
}
);
width = 591;
}
);
note = period;
unicode = 002E;
},
{
glyphname = slash;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"26 0 LINE",
"83 0 LINE",
"632 1462 LINE",
"575 1462 LINE"
);
}
);
width = 659;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"24 0 LINE",
"139 0 LINE",
"688 1462 LINE",
"569 1462 LINE"
);
}
);
width = 710;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"741 1462 LINE",
"565 1462 LINE",
"20 0 LINE",
"196 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 0 0 31 77 2 1 1 1 32 1 78 0 0 0 3 0 3 17 3 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 761;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"14 0 LINE",
"290 0 LINE",
"835 1462 LINE",
"559 1462 LINE"
);
}
);
width = 845;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"10 -20 LINE",
"356 -20 LINE",
"901 1483 LINE",
"555 1483 LINE"
);
}
);
width = 905;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = zero;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"955 1294 OFFCURVE",
"759 1485 OFFCURVE",
"585 1485 QCURVE SMOOTH",
"417 1485 OFFCURVE",
"214 1288 OFFCURVE",
"126 950 OFFCURVE",
"126 737 QCURVE SMOOTH",
"126 352 OFFCURVE",
"366 -20 OFFCURVE",
"583 -20 QCURVE SMOOTH",
"1037 -20 OFFCURVE",
"1037 737 QCURVE SMOOTH",
"1037 956 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"255 1253 OFFCURVE",
"431 1434 OFFCURVE",
"585 1434 QCURVE SMOOTH",
"742 1434 OFFCURVE",
"914 1260 OFFCURVE",
"982 946 OFFCURVE",
"982 737 QCURVE SMOOTH",
"982 379 OFFCURVE",
"794 31 OFFCURVE",
"583 31 QCURVE SMOOTH",
"384 31 OFFCURVE",
"181 377 OFFCURVE",
"181 737 QCURVE SMOOTH",
"181 938 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"960 1300 OFFCURVE",
"753 1485 OFFCURVE",
"585 1485 QCURVE SMOOTH",
"413 1485 OFFCURVE",
"206 1296 OFFCURVE",
"114 958 OFFCURVE",
"114 735 QCURVE SMOOTH",
"114 365 OFFCURVE",
"352 -20 OFFCURVE",
"583 -20 QCURVE SMOOTH",
"827 -20 OFFCURVE",
"1054 369 OFFCURVE",
"1054 735 QCURVE SMOOTH",
"1054 963 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"296 1227 OFFCURVE",
"452 1382 OFFCURVE",
"585 1382 QCURVE SMOOTH",
"718 1382 OFFCURVE",
"872 1229 OFFCURVE",
"935 938 OFFCURVE",
"935 735 QCURVE SMOOTH",
"935 406 OFFCURVE",
"769 82 OFFCURVE",
"583 82 QCURVE SMOOTH",
"401 82 OFFCURVE",
"231 406 OFFCURVE",
"231 735 QCURVE SMOOTH",
"231 936 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"829 1485 OFFCURVE",
"583 1485 QCURVE SMOOTH",
"409 1485 OFFCURVE",
"196 1307 OFFCURVE",
"100 971 OFFCURVE",
"100 733 QCURVE SMOOTH",
"100 379 OFFCURVE",
"336 -20 OFFCURVE",
"583 -20 QCURVE SMOOTH",
"757 -20 OFFCURVE",
"972 160 OFFCURVE",
"1071 496 OFFCURVE",
"1071 733 QCURVE SMOOTH",
"1071 1090 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"417 1331 OFFCURVE",
"583 1331 QCURVE SMOOTH",
"747 1331 OFFCURVE",
"888 1032 OFFCURVE",
"888 733 QCURVE SMOOTH",
"888 430 OFFCURVE",
"747 133 OFFCURVE",
"583 133 QCURVE SMOOTH",
"417 133 OFFCURVE",
"280 432 OFFCURVE",
"280 733 QCURVE SMOOTH",
"280 1032 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 38 0 78 36 36 37 35 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"845 1485 OFFCURVE",
"583 1485 QCURVE SMOOTH",
"397 1485 OFFCURVE",
"171 1305 OFFCURVE",
"73 967 OFFCURVE",
"73 731 QCURVE SMOOTH",
"73 377 OFFCURVE",
"319 -20 OFFCURVE",
"583 -20 QCURVE SMOOTH",
"769 -20 OFFCURVE",
"995 160 OFFCURVE",
"1095 496 OFFCURVE",
"1095 731 QCURVE SMOOTH",
"1095 1087 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"466 1235 OFFCURVE",
"583 1235 QCURVE SMOOTH",
"698 1235 OFFCURVE",
"788 981 OFFCURVE",
"788 731 QCURVE SMOOTH",
"788 479 OFFCURVE",
"698 229 OFFCURVE",
"583 229 QCURVE SMOOTH",
"466 229 OFFCURVE",
"380 481 OFFCURVE",
"380 731 QCURVE SMOOTH",
"380 981 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"872 1483 OFFCURVE",
"599 1483 QCURVE SMOOTH",
"405 1483 OFFCURVE",
"171 1303 OFFCURVE",
"71 967 OFFCURVE",
"71 729 QCURVE SMOOTH",
"71 377 OFFCURVE",
"325 -20 OFFCURVE",
"599 -20 QCURVE SMOOTH",
"794 -20 OFFCURVE",
"1027 160 OFFCURVE",
"1128 496 OFFCURVE",
"1128 729 QCURVE SMOOTH",
"1128 1085 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"515 1167 OFFCURVE",
"599 1167 QCURVE SMOOTH",
"681 1167 OFFCURVE",
"735 946 OFFCURVE",
"735 729 QCURVE SMOOTH",
"735 512 OFFCURVE",
"681 295 OFFCURVE",
"599 295 QCURVE SMOOTH",
"515 295 OFFCURVE",
"464 514 OFFCURVE",
"464 729 QCURVE SMOOTH",
"464 946 OFFCURVE"
);
}
);
width = 1200;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"607 1462 LINE",
"208 1171 LINE",
"241 1128 LINE",
"493 1315 LINE SMOOTH",
"532 1343 OFFCURVE",
"579 1380 OFFCURVE",
"603 1403 QCURVE",
"601 1362 OFFCURVE",
"601 1241 OFFCURVE",
"601 1153 QCURVE SMOOTH",
"601 0 LINE",
"654 0 LINE",
"654 1462 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"593 1462 LINE",
"196 1163 LINE",
"257 1081 LINE",
"462 1237 LINE SMOOTH",
"503 1270 OFFCURVE",
"552 1311 OFFCURVE",
"581 1339 QCURVE",
"577 1288 OFFCURVE",
"577 1176 OFFCURVE",
"577 1087 QCURVE SMOOTH",
"577 0 LINE",
"692 0 LINE",
"692 1462 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"182 1155 LINE",
"276 1034 LINE",
"432 1161 LINE",
"471 1196 OFFCURVE",
"526 1241 OFFCURVE",
"559 1274 QCURVE",
"555 1217 OFFCURVE",
"551 1110 OFFCURVE",
"551 1022 QCURVE SMOOTH",
"551 0 LINE",
"727 0 LINE",
"727 1462 LINE",
"577 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01211 10 6 3 0 1 1 76 2 1 1 1 31 77 0 0 0 32 0 78 0 0 0 12 0 12 17 3 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"591 1462 LINE",
"120 1087 LINE",
"270 901 LINE",
"437 1036 LINE SMOOTH",
"466 1061 OFFCURVE",
"534 1124 OFFCURVE",
"544 1137 QCURVE",
"540 1071 OFFCURVE",
"536 897 OFFCURVE",
"536 846 QCURVE SMOOTH",
"536 0 LINE",
"845 0 LINE",
"845 1462 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"585 1462 LINE",
"83 1053 LINE",
"288 801 LINE",
"454 938 LINE SMOOTH",
"474 956 OFFCURVE",
"519 1001 OFFCURVE",
"546 1032 QCURVE",
"544 979 OFFCURVE",
"540 850 OFFCURVE",
"540 741 OFFCURVE",
"540 723 QCURVE SMOOTH",
"540 0 LINE",
"941 0 LINE",
"941 1462 LINE"
);
}
);
width = 1200;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"194 51 LINE",
"194 53 LINE",
"620 504 LINE SMOOTH",
"720 608 OFFCURVE",
"861 788 OFFCURVE",
"937 981 OFFCURVE",
"937 1104 QCURVE SMOOTH",
"937 1217 OFFCURVE",
"839 1386 OFFCURVE",
"665 1483 OFFCURVE",
"548 1483 QCURVE SMOOTH",
"460 1483 OFFCURVE",
"257 1417 OFFCURVE",
"163 1341 QCURVE",
"194 1300 LINE",
"276 1366 OFFCURVE",
"460 1432 OFFCURVE",
"548 1432 QCURVE SMOOTH",
"704 1432 OFFCURVE",
"882 1257 OFFCURVE",
"882 1104 QCURVE SMOOTH",
"882 991 OFFCURVE",
"812 811 OFFCURVE",
"679 637 OFFCURVE",
"579 532 QCURVE SMOOTH",
"120 47 LINE",
"120 0 LINE",
"1005 0 LINE",
"1005 51 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"260 106 LINE",
"260 113 LINE",
"626 487 LINE SMOOTH",
"733 594 OFFCURVE",
"886 782 OFFCURVE",
"970 979 OFFCURVE",
"970 1098 QCURVE SMOOTH",
"970 1274 OFFCURVE",
"745 1483 OFFCURVE",
"556 1483 QCURVE SMOOTH",
"442 1483 OFFCURVE",
"229 1401 OFFCURVE",
"139 1327 QCURVE",
"202 1245 LINE",
"286 1311 OFFCURVE",
"458 1380 OFFCURVE",
"556 1380 QCURVE SMOOTH",
"692 1380 OFFCURVE",
"851 1231 OFFCURVE",
"851 1094 QCURVE SMOOTH",
"851 987 OFFCURVE",
"778 815 OFFCURVE",
"634 643 OFFCURVE",
"530 535 QCURVE SMOOTH",
"110 98 LINE",
"110 0 LINE",
"1036 0 LINE",
"1036 106 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"325 172 LINE",
"630 473 LINE SMOOTH",
"743 582 OFFCURVE",
"911 778 OFFCURVE",
"1005 979 OFFCURVE",
"1005 1094 QCURVE SMOOTH",
"1005 1274 OFFCURVE",
"768 1483 OFFCURVE",
"563 1483 QCURVE SMOOTH",
"424 1483 OFFCURVE",
"200 1382 OFFCURVE",
"114 1311 QCURVE",
"211 1190 LINE",
"295 1255 OFFCURVE",
"454 1329 OFFCURVE",
"563 1329 QCURVE SMOOTH",
"678 1329 OFFCURVE",
"821 1204 OFFCURVE",
"821 1083 QCURVE SMOOTH",
"821 983 OFFCURVE",
"743 819 OFFCURVE",
"590 647 OFFCURVE",
"481 537 QCURVE SMOOTH",
"98 150 LINE",
"98 0 LINE",
"1065 0 LINE",
"1065 164 LINE",
"325 164 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\01215 14 2 3 1 3 1 0 3 2 76 0 1 1 2 97 0 2 2 37 77 4 1 3 3 0 95 0 0 0 32 0 78 0 0 0 27 0 26 37 40 17 5 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"466 260 LINE",
"466 274 LINE",
"655 451 LINE SMOOTH",
"784 569 OFFCURVE",
"966 766 OFFCURVE",
"1062 967 OFFCURVE",
"1062 1087 QCURVE SMOOTH",
"1062 1200 OFFCURVE",
"949 1378 OFFCURVE",
"743 1483 OFFCURVE",
"599 1483 QCURVE SMOOTH",
"468 1483 OFFCURVE",
"282 1423 OFFCURVE",
"138 1327 OFFCURVE",
"77 1274 QCURVE",
"245 1075 LINE",
"333 1147 OFFCURVE",
"493 1225 OFFCURVE",
"577 1225 QCURVE SMOOTH",
"659 1225 OFFCURVE",
"755 1139 OFFCURVE",
"755 1051 QCURVE SMOOTH",
"755 979 OFFCURVE",
"693 854 OFFCURVE",
"558 700 OFFCURVE",
"448 586 QCURVE SMOOTH",
"81 215 LINE",
"81 0 LINE",
"1103 0 LINE",
"1103 260 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"569 326 LINE",
"569 336 LINE",
"676 432 LINE SMOOTH",
"815 557 OFFCURVE",
"1001 758 OFFCURVE",
"1094 956 OFFCURVE",
"1094 1083 QCURVE SMOOTH",
"1094 1198 OFFCURVE",
"973 1378 OFFCURVE",
"754 1483 OFFCURVE",
"606 1483 QCURVE SMOOTH",
"461 1483 OFFCURVE",
"258 1415 OFFCURVE",
"111 1307 OFFCURVE",
"45 1249 QCURVE",
"262 995 LINE",
"352 1073 OFFCURVE",
"491 1151 OFFCURVE",
"561 1151 QCURVE SMOOTH",
"618 1151 OFFCURVE",
"702 1094 OFFCURVE",
"702 1028 QCURVE SMOOTH",
"702 975 OFFCURVE",
"651 877 OFFCURVE",
"528 737 OFFCURVE",
"418 621 QCURVE SMOOTH",
"61 260 LINE",
"61 0 LINE",
"1122 0 LINE",
"1122 326 LINE"
);
}
);
width = 1200;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"739 1483 OFFCURVE",
"559 1483 QCURVE SMOOTH",
"424 1483 OFFCURVE",
"202 1401 OFFCURVE",
"112 1331 QCURVE",
"141 1288 LINE",
"241 1360 OFFCURVE",
"444 1432 OFFCURVE",
"559 1432 QCURVE SMOOTH",
"717 1432 OFFCURVE",
"907 1282 OFFCURVE",
"907 1128 QCURVE SMOOTH",
"907 1010 OFFCURVE",
"788 858 OFFCURVE",
"598 786 OFFCURVE",
"489 786 QCURVE SMOOTH",
"319 786 LINE",
"319 735 LINE",
"489 735 LINE SMOOTH",
"626 735 OFFCURVE",
"833 668 OFFCURVE",
"952 520 OFFCURVE",
"952 397 QCURVE SMOOTH",
"952 229 OFFCURVE",
"727 31 OFFCURVE",
"506 31 QCURVE SMOOTH",
"393 31 OFFCURVE",
"172 84 OFFCURVE",
"96 123 QCURVE",
"96 66 LINE",
"174 29 OFFCURVE",
"385 -20 OFFCURVE",
"506 -20 QCURVE SMOOTH",
"751 -20 OFFCURVE",
"1007 215 OFFCURVE",
"1007 397 QCURVE SMOOTH",
"1007 561 OFFCURVE",
"821 741 OFFCURVE",
"651 764 QCURVE",
"651 768 LINE",
"784 791 OFFCURVE",
"962 983 OFFCURVE",
"962 1128 QCURVE SMOOTH",
"962 1298 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"762 1483 OFFCURVE",
"557 1483 QCURVE SMOOTH",
"416 1483 OFFCURVE",
"190 1397 OFFCURVE",
"106 1331 QCURVE",
"166 1249 LINE",
"256 1311 OFFCURVE",
"442 1380 OFFCURVE",
"559 1380 QCURVE SMOOTH",
"698 1380 OFFCURVE",
"866 1247 OFFCURVE",
"866 1118 QCURVE SMOOTH",
"866 967 OFFCURVE",
"645 809 OFFCURVE",
"475 809 QCURVE SMOOTH",
"317 809 LINE",
"317 707 LINE",
"473 707 LINE SMOOTH",
"672 707 OFFCURVE",
"909 569 OFFCURVE",
"909 410 QCURVE SMOOTH",
"909 258 OFFCURVE",
"708 80 OFFCURVE",
"500 80 QCURVE SMOOTH",
"395 80 OFFCURVE",
"178 133 OFFCURVE",
"94 174 QCURVE",
"94 61 LINE",
"178 20 OFFCURVE",
"381 -20 OFFCURVE",
"500 -20 QCURVE SMOOTH",
"766 -20 OFFCURVE",
"1032 217 OFFCURVE",
"1032 406 QCURVE SMOOTH",
"1032 559 OFFCURVE",
"852 741 OFFCURVE",
"680 762 QCURVE",
"680 770 LINE",
"815 795 OFFCURVE",
"987 979 OFFCURVE",
"987 1124 QCURVE SMOOTH",
"987 1288 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"786 1483 OFFCURVE",
"557 1483 QCURVE SMOOTH",
"409 1483 OFFCURVE",
"178 1393 OFFCURVE",
"100 1331 QCURVE",
"190 1208 LINE",
"272 1262 OFFCURVE",
"440 1331 OFFCURVE",
"559 1331 QCURVE SMOOTH",
"682 1331 OFFCURVE",
"825 1214 OFFCURVE",
"825 1108 QCURVE SMOOTH",
"825 983 OFFCURVE",
"639 831 OFFCURVE",
"459 831 QCURVE SMOOTH",
"315 831 LINE",
"315 678 LINE",
"457 678 LINE SMOOTH",
"651 678 OFFCURVE",
"866 557 OFFCURVE",
"866 420 QCURVE SMOOTH",
"866 285 OFFCURVE",
"692 131 OFFCURVE",
"495 131 QCURVE SMOOTH",
"397 131 OFFCURVE",
"184 180 OFFCURVE",
"92 227 QCURVE",
"92 59 LINE",
"182 14 OFFCURVE",
"379 -20 OFFCURVE",
"493 -20 QCURVE SMOOTH",
"688 -20 OFFCURVE",
"936 90 OFFCURVE",
"1055 287 OFFCURVE",
"1055 416 QCURVE SMOOTH",
"1055 561 OFFCURVE",
"880 741 OFFCURVE",
"706 762 QCURVE",
"706 770 LINE",
"844 799 OFFCURVE",
"1010 973 OFFCURVE",
"1010 1120 QCURVE SMOOTH",
"1010 1278 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01236 1 3 4 3 1 2 3 15 1 1 2 14 1 0 1 4 76 37 1 4 1 75 0 3 0 2 1 3 2 105 0 4 4 5 97 0 5 5 37 77 0 1 1 0 97 0 0 0 38 0 78 37 36 33 36 37 42 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"782 1483 OFFCURVE",
"556 1483 QCURVE SMOOTH",
"396 1483 OFFCURVE",
"165 1401 OFFCURVE",
"79 1339 QCURVE",
"222 1126 LINE",
"274 1159 OFFCURVE",
"429 1233 OFFCURVE",
"534 1233 QCURVE SMOOTH",
"646 1233 OFFCURVE",
"743 1145 OFFCURVE",
"743 1067 QCURVE SMOOTH",
"743 1010 OFFCURVE",
"691 922 OFFCURVE",
"550 870 OFFCURVE",
"415 870 QCURVE SMOOTH",
"302 870 LINE",
"302 633 LINE",
"413 633 LINE SMOOTH",
"550 633 OFFCURVE",
"704 590 OFFCURVE",
"765 504 OFFCURVE",
"765 444 QCURVE SMOOTH",
"765 340 OFFCURVE",
"632 225 OFFCURVE",
"466 225 QCURVE SMOOTH",
"376 225 OFFCURVE",
"171 274 OFFCURVE",
"77 322 QCURVE",
"77 59 LINE",
"261 -20 OFFCURVE",
"499 -20 QCURVE SMOOTH",
"704 -20 OFFCURVE",
"964 96 OFFCURVE",
"1089 299 OFFCURVE",
"1089 426 QCURVE SMOOTH",
"1089 569 OFFCURVE",
"904 741 OFFCURVE",
"730 764 QCURVE",
"730 770 LINE",
"863 803 OFFCURVE",
"1046 983 OFFCURVE",
"1046 1135 QCURVE SMOOTH",
"1046 1300 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"812 1483 OFFCURVE",
"587 1483 QCURVE SMOOTH",
"397 1483 OFFCURVE",
"161 1397 OFFCURVE",
"71 1335 QCURVE",
"235 1071 LINE",
"257 1085 OFFCURVE",
"343 1128 OFFCURVE",
"458 1165 OFFCURVE",
"526 1165 QCURVE SMOOTH",
"599 1165 OFFCURVE",
"690 1110 OFFCURVE",
"690 1051 QCURVE SMOOTH",
"690 983 OFFCURVE",
"556 897 OFFCURVE",
"388 897 QCURVE SMOOTH",
"296 897 LINE",
"296 600 LINE",
"386 600 LINE SMOOTH",
"511 600 OFFCURVE",
"647 561 OFFCURVE",
"698 492 OFFCURVE",
"698 442 QCURVE SMOOTH",
"698 373 OFFCURVE",
"593 291 OFFCURVE",
"448 291 QCURVE SMOOTH",
"364 291 OFFCURVE",
"163 338 OFFCURVE",
"69 387 QCURVE",
"69 59 LINE",
"163 23 OFFCURVE",
"364 -20 OFFCURVE",
"505 -20 QCURVE SMOOTH",
"716 -20 OFFCURVE",
"987 98 OFFCURVE",
"1116 299 OFFCURVE",
"1116 418 QCURVE SMOOTH",
"1116 573 OFFCURVE",
"925 741 OFFCURVE",
"749 764 QCURVE",
"749 770 LINE",
"835 795 OFFCURVE",
"982 891 OFFCURVE",
"1073 1040 OFFCURVE",
"1073 1145 QCURVE SMOOTH",
"1073 1303 OFFCURVE"
);
}
);
width = 1200;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"872 449 LINE",
"872 1470 LINE",
"815 1470 LINE",
"51 434 LINE",
"51 397 LINE",
"819 397 LINE",
"819 0 LINE",
"872 0 LINE",
"872 397 LINE",
"1147 397 LINE",
"1147 449 LINE"
);
},
{
closed = 1;
nodes = (
"686 1212 LINE SMOOTH",
"733 1276 OFFCURVE",
"782 1350 OFFCURVE",
"817 1405 QCURVE",
"821 1405 LINE",
"819 1352 OFFCURVE",
"819 1270 OFFCURVE",
"819 1161 OFFCURVE",
"819 1073 QCURVE SMOOTH",
"819 449 LINE",
"123 449 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"895 471 LINE",
"895 1470 LINE",
"774 1470 LINE",
"47 459 LINE",
"47 365 LINE",
"782 365 LINE",
"782 0 LINE",
"895 0 LINE",
"895 365 LINE",
"1139 365 LINE",
"1139 471 LINE"
);
},
{
closed = 1;
nodes = (
"672 1165 LINE SMOOTH",
"704 1212 OFFCURVE",
"754 1294 OFFCURVE",
"782 1341 QCURVE",
"786 1341 LINE",
"784 1270 OFFCURVE",
"782 1133 OFFCURVE",
"782 1014 QCURVE SMOOTH",
"782 471 LINE",
"170 471 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"680 1149 OFFCURVE",
"729 1239 OFFCURVE",
"745 1278 QCURVE",
"754 1278 LINE",
"750 1210 OFFCURVE",
"743 1061 OFFCURVE",
"743 954 QCURVE SMOOTH",
"743 494 LINE",
"219 494 LINE",
"657 1118 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"731 1470 LINE",
"43 485 LINE",
"43 332 LINE",
"743 332 LINE",
"743 0 LINE",
"917 0 LINE",
"917 332 LINE",
"1130 332 LINE",
"1130 494 LINE",
"917 494 LINE",
"917 1470 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\0125 1 0 5 18 1 2 0 2 76 1 1 0 4 1 2 3 0 2 104 0 5 5 31 77 0 3 3 32 3 78 18 17 17 17 25 16 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"960 543 LINE",
"960 1462 LINE",
"675 1462 LINE",
"34 518 LINE",
"34 303 LINE",
"659 303 LINE",
"659 0 LINE",
"960 0 LINE",
"960 303 LINE",
"1136 303 LINE",
"1136 543 LINE"
);
},
{
closed = 1;
nodes = (
"575 948 LINE SMOOTH",
"601 989 OFFCURVE",
"644 1067 OFFCURVE",
"663 1108 QCURVE",
"671 1108 LINE",
"669 1090 OFFCURVE",
"663 973 OFFCURVE",
"659 838 OFFCURVE",
"659 791 QCURVE SMOOTH",
"659 543 LINE",
"306 543 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1007 578 LINE",
"1007 1462 LINE",
"642 1462 LINE",
"34 573 LINE",
"34 283 LINE",
"618 283 LINE",
"618 0 LINE",
"1007 0 LINE",
"1007 283 LINE",
"1169 283 LINE",
"1169 578 LINE"
);
},
{
closed = 1;
nodes = (
"538 819 LINE SMOOTH",
"564 860 OFFCURVE",
"595 918 OFFCURVE",
"616 963 QCURVE",
"626 963 LINE",
"626 961 OFFCURVE",
"622 879 OFFCURVE",
"618 778 OFFCURVE",
"618 748 QCURVE SMOOTH",
"618 578 LINE",
"376 578 LINE"
);
}
);
width = 1200;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"309 844 OFFCURVE",
"257 831 QCURVE",
"309 1411 LINE",
"946 1411 LINE",
"946 1462 LINE",
"262 1462 LINE",
"200 805 LINE",
"239 774 LINE",
"315 795 OFFCURVE",
"466 821 OFFCURVE",
"561 821 QCURVE SMOOTH",
"765 821 OFFCURVE",
"978 618 OFFCURVE",
"978 444 QCURVE SMOOTH",
"978 250 OFFCURVE",
"726 31 OFFCURVE",
"518 31 QCURVE SMOOTH",
"405 31 OFFCURVE",
"221 86 OFFCURVE",
"151 127 QCURVE",
"151 66 LINE",
"217 29 OFFCURVE",
"401 -20 OFFCURVE",
"518 -20 QCURVE SMOOTH",
"671 -20 OFFCURVE",
"905 92 OFFCURVE",
"1034 299 OFFCURVE",
"1034 444 QCURVE SMOOTH",
"1034 651 OFFCURVE",
"780 872 OFFCURVE",
"561 872 QCURVE SMOOTH",
"456 872 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"342 860 OFFCURVE",
"299 852 QCURVE",
"340 1356 LINE",
"950 1356 LINE",
"950 1462 LINE",
"241 1462 LINE",
"182 788 LINE",
"245 745 LINE",
"307 762 OFFCURVE",
"454 782 OFFCURVE",
"532 782 QCURVE SMOOTH",
"731 782 OFFCURVE",
"925 606 OFFCURVE",
"925 446 QCURVE SMOOTH",
"925 268 OFFCURVE",
"700 82 OFFCURVE",
"514 82 QCURVE SMOOTH",
"409 82 OFFCURVE",
"211 135 OFFCURVE",
"139 178 QCURVE",
"139 61 LINE",
"207 25 OFFCURVE",
"397 -20 OFFCURVE",
"512 -20 QCURVE SMOOTH",
"757 -20 OFFCURVE",
"1044 233 OFFCURVE",
"1044 455 QCURVE SMOOTH",
"1044 659 OFFCURVE",
"784 885 OFFCURVE",
"561 885 QCURVE SMOOTH",
"473 885 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"373 881 OFFCURVE",
"338 874 QCURVE",
"373 1298 LINE",
"952 1298 LINE",
"952 1462 LINE",
"219 1462 LINE",
"164 772 LINE",
"254 715 LINE",
"299 725 OFFCURVE",
"446 745 OFFCURVE",
"504 745 QCURVE SMOOTH",
"694 745 OFFCURVE",
"870 592 OFFCURVE",
"870 449 QCURVE SMOOTH",
"870 287 OFFCURVE",
"672 133 OFFCURVE",
"510 133 QCURVE SMOOTH",
"414 133 OFFCURVE",
"203 184 OFFCURVE",
"129 229 QCURVE",
"129 59 LINE",
"197 20 OFFCURVE",
"393 -20 OFFCURVE",
"508 -20 QCURVE SMOOTH",
"766 -20 OFFCURVE",
"1055 240 OFFCURVE",
"1055 467 QCURVE SMOOTH",
"1055 672 OFFCURVE",
"786 897 OFFCURVE",
"563 897 QCURVE SMOOTH",
"491 897 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */\01228 23 2 3 0 22 10 2 2 3 9 1 1 2 3 76 6 1 0 0 3 2 0 3 105 0 5 5 4 95 0 4 4 31 77 0 2 2 1 97 0 1 1 38 1 78 1 0 27 26 25 24 20 18 14 12 7 5 0 30 1 30 7 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"462 920 OFFCURVE",
"428 913 QCURVE",
"454 1200 LINE",
"977 1200 LINE",
"977 1462 LINE",
"184 1462 LINE",
"129 717 LINE",
"252 651 LINE",
"293 662 OFFCURVE",
"415 684 OFFCURVE",
"473 684 QCURVE SMOOTH",
"766 684 OFFCURVE",
"766 463 QCURVE SMOOTH",
"766 344 OFFCURVE",
"620 231 OFFCURVE",
"483 231 QCURVE SMOOTH",
"389 231 OFFCURVE",
"176 287 OFFCURVE",
"100 326 QCURVE",
"100 59 LINE",
"176 20 OFFCURVE",
"379 -20 OFFCURVE",
"493 -20 QCURVE SMOOTH",
"782 -20 OFFCURVE",
"1077 252 OFFCURVE",
"1077 489 QCURVE SMOOTH",
"1077 635 OFFCURVE",
"956 831 OFFCURVE",
"747 934 OFFCURVE",
"614 934 QCURVE SMOOTH",
"542 934 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"524 946 OFFCURVE",
"491 940 QCURVE",
"510 1133 LINE",
"1007 1133 LINE",
"1007 1462 LINE",
"174 1462 LINE",
"119 690 LINE",
"264 618 LINE",
"303 631 OFFCURVE",
"409 653 OFFCURVE",
"465 653 QCURVE SMOOTH",
"586 653 OFFCURVE",
"706 557 OFFCURVE",
"706 475 QCURVE SMOOTH",
"706 385 OFFCURVE",
"588 291 OFFCURVE",
"479 291 QCURVE SMOOTH",
"389 291 OFFCURVE",
"172 348 OFFCURVE",
"94 383 QCURVE",
"94 59 LINE",
"258 -20 OFFCURVE",
"512 -20 QCURVE SMOOTH",
"811 -20 OFFCURVE",
"1106 242 OFFCURVE",
"1106 487 QCURVE SMOOTH",
"1106 639 OFFCURVE",
"987 848 OFFCURVE",
"786 958 OFFCURVE",
"663 958 QCURVE SMOOTH",
"592 958 OFFCURVE"
);
}
);
width = 1200;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"190 274 OFFCURVE",
"301 90 OFFCURVE",
"483 -20 OFFCURVE",
"612 -20 QCURVE SMOOTH",
"751 -20 OFFCURVE",
"948 102 OFFCURVE",
"1050 319 OFFCURVE",
"1050 461 QCURVE SMOOTH",
"1050 659 OFFCURVE",
"825 899 OFFCURVE",
"622 899 QCURVE SMOOTH",
"506 899 OFFCURVE",
"332 827 OFFCURVE",
"221 717 OFFCURVE",
"194 659 QCURVE",
"190 659 LINE",
"196 938 OFFCURVE",
"342 1278 OFFCURVE",
"590 1436 OFFCURVE",
"751 1436 QCURVE SMOOTH",
"813 1436 OFFCURVE",
"915 1419 OFFCURVE",
"952 1405 QCURVE",
"952 1460 LINE",
"911 1473 OFFCURVE",
"813 1487 OFFCURVE",
"751 1487 QCURVE SMOOTH",
"577 1487 OFFCURVE",
"299 1315 OFFCURVE",
"139 934 OFFCURVE",
"139 621 QCURVE SMOOTH",
"139 504 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"327 137 OFFCURVE",
"239 299 OFFCURVE",
"205 467 OFFCURVE",
"205 528 QCURVE SMOOTH",
"205 598 OFFCURVE",
"305 745 OFFCURVE",
"493 848 OFFCURVE",
"622 848 QCURVE SMOOTH",
"811 848 OFFCURVE",
"995 641 OFFCURVE",
"995 461 QCURVE SMOOTH",
"995 262 OFFCURVE",
"798 31 OFFCURVE",
"612 31 QCURVE SMOOTH",
"487 31 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"239 145 OFFCURVE",
"454 -20 OFFCURVE",
"609 -20 QCURVE SMOOTH",
"822 -20 OFFCURVE",
"1062 246 OFFCURVE",
"1062 467 QCURVE SMOOTH",
"1062 672 OFFCURVE",
"833 907 OFFCURVE",
"636 907 QCURVE SMOOTH",
"480 907 OFFCURVE",
"292 780 OFFCURVE",
"249 700 QCURVE",
"241 700 LINE",
"249 1028 OFFCURVE",
"505 1384 OFFCURVE",
"769 1384 QCURVE SMOOTH",
"822 1384 OFFCURVE",
"921 1372 OFFCURVE",
"957 1358 QCURVE",
"957 1462 LINE",
"878 1485 OFFCURVE",
"765 1485 QCURVE SMOOTH",
"540 1485 OFFCURVE",
"259 1272 OFFCURVE",
"126 885 OFFCURVE",
"126 623 QCURVE SMOOTH",
"126 434 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"370 168 OFFCURVE",
"286 303 OFFCURVE",
"249 453 OFFCURVE",
"249 516 QCURVE SMOOTH",
"249 584 OFFCURVE",
"339 721 OFFCURVE",
"505 811 OFFCURVE",
"618 811 QCURVE SMOOTH",
"781 811 OFFCURVE",
"945 627 OFFCURVE",
"945 467 QCURVE SMOOTH",
"945 279 OFFCURVE",
"765 80 OFFCURVE",
"609 80 QCURVE SMOOTH",
"507 80 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"245 119 OFFCURVE",
"470 -20 OFFCURVE",
"610 -20 QCURVE SMOOTH",
"823 -20 OFFCURVE",
"1075 242 OFFCURVE",
"1075 471 QCURVE SMOOTH",
"1075 684 OFFCURVE",
"841 915 OFFCURVE",
"651 915 QCURVE SMOOTH",
"520 915 OFFCURVE",
"352 815 OFFCURVE",
"305 743 QCURVE",
"292 743 LINE",
"298 864 OFFCURVE",
"348 1077 OFFCURVE",
"456 1241 OFFCURVE",
"644 1335 OFFCURVE",
"786 1335 QCURVE SMOOTH",
"831 1335 OFFCURVE",
"925 1323 OFFCURVE",
"962 1311 QCURVE",
"962 1464 LINE",
"929 1475 OFFCURVE",
"825 1483 OFFCURVE",
"782 1483 QCURVE SMOOTH",
"575 1483 OFFCURVE",
"313 1335 OFFCURVE",
"167 1087 OFFCURVE",
"112 782 OFFCURVE",
"112 625 QCURVE SMOOTH",
"112 406 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"364 244 OFFCURVE",
"294 418 OFFCURVE",
"294 506 QCURVE SMOOTH",
"294 569 OFFCURVE",
"374 694 OFFCURVE",
"518 774 OFFCURVE",
"614 774 QCURVE SMOOTH",
"755 774 OFFCURVE",
"896 610 OFFCURVE",
"896 471 QCURVE SMOOTH",
"896 297 OFFCURVE",
"737 131 OFFCURVE",
"608 131 QCURVE SMOOTH",
"503 131 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\0128 1 1 0 9 1 2 1 17 1 4 5 3 76 0 2 0 5 4 2 5 105 0 1 1 0 97 0 0 0 37 77 6 1 4 4 3 97 0 3 3 38 3 78 32 31 38 36 31 44 32 44 36 39 37 36 7 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"214 117 OFFCURVE",
"456 -20 OFFCURVE",
"606 -20 QCURVE SMOOTH",
"835 -20 OFFCURVE",
"1103 250 OFFCURVE",
"1103 487 QCURVE SMOOTH",
"1103 709 OFFCURVE",
"878 950 OFFCURVE",
"685 950 QCURVE SMOOTH",
"563 950 OFFCURVE",
"409 852 OFFCURVE",
"368 780 QCURVE",
"356 780 LINE",
"362 915 OFFCURVE",
"444 1122 OFFCURVE",
"642 1237 OFFCURVE",
"825 1237 QCURVE SMOOTH",
"870 1237 OFFCURVE",
"962 1225 OFFCURVE",
"1001 1217 QCURVE",
"1001 1464 LINE",
"962 1473 OFFCURVE",
"847 1479 OFFCURVE",
"804 1479 QCURVE SMOOTH",
"622 1479 OFFCURVE",
"366 1382 OFFCURVE",
"200 1212 OFFCURVE",
"108 993 OFFCURVE",
"71 745 OFFCURVE",
"71 621 QCURVE SMOOTH",
"71 401 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"427 311 OFFCURVE",
"378 442 OFFCURVE",
"378 510 QCURVE SMOOTH",
"378 559 OFFCURVE",
"436 651 OFFCURVE",
"536 713 OFFCURVE",
"606 713 QCURVE SMOOTH",
"706 713 OFFCURVE",
"804 590 OFFCURVE",
"804 483 QCURVE SMOOTH",
"804 352 OFFCURVE",
"689 227 OFFCURVE",
"599 227 QCURVE SMOOTH",
"528 227 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"214 117 OFFCURVE",
"462 -20 OFFCURVE",
"620 -20 QCURVE SMOOTH",
"860 -20 OFFCURVE",
"1136 254 OFFCURVE",
"1136 500 QCURVE SMOOTH",
"1136 727 OFFCURVE",
"919 975 OFFCURVE",
"726 975 QCURVE SMOOTH",
"610 975 OFFCURVE",
"477 877 OFFCURVE",
"438 805 QCURVE",
"425 805 LINE",
"431 922 OFFCURVE",
"507 1087 OFFCURVE",
"679 1176 OFFCURVE",
"827 1176 QCURVE SMOOTH",
"900 1176 OFFCURVE",
"1003 1165 OFFCURVE",
"1044 1157 QCURVE",
"1044 1466 LINE",
"1003 1473 OFFCURVE",
"878 1483 OFFCURVE",
"835 1483 QCURVE SMOOTH",
"640 1483 OFFCURVE",
"372 1384 OFFCURVE",
"200 1214 OFFCURVE",
"106 993 OFFCURVE",
"69 743 OFFCURVE",
"69 618 QCURVE SMOOTH",
"69 399 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"493 358 OFFCURVE",
"462 459 OFFCURVE",
"462 512 QCURVE SMOOTH",
"462 569 OFFCURVE",
"542 670 OFFCURVE",
"616 670 QCURVE SMOOTH",
"687 670 OFFCURVE",
"753 573 OFFCURVE",
"753 492 QCURVE SMOOTH",
"753 389 OFFCURVE",
"675 293 OFFCURVE",
"612 293 QCURVE SMOOTH",
"561 293 OFFCURVE"
);
}
);
width = 1200;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1044 1427 LINE",
"1044 1462 LINE",
"118 1462 LINE",
"118 1411 LINE",
"982 1411 LINE",
"374 0 LINE",
"433 0 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1056 1376 LINE",
"1056 1462 LINE",
"104 1462 LINE",
"104 1356 LINE",
"929 1356 LINE",
"327 0 LINE",
"454 0 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"90 1462 LINE",
"90 1298 LINE",
"878 1298 LINE",
"278 0 LINE",
"477 0 LINE",
"1071 1323 LINE",
"1071 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 1 1 2 1 76 0 1 1 2 95 0 2 2 31 77 0 0 0 32 0 78 17 17 17 3 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1104 1268 LINE",
"1104 1462 LINE",
"55 1462 LINE",
"55 1202 LINE",
"776 1202 LINE",
"227 0 LINE",
"551 0 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1132 1229 LINE",
"1132 1462 LINE",
"77 1462 LINE",
"77 1135 LINE",
"710 1135 LINE",
"208 0 LINE",
"618 0 LINE"
);
}
);
width = 1200;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"281 1399 OFFCURVE",
"178 1247 OFFCURVE",
"178 1145 QCURVE SMOOTH",
"178 1044 OFFCURVE",
"270 907 OFFCURVE",
"422 815 OFFCURVE",
"514 780 QCURVE",
"340 721 OFFCURVE",
"131 526 OFFCURVE",
"131 358 QCURVE SMOOTH",
"131 246 OFFCURVE",
"244 76 OFFCURVE",
"442 -20 OFFCURVE",
"571 -20 QCURVE SMOOTH",
"700 -20 OFFCURVE",
"907 72 OFFCURVE",
"1030 246 OFFCURVE",
"1030 371 QCURVE SMOOTH",
"1030 528 OFFCURVE",
"823 721 OFFCURVE",
"643 782 QCURVE",
"799 844 OFFCURVE",
"981 1014 OFFCURVE",
"981 1149 QCURVE SMOOTH",
"981 1307 OFFCURVE",
"764 1483 OFFCURVE",
"580 1483 QCURVE SMOOTH",
"463 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"926 1290 OFFCURVE",
"926 1149 QCURVE SMOOTH",
"926 1028 OFFCURVE",
"754 877 OFFCURVE",
"586 807 QCURVE",
"426 862 OFFCURVE",
"233 1014 OFFCURVE",
"233 1145 QCURVE SMOOTH",
"233 1282 OFFCURVE",
"430 1432 OFFCURVE",
"580 1432 QCURVE SMOOTH",
"741 1432 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"291 618 OFFCURVE",
"467 717 OFFCURVE",
"575 754 QCURVE",
"633 733 LINE SMOOTH",
"801 674 OFFCURVE",
"975 504 OFFCURVE",
"975 371 QCURVE SMOOTH",
"975 203 OFFCURVE",
"745 31 OFFCURVE",
"571 31 QCURVE SMOOTH",
"399 31 OFFCURVE",
"186 207 OFFCURVE",
"186 358 QCURVE SMOOTH",
"186 467 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"272 1401 OFFCURVE",
"163 1245 OFFCURVE",
"163 1139 QCURVE SMOOTH",
"163 1044 OFFCURVE",
"243 907 OFFCURVE",
"376 811 OFFCURVE",
"458 772 QCURVE",
"360 733 OFFCURVE",
"204 625 OFFCURVE",
"114 471 OFFCURVE",
"114 365 QCURVE SMOOTH",
"114 188 OFFCURVE",
"366 -20 OFFCURVE",
"581 -20 QCURVE SMOOTH",
"716 -20 OFFCURVE",
"927 74 OFFCURVE",
"1048 250 OFFCURVE",
"1048 375 QCURVE SMOOTH",
"1048 528 OFFCURVE",
"851 713 OFFCURVE",
"692 778 QCURVE",
"827 838 OFFCURVE",
"1001 1008 OFFCURVE",
"1001 1141 QCURVE SMOOTH",
"1001 1305 OFFCURVE",
"769 1483 OFFCURVE",
"581 1483 QCURVE SMOOTH",
"460 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"884 1257 OFFCURVE",
"884 1139 QCURVE SMOOTH",
"884 1022 OFFCURVE",
"726 883 OFFCURVE",
"589 825 QCURVE",
"452 877 OFFCURVE",
"278 1014 OFFCURVE",
"278 1135 QCURVE SMOOTH",
"278 1253 OFFCURVE",
"450 1384 OFFCURVE",
"581 1384 QCURVE SMOOTH",
"720 1384 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"413 666 OFFCURVE",
"565 721 QCURVE",
"610 705 LINE SMOOTH",
"763 649 OFFCURVE",
"933 492 OFFCURVE",
"933 373 QCURVE SMOOTH",
"933 233 OFFCURVE",
"741 76 OFFCURVE",
"577 76 QCURVE SMOOTH",
"413 76 OFFCURVE",
"231 236 OFFCURVE",
"231 365 QCURVE SMOOTH",
"231 504 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"262 1401 OFFCURVE",
"147 1245 OFFCURVE",
"147 1135 QCURVE SMOOTH",
"147 999 OFFCURVE",
"295 825 OFFCURVE",
"403 764 QCURVE",
"323 727 OFFCURVE",
"184 621 OFFCURVE",
"100 471 OFFCURVE",
"100 373 QCURVE SMOOTH",
"100 186 OFFCURVE",
"352 -20 OFFCURVE",
"589 -20 QCURVE SMOOTH",
"807 -20 OFFCURVE",
"1069 195 OFFCURVE",
"1069 379 QCURVE SMOOTH",
"1069 479 OFFCURVE",
"981 623 OFFCURVE",
"833 729 OFFCURVE",
"743 774 QCURVE",
"819 813 OFFCURVE",
"946 913 OFFCURVE",
"1022 1044 OFFCURVE",
"1022 1133 QCURVE SMOOTH",
"1022 1303 OFFCURVE",
"776 1483 OFFCURVE",
"583 1483 QCURVE SMOOTH",
"458 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"843 1229 OFFCURVE",
"843 1126 QCURVE SMOOTH",
"843 1016 OFFCURVE",
"698 889 OFFCURVE",
"592 844 QCURVE",
"518 877 OFFCURVE",
"395 948 OFFCURVE",
"323 1051 OFFCURVE",
"323 1126 QCURVE SMOOTH",
"323 1229 OFFCURVE",
"467 1337 OFFCURVE",
"581 1337 QCURVE SMOOTH",
"700 1337 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"417 631 OFFCURVE",
"553 690 QCURVE",
"585 678 LINE SMOOTH",
"725 625 OFFCURVE",
"893 483 OFFCURVE",
"893 377 QCURVE SMOOTH",
"893 264 OFFCURVE",
"735 123 OFFCURVE",
"585 123 QCURVE SMOOTH",
"428 123 OFFCURVE",
"276 264 OFFCURVE",
"276 371 QCURVE SMOOTH",
"276 483 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */\01251 35 21 7 4 3 2 1 76 5 1 2 2 0 97 4 1 0 0 37 77 0 3 3 1 97 0 1 1 38 1 78 29 28 1 0 45 43 28 40 29 40 15 13 0 27 1 27 6 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"247 1403 OFFCURVE",
"116 1245 OFFCURVE",
"116 1130 QCURVE SMOOTH",
"116 999 OFFCURVE",
"253 825 OFFCURVE",
"352 764 QCURVE",
"235 707 OFFCURVE",
"71 520 OFFCURVE",
"71 371 QCURVE SMOOTH",
"71 188 OFFCURVE",
"339 -20 OFFCURVE",
"585 -20 QCURVE SMOOTH",
"737 -20 OFFCURVE",
"968 78 OFFCURVE",
"1097 258 OFFCURVE",
"1097 379 QCURVE SMOOTH",
"1097 475 OFFCURVE",
"1009 623 OFFCURVE",
"868 731 OFFCURVE",
"790 772 QCURVE",
"902 827 OFFCURVE",
"1052 995 OFFCURVE",
"1052 1128 QCURVE SMOOTH",
"1052 1245 OFFCURVE",
"923 1403 OFFCURVE",
"712 1481 OFFCURVE",
"585 1481 QCURVE SMOOTH",
"462 1481 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"761 1176 OFFCURVE",
"761 1106 QCURVE SMOOTH",
"761 1026 OFFCURVE",
"655 934 OFFCURVE",
"585 901 QCURVE",
"513 936 OFFCURVE",
"407 1030 OFFCURVE",
"407 1106 QCURVE SMOOTH",
"407 1176 OFFCURVE",
"507 1255 OFFCURVE",
"583 1255 QCURVE SMOOTH",
"659 1255 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"474 592 OFFCURVE",
"571 637 QCURVE",
"597 623 LINE SMOOTH",
"646 594 OFFCURVE",
"745 526 OFFCURVE",
"810 442 OFFCURVE",
"810 387 QCURVE SMOOTH",
"810 305 OFFCURVE",
"696 207 OFFCURVE",
"581 207 QCURVE SMOOTH",
"470 207 OFFCURVE",
"358 309 OFFCURVE",
"358 389 QCURVE SMOOTH",
"358 473 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"237 1403 OFFCURVE",
"110 1245 OFFCURVE",
"110 1128 QCURVE SMOOTH",
"110 1001 OFFCURVE",
"241 825 OFFCURVE",
"333 764 QCURVE",
"219 705 OFFCURVE",
"67 537 OFFCURVE",
"67 385 QCURVE SMOOTH",
"67 205 OFFCURVE",
"321 -20 OFFCURVE",
"599 -20 QCURVE SMOOTH",
"784 -20 OFFCURVE",
"1019 86 OFFCURVE",
"1134 270 OFFCURVE",
"1134 389 QCURVE SMOOTH",
"1134 485 OFFCURVE",
"1044 627 OFFCURVE",
"909 731 OFFCURVE",
"839 770 QCURVE",
"950 823 OFFCURVE",
"1091 995 OFFCURVE",
"1091 1126 QCURVE SMOOTH",
"1091 1307 OFFCURVE",
"821 1483 OFFCURVE",
"604 1483 QCURVE SMOOTH",
"458 1483 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"720 1141 OFFCURVE",
"720 1092 QCURVE SMOOTH",
"720 1032 OFFCURVE",
"640 965 OFFCURVE",
"597 940 QCURVE",
"548 967 OFFCURVE",
"481 1044 OFFCURVE",
"481 1092 QCURVE SMOOTH",
"481 1141 OFFCURVE",
"552 1198 OFFCURVE",
"602 1198 QCURVE SMOOTH",
"649 1198 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"528 561 OFFCURVE",
"595 596 QCURVE",
"622 580 LINE SMOOTH",
"647 565 OFFCURVE",
"718 512 OFFCURVE",
"772 438 OFFCURVE",
"772 393 QCURVE SMOOTH",
"772 334 OFFCURVE",
"685 264 OFFCURVE",
"595 264 QCURVE SMOOTH",
"518 264 OFFCURVE",
"429 340 OFFCURVE",
"429 401 QCURVE SMOOTH",
"429 467 OFFCURVE"
);
}
);
width = 1200;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"974 1192 OFFCURVE",
"864 1374 OFFCURVE",
"683 1483 OFFCURVE",
"550 1483 QCURVE SMOOTH",
"411 1483 OFFCURVE",
"214 1362 OFFCURVE",
"112 1147 OFFCURVE",
"112 1006 QCURVE SMOOTH",
"112 805 OFFCURVE",
"333 563 OFFCURVE",
"536 563 QCURVE SMOOTH",
"655 563 OFFCURVE",
"829 637 OFFCURVE",
"941 750 OFFCURVE",
"968 807 QCURVE",
"972 807 LINE",
"966 530 OFFCURVE",
"819 186 OFFCURVE",
"571 27 OFFCURVE",
"411 27 QCURVE SMOOTH",
"348 27 OFFCURVE",
"227 45 OFFCURVE",
"190 59 QCURVE",
"190 2 LINE",
"231 -10 OFFCURVE",
"352 -25 OFFCURVE",
"411 -25 QCURVE SMOOTH",
"585 -25 OFFCURVE",
"864 150 OFFCURVE",
"1023 532 OFFCURVE",
"1023 846 QCURVE SMOOTH",
"1023 965 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"835 1325 OFFCURVE",
"923 1165 OFFCURVE",
"958 997 OFFCURVE",
"958 938 QCURVE SMOOTH",
"958 868 OFFCURVE",
"855 719 OFFCURVE",
"669 614 OFFCURVE",
"540 614 QCURVE SMOOTH",
"352 614 OFFCURVE",
"167 823 OFFCURVE",
"167 1006 QCURVE SMOOTH",
"167 1204 OFFCURVE",
"364 1432 OFFCURVE",
"550 1432 QCURVE SMOOTH",
"675 1432 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"933 1319 OFFCURVE",
"718 1483 OFFCURVE",
"561 1483 QCURVE SMOOTH",
"419 1483 OFFCURVE",
"217 1362 OFFCURVE",
"106 1143 OFFCURVE",
"106 997 QCURVE SMOOTH",
"106 791 OFFCURVE",
"333 555 OFFCURVE",
"528 555 QCURVE SMOOTH",
"684 555 OFFCURVE",
"876 682 OFFCURVE",
"919 762 QCURVE",
"927 762 LINE",
"917 434 OFFCURVE",
"663 76 OFFCURVE",
"401 76 QCURVE SMOOTH",
"282 76 OFFCURVE",
"200 106 QCURVE",
"200 2 LINE",
"237 -10 OFFCURVE",
"352 -23 OFFCURVE",
"401 -23 QCURVE SMOOTH",
"626 -23 OFFCURVE",
"911 190 OFFCURVE",
"1044 580 OFFCURVE",
"1044 842 QCURVE SMOOTH",
"1044 1030 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"800 1294 OFFCURVE",
"884 1159 OFFCURVE",
"921 1010 OFFCURVE",
"921 946 QCURVE SMOOTH",
"921 879 OFFCURVE",
"831 741 OFFCURVE",
"663 651 OFFCURVE",
"550 651 QCURVE SMOOTH",
"387 651 OFFCURVE",
"223 836 OFFCURVE",
"223 999 QCURVE SMOOTH",
"223 1184 OFFCURVE",
"405 1380 OFFCURVE",
"561 1380 QCURVE SMOOTH",
"663 1380 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"933 1341 OFFCURVE",
"708 1483 OFFCURVE",
"569 1483 QCURVE SMOOTH",
"428 1483 OFFCURVE",
"217 1364 OFFCURVE",
"102 1143 OFFCURVE",
"102 989 QCURVE SMOOTH",
"102 778 OFFCURVE",
"333 547 OFFCURVE",
"522 547 QCURVE SMOOTH",
"655 547 OFFCURVE",
"823 647 OFFCURVE",
"870 717 QCURVE",
"882 717 LINE",
"878 598 OFFCURVE",
"829 383 OFFCURVE",
"718 221 OFFCURVE",
"532 127 OFFCURVE",
"389 127 QCURVE SMOOTH",
"288 127 OFFCURVE",
"208 154 QCURVE",
"208 0 LINE",
"241 -10 OFFCURVE",
"352 -20 OFFCURVE",
"393 -20 QCURVE SMOOTH",
"600 -20 OFFCURVE",
"864 127 OFFCURVE",
"1009 375 OFFCURVE",
"1065 680 OFFCURVE",
"1065 838 QCURVE SMOOTH",
"1065 1057 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"813 1217 OFFCURVE",
"882 1044 OFFCURVE",
"882 956 QCURVE SMOOTH",
"882 891 OFFCURVE",
"802 768 OFFCURVE",
"659 688 OFFCURVE",
"561 688 QCURVE SMOOTH",
"417 688 OFFCURVE",
"280 850 OFFCURVE",
"280 991 QCURVE SMOOTH",
"280 1163 OFFCURVE",
"442 1331 OFFCURVE",
"569 1331 QCURVE SMOOTH",
"673 1331 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01216 1 5 4 9 1 1 2 8 1 0 1 3 76 0 5 0 2 1 5 2 105 6 1 4 4 3 97 0 3 3 37 77 0 1 1 0 97 0 0 0 38 0 78 32 31 38 36 31 44 32 44 37 39 36 36 7 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"954 1341 OFFCURVE",
"712 1479 OFFCURVE",
"563 1479 QCURVE SMOOTH",
"333 1479 OFFCURVE",
"65 1208 OFFCURVE",
"65 971 QCURVE SMOOTH",
"65 750 OFFCURVE",
"290 508 OFFCURVE",
"477 508 QCURVE SMOOTH",
"616 508 OFFCURVE",
"757 606 OFFCURVE",
"800 678 QCURVE",
"813 678 LINE",
"806 543 OFFCURVE",
"724 336 OFFCURVE",
"526 221 OFFCURVE",
"344 221 QCURVE SMOOTH",
"298 221 OFFCURVE",
"208 233 OFFCURVE",
"167 242 QCURVE",
"167 -6 LINE",
"206 -14 OFFCURVE",
"321 -20 OFFCURVE",
"364 -20 QCURVE SMOOTH",
"546 -20 OFFCURVE",
"802 76 OFFCURVE",
"968 246 OFFCURVE",
"1060 465 OFFCURVE",
"1097 713 OFFCURVE",
"1097 838 QCURVE SMOOTH",
"1097 1057 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"741 1147 OFFCURVE",
"790 1016 OFFCURVE",
"790 948 QCURVE SMOOTH",
"790 899 OFFCURVE",
"733 807 OFFCURVE",
"630 745 OFFCURVE",
"563 745 QCURVE SMOOTH",
"462 745 OFFCURVE",
"364 868 OFFCURVE",
"364 975 QCURVE SMOOTH",
"364 1106 OFFCURVE",
"479 1231 OFFCURVE",
"569 1231 QCURVE SMOOTH",
"643 1231 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"983 1343 OFFCURVE",
"733 1483 OFFCURVE",
"581 1483 QCURVE SMOOTH",
"339 1483 OFFCURVE",
"63 1208 OFFCURVE",
"63 965 QCURVE SMOOTH",
"63 735 OFFCURVE",
"282 487 OFFCURVE",
"466 487 QCURVE SMOOTH",
"591 487 OFFCURVE",
"720 584 OFFCURVE",
"761 657 QCURVE",
"774 657 LINE",
"768 549 OFFCURVE",
"694 381 OFFCURVE",
"512 287 OFFCURVE",
"348 287 QCURVE SMOOTH",
"290 287 OFFCURVE",
"204 295 OFFCURVE",
"161 303 QCURVE",
"161 -10 LINE",
"202 -16 OFFCURVE",
"321 -20 OFFCURVE",
"366 -20 QCURVE SMOOTH",
"638 -20 OFFCURVE",
"974 182 OFFCURVE",
"1130 561 OFFCURVE",
"1130 821 QCURVE SMOOTH",
"1130 1053 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"706 1102 OFFCURVE",
"737 1004 OFFCURVE",
"737 950 QCURVE SMOOTH",
"737 893 OFFCURVE",
"653 791 OFFCURVE",
"587 791 QCURVE SMOOTH",
"516 791 OFFCURVE",
"446 887 OFFCURVE",
"446 969 QCURVE SMOOTH",
"446 1073 OFFCURVE",
"522 1167 OFFCURVE",
"591 1167 QCURVE SMOOTH",
"643 1167 OFFCURVE"
);
}
);
width = 1200;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = colon;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"194 963 OFFCURVE",
"225 963 QCURVE SMOOTH",
"262 963 OFFCURVE",
"280 999 OFFCURVE",
"280 1026 QCURVE SMOOTH",
"280 1051 OFFCURVE",
"262 1090 OFFCURVE",
"225 1090 QCURVE SMOOTH",
"194 1090 OFFCURVE",
"174 1051 OFFCURVE",
"174 1026 QCURVE SMOOTH",
"174 999 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"194 -16 OFFCURVE",
"225 -16 QCURVE SMOOTH",
"262 -16 OFFCURVE",
"280 20 OFFCURVE",
"280 47 QCURVE SMOOTH",
"280 72 OFFCURVE",
"262 111 OFFCURVE",
"225 111 QCURVE SMOOTH",
"194 111 OFFCURVE",
"174 72 OFFCURVE",
"174 47 QCURVE SMOOTH",
"174 20 OFFCURVE"
);
}
);
width = 450;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"249 905 QCURVE SMOOTH",
"339 905 OFFCURVE",
"339 1008 QCURVE SMOOTH",
"339 1108 OFFCURVE",
"249 1108 QCURVE SMOOTH",
"159 1108 OFFCURVE",
"159 1008 QCURVE SMOOTH",
"159 905 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"249 -23 QCURVE SMOOTH",
"339 -23 OFFCURVE",
"339 78 QCURVE SMOOTH",
"339 178 OFFCURVE",
"249 178 QCURVE SMOOTH",
"159 178 OFFCURVE",
"159 78 QCURVE SMOOTH",
"159 -23 OFFCURVE"
);
}
);
width = 499;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"221 848 OFFCURVE",
"272 848 QCURVE SMOOTH",
"323 848 OFFCURVE",
"401 913 OFFCURVE",
"401 987 QCURVE SMOOTH",
"401 1065 OFFCURVE",
"323 1126 OFFCURVE",
"272 1126 QCURVE SMOOTH",
"221 1126 OFFCURVE",
"147 1065 OFFCURVE",
"147 987 QCURVE SMOOTH",
"147 913 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"221 -29 OFFCURVE",
"272 -29 QCURVE SMOOTH",
"323 -29 OFFCURVE",
"401 37 OFFCURVE",
"401 111 QCURVE SMOOTH",
"401 186 OFFCURVE",
"323 248 OFFCURVE",
"272 248 QCURVE SMOOTH",
"221 248 OFFCURVE",
"147 186 OFFCURVE",
"147 111 QCURVE SMOOTH",
"147 37 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 1 1 0 97 0 0 0 40 77 0 2 2 3 97 0 3 3 38 3 78 36 36 36 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 548;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"218 799 OFFCURVE",
"292 799 QCURVE SMOOTH",
"364 799 OFFCURVE",
"466 879 OFFCURVE",
"466 969 QCURVE SMOOTH",
"466 1063 OFFCURVE",
"364 1139 OFFCURVE",
"292 1139 QCURVE SMOOTH",
"218 1139 OFFCURVE",
"116 1063 OFFCURVE",
"116 969 QCURVE SMOOTH",
"116 879 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"218 -27 OFFCURVE",
"292 -27 QCURVE SMOOTH",
"364 -27 OFFCURVE",
"466 53 OFFCURVE",
"466 143 QCURVE SMOOTH",
"466 238 OFFCURVE",
"364 313 OFFCURVE",
"292 313 QCURVE SMOOTH",
"218 313 OFFCURVE",
"116 238 OFFCURVE",
"116 143 QCURVE SMOOTH",
"116 53 OFFCURVE"
);
}
);
width = 583;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"211 764 OFFCURVE",
"299 764 QCURVE SMOOTH",
"381 764 OFFCURVE",
"504 854 OFFCURVE",
"504 956 QCURVE SMOOTH",
"504 1061 OFFCURVE",
"381 1147 OFFCURVE",
"299 1147 QCURVE SMOOTH",
"211 1147 OFFCURVE",
"86 1061 OFFCURVE",
"86 956 QCURVE SMOOTH",
"86 854 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"211 -25 OFFCURVE",
"299 -25 QCURVE SMOOTH",
"381 -25 OFFCURVE",
"504 66 OFFCURVE",
"504 166 QCURVE SMOOTH",
"504 272 OFFCURVE",
"381 358 OFFCURVE",
"299 358 QCURVE SMOOTH",
"211 358 OFFCURVE",
"86 272 OFFCURVE",
"86 166 QCURVE SMOOTH",
"86 66 OFFCURVE"
);
}
);
width = 591;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"194 963 OFFCURVE",
"224 963 QCURVE SMOOTH",
"261 963 OFFCURVE",
"280 999 OFFCURVE",
"280 1026 QCURVE SMOOTH",
"280 1051 OFFCURVE",
"261 1090 OFFCURVE",
"224 1090 QCURVE SMOOTH",
"194 1090 OFFCURVE",
"173 1051 OFFCURVE",
"173 1026 QCURVE SMOOTH",
"173 999 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"175 121 OFFCURVE",
"122 -115 OFFCURVE",
"77 -264 QCURVE",
"122 -264 LINE",
"165 -158 OFFCURVE",
"233 98 OFFCURVE",
"255 213 QCURVE",
"249 238 LINE",
"192 238 LINE"
);
}
);
width = 450;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"245 905 QCURVE SMOOTH",
"339 905 OFFCURVE",
"339 1008 QCURVE SMOOTH",
"339 1108 OFFCURVE",
"245 1108 QCURVE SMOOTH",
"159 1108 OFFCURVE",
"159 1008 QCURVE SMOOTH",
"159 905 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"163 125 OFFCURVE",
"106 -131 OFFCURVE",
"69 -264 QCURVE",
"159 -264 LINE",
"204 -156 OFFCURVE",
"290 102 OFFCURVE",
"315 213 QCURVE",
"305 238 LINE",
"180 238 LINE"
);
}
);
width = 499;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"217 848 OFFCURVE",
"268 848 QCURVE SMOOTH",
"321 848 OFFCURVE",
"397 913 OFFCURVE",
"397 987 QCURVE SMOOTH",
"397 1065 OFFCURVE",
"321 1126 OFFCURVE",
"268 1126 QCURVE SMOOTH",
"217 1126 OFFCURVE",
"143 1065 OFFCURVE",
"143 987 QCURVE SMOOTH",
"143 913 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"122 -8 OFFCURVE",
"81 -188 OFFCURVE",
"63 -264 QCURVE",
"198 -264 LINE",
"247 -156 OFFCURVE",
"348 106 OFFCURVE",
"374 215 QCURVE",
"360 238 LINE",
"167 238 LINE",
"157 166 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0120 2 0 3 2 3 99 0 1 1 0 97 0 0 0 40 1 78 20 18 36 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 548;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"219 799 OFFCURVE",
"292 799 QCURVE SMOOTH",
"364 799 OFFCURVE",
"466 879 OFFCURVE",
"466 969 QCURVE SMOOTH",
"466 1063 OFFCURVE",
"364 1139 OFFCURVE",
"292 1139 QCURVE SMOOTH",
"219 1139 OFFCURVE",
"116 1063 OFFCURVE",
"116 969 QCURVE SMOOTH",
"116 879 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"147 131 OFFCURVE",
"92 -143 OFFCURVE",
"63 -264 QCURVE",
"282 -264 LINE",
"333 -152 OFFCURVE",
"430 106 OFFCURVE",
"458 215 QCURVE",
"444 238 LINE",
"163 238 LINE"
);
}
);
width = 583;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"215 764 OFFCURVE",
"303 764 QCURVE SMOOTH",
"385 764 OFFCURVE",
"510 854 OFFCURVE",
"510 956 QCURVE SMOOTH",
"510 1061 OFFCURVE",
"385 1147 OFFCURVE",
"303 1147 QCURVE SMOOTH",
"215 1147 OFFCURVE",
"92 1061 OFFCURVE",
"92 956 QCURVE SMOOTH",
"92 854 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"147 217 OFFCURVE",
"114 16 OFFCURVE",
"77 -193 OFFCURVE",
"57 -285 QCURVE",
"336 -285 LINE",
"368 -209 OFFCURVE",
"436 -2 OFFCURVE",
"493 203 OFFCURVE",
"512 276 QCURVE",
"497 299 LINE",
"155 299 LINE"
);
}
);
width = 608;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = less;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"186 741 LINE",
"1052 1147 LINE",
"1052 1200 LINE",
"114 760 LINE",
"114 723 LINE",
"1052 283 LINE",
"1052 336 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"239 731 LINE",
"1060 1116 LINE",
"1060 1223 LINE",
"108 762 LINE",
"108 692 LINE",
"1060 260 LINE",
"1060 367 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1067 1245 LINE",
"102 764 LINE",
"102 662 LINE",
"1067 238 LINE",
"1067 397 LINE",
"295 721 LINE",
"1067 1085 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 2 1 50 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"397 723 LINE",
"1081 1040 LINE",
"1081 1280 LINE",
"88 784 LINE",
"88 641 LINE",
"1081 203 LINE",
"1081 442 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"483 725 LINE",
"1104 1008 LINE",
"1104 1305 LINE",
"92 799 LINE",
"92 627 LINE",
"1104 178 LINE",
"1104 473 LINE"
);
}
);
width = 1200;
}
);
note = less;
unicode = 003C;
},
{
glyphname = equal;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1054 956 LINE",
"112 956 LINE",
"112 907 LINE",
"1054 907 LINE"
);
},
{
closed = 1;
nodes = (
"1054 539 LINE",
"112 539 LINE",
"112 489 LINE",
"1054 489 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1052 977 LINE",
"114 977 LINE",
"114 881 LINE",
"1052 881 LINE"
);
},
{
closed = 1;
nodes = (
"1052 565 LINE",
"114 565 LINE",
"114 467 LINE",
"1052 467 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"114 852 LINE",
"1052 852 LINE",
"1052 997 LINE",
"114 997 LINE"
);
},
{
closed = 1;
nodes = (
"114 444 LINE",
"1052 444 LINE",
"1052 590 LINE",
"114 590 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0124 1 1 0 0 3 1 0 103 5 1 3 2 2 3 87 5 1 3 3 2 95 0 2 3 2 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1081 1024 LINE",
"88 1024 LINE",
"88 807 LINE",
"1081 807 LINE"
);
},
{
closed = 1;
nodes = (
"1081 637 LINE",
"88 637 LINE",
"88 418 LINE",
"1081 418 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1108 1083 LINE",
"92 1083 LINE",
"92 815 LINE",
"1108 815 LINE"
);
},
{
closed = 1;
nodes = (
"1108 629 LINE",
"92 629 LINE",
"92 358 LINE",
"1108 358 LINE"
);
}
);
width = 1200;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = greater;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1052 723 LINE",
"1052 760 LINE",
"114 1200 LINE",
"114 1147 LINE",
"980 741 LINE",
"114 336 LINE",
"114 283 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1060 692 LINE",
"1060 762 LINE",
"108 1223 LINE",
"108 1116 LINE",
"927 729 LINE",
"108 367 LINE",
"108 260 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"102 1245 LINE",
"102 1085 LINE",
"874 719 LINE",
"102 397 LINE",
"102 238 LINE",
"1067 662 LINE",
"1067 764 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0125 1 1 50 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1081 641 LINE",
"1081 784 LINE",
"88 1280 LINE",
"88 1040 LINE",
"772 723 LINE",
"88 442 LINE",
"88 203 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1104 627 LINE",
"1104 799 LINE",
"92 1305 LINE",
"92 1008 LINE",
"713 725 LINE",
"92 473 LINE",
"92 178 LINE"
);
}
);
width = 1200;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = question;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"345 381 LINE SMOOTH",
"345 520 OFFCURVE",
"415 662 OFFCURVE",
"495 717 QCURVE SMOOTH",
"577 774 OFFCURVE",
"698 887 OFFCURVE",
"765 1032 OFFCURVE",
"765 1135 QCURVE SMOOTH",
"765 1311 OFFCURVE",
"556 1483 OFFCURVE",
"384 1483 QCURVE SMOOTH",
"302 1483 OFFCURVE",
"167 1452 OFFCURVE",
"77 1415 QCURVE",
"97 1362 LINE",
"171 1399 OFFCURVE",
"308 1432 OFFCURVE",
"384 1432 QCURVE SMOOTH",
"528 1432 OFFCURVE",
"710 1288 OFFCURVE",
"710 1135 QCURVE SMOOTH",
"710 1040 OFFCURVE",
"650 913 OFFCURVE",
"542 811 OFFCURVE",
"468 760 QCURVE SMOOTH",
"396 709 OFFCURVE",
"323 612 OFFCURVE",
"294 483 OFFCURVE",
"294 381 QCURVE SMOOTH",
"294 356 LINE",
"345 356 LINE"
);
},
{
closed = 1;
nodes = (
"292 -16 OFFCURVE",
"323 -16 QCURVE SMOOTH",
"360 -16 OFFCURVE",
"378 20 OFFCURVE",
"378 47 QCURVE SMOOTH",
"378 72 OFFCURVE",
"360 111 OFFCURVE",
"323 111 QCURVE SMOOTH",
"292 111 OFFCURVE",
"272 72 OFFCURVE",
"272 47 QCURVE SMOOTH",
"272 20 OFFCURVE"
);
}
);
width = 845;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"389 414 LINE SMOOTH",
"389 489 OFFCURVE",
"416 594 OFFCURVE",
"483 678 OFFCURVE",
"545 725 QCURVE SMOOTH",
"622 784 OFFCURVE",
"737 895 OFFCURVE",
"801 1032 OFFCURVE",
"801 1130 QCURVE SMOOTH",
"801 1298 OFFCURVE",
"590 1483 OFFCURVE",
"405 1483 QCURVE SMOOTH",
"303 1483 OFFCURVE",
"137 1438 OFFCURVE",
"51 1399 QCURVE",
"94 1300 LINE",
"164 1335 OFFCURVE",
"311 1378 OFFCURVE",
"401 1378 QCURVE SMOOTH",
"532 1378 OFFCURVE",
"688 1253 OFFCURVE",
"688 1126 QCURVE SMOOTH",
"688 1049 OFFCURVE",
"639 942 OFFCURVE",
"540 846 OFFCURVE",
"463 786 QCURVE SMOOTH",
"395 733 OFFCURVE",
"319 635 OFFCURVE",
"291 512 OFFCURVE",
"291 424 QCURVE SMOOTH",
"291 385 LINE",
"389 385 LINE"
);
},
{
closed = 1;
nodes = (
"344 -23 QCURVE SMOOTH",
"434 -23 OFFCURVE",
"434 78 QCURVE SMOOTH",
"434 178 OFFCURVE",
"344 178 QCURVE SMOOTH",
"256 178 OFFCURVE",
"256 78 QCURVE SMOOTH",
"256 -23 OFFCURVE"
);
}
);
width = 868;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"430 504 OFFCURVE",
"454 590 OFFCURVE",
"524 676 OFFCURVE",
"593 733 QCURVE SMOOTH",
"667 795 OFFCURVE",
"776 903 OFFCURVE",
"835 1032 OFFCURVE",
"835 1124 QCURVE SMOOTH",
"835 1290 OFFCURVE",
"622 1483 OFFCURVE",
"427 1483 QCURVE SMOOTH",
"305 1483 OFFCURVE",
"106 1425 OFFCURVE",
"24 1382 QCURVE",
"87 1239 LINE",
"159 1274 OFFCURVE",
"315 1325 OFFCURVE",
"415 1325 QCURVE SMOOTH",
"536 1325 OFFCURVE",
"663 1219 OFFCURVE",
"663 1120 QCURVE SMOOTH",
"663 1059 OFFCURVE",
"626 973 OFFCURVE",
"536 881 OFFCURVE",
"458 815 QCURVE SMOOTH",
"393 758 OFFCURVE",
"317 657 OFFCURVE",
"286 545 OFFCURVE",
"286 467 QCURVE SMOOTH",
"286 412 LINE",
"430 412 LINE",
"430 446 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"311 -29 OFFCURVE",
"366 -29 QCURVE SMOOTH",
"417 -29 OFFCURVE",
"491 37 OFFCURVE",
"491 111 QCURVE SMOOTH",
"491 186 OFFCURVE",
"417 248 OFFCURVE",
"366 248 QCURVE SMOOTH",
"311 248 OFFCURVE",
"239 186 OFFCURVE",
"239 111 QCURVE SMOOTH",
"239 37 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\01217 1 1 2 16 1 0 1 2 76 0 0 1 3 1 0 3 128 0 1 1 2 97 0 2 2 37 77 0 3 3 4 97 0 4 4 38 4 78 36 45 37 43 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 888;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"541 545 LINE SMOOTH",
"541 586 OFFCURVE",
"563 645 OFFCURVE",
"627 705 OFFCURVE",
"688 750 QCURVE SMOOTH",
"768 807 OFFCURVE",
"874 913 OFFCURVE",
"928 1036 OFFCURVE",
"928 1120 QCURVE SMOOTH",
"928 1278 OFFCURVE",
"692 1483 OFFCURVE",
"479 1483 QCURVE SMOOTH",
"340 1483 OFFCURVE",
"106 1413 OFFCURVE",
"6 1358 QCURVE",
"115 1139 LINE",
"203 1184 OFFCURVE",
"371 1237 OFFCURVE",
"457 1237 QCURVE SMOOTH",
"543 1237 OFFCURVE",
"639 1167 OFFCURVE",
"639 1104 QCURVE SMOOTH",
"639 1038 OFFCURVE",
"559 942 OFFCURVE",
"467 877 QCURVE SMOOTH",
"362 801 OFFCURVE",
"276 659 OFFCURVE",
"276 559 QCURVE SMOOTH",
"276 485 LINE",
"541 485 LINE"
);
},
{
closed = 1;
nodes = (
"346 -27 OFFCURVE",
"420 -27 QCURVE SMOOTH",
"491 -27 OFFCURVE",
"594 53 OFFCURVE",
"594 143 QCURVE SMOOTH",
"594 238 OFFCURVE",
"491 313 OFFCURVE",
"420 313 QCURVE SMOOTH",
"346 313 OFFCURVE",
"244 238 OFFCURVE",
"244 143 QCURVE SMOOTH",
"244 53 OFFCURVE"
);
}
);
width = 976;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"602 567 LINE SMOOTH",
"602 614 OFFCURVE",
"670 684 OFFCURVE",
"760 741 QCURVE SMOOTH",
"887 823 OFFCURVE",
"997 999 OFFCURVE",
"997 1118 QCURVE SMOOTH",
"997 1282 OFFCURVE",
"748 1483 OFFCURVE",
"520 1483 QCURVE SMOOTH",
"369 1483 OFFCURVE",
"113 1405 OFFCURVE",
"0 1341 QCURVE",
"139 1069 LINE",
"342 1176 OFFCURVE",
"492 1176 QCURVE SMOOTH",
"553 1176 OFFCURVE",
"629 1126 OFFCURVE",
"629 1085 QCURVE SMOOTH",
"629 1057 OFFCURVE",
"610 1006 OFFCURVE",
"545 942 OFFCURVE",
"477 899 QCURVE SMOOTH",
"369 831 OFFCURVE",
"295 694 OFFCURVE",
"295 602 QCURVE SMOOTH",
"295 516 LINE",
"602 516 LINE"
);
},
{
closed = 1;
nodes = (
"375 -25 OFFCURVE",
"463 -25 QCURVE SMOOTH",
"547 -25 OFFCURVE",
"670 66 OFFCURVE",
"670 166 QCURVE SMOOTH",
"670 272 OFFCURVE",
"547 358 OFFCURVE",
"463 358 QCURVE SMOOTH",
"375 358 OFFCURVE",
"252 272 OFFCURVE",
"252 166 QCURVE SMOOTH",
"252 66 OFFCURVE"
);
}
);
width = 1034;
}
);
note = question;
unicode = 003F;
},
{
glyphname = at;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1513 1268 OFFCURVE",
"1183 1446 OFFCURVE",
"956 1446 QCURVE SMOOTH",
"704 1446 OFFCURVE",
"321 1245 OFFCURVE",
"106 860 OFFCURVE",
"106 582 QCURVE SMOOTH",
"106 340 OFFCURVE",
"286 -12 OFFCURVE",
"618 -205 OFFCURVE",
"847 -205 QCURVE SMOOTH",
"964 -205 OFFCURVE",
"1171 -164 OFFCURVE",
"1261 -127 QCURVE",
"1261 -70 LINE",
"1163 -111 OFFCURVE",
"950 -154 OFFCURVE",
"847 -154 QCURVE SMOOTH",
"632 -154 OFFCURVE",
"325 25 OFFCURVE",
"161 354 OFFCURVE",
"161 582 QCURVE SMOOTH",
"161 844 OFFCURVE",
"364 1206 OFFCURVE",
"724 1395 OFFCURVE",
"956 1395 QCURVE SMOOTH",
"1177 1395 OFFCURVE",
"1480 1225 OFFCURVE",
"1636 922 OFFCURVE",
"1636 719 QCURVE SMOOTH",
"1636 588 OFFCURVE",
"1581 385 OFFCURVE",
"1462 270 OFFCURVE",
"1372 270 QCURVE SMOOTH",
"1277 270 OFFCURVE",
"1202 393 OFFCURVE",
"1202 504 QCURVE SMOOTH",
"1202 557 OFFCURVE",
"1208 662 OFFCURVE",
"1210 698 QCURVE SMOOTH",
"1224 995 LINE",
"1167 1016 OFFCURVE",
"1036 1036 OFFCURVE",
"962 1036 QCURVE SMOOTH",
"833 1036 OFFCURVE",
"638 918 OFFCURVE",
"528 713 OFFCURVE",
"528 582 QCURVE SMOOTH",
"528 406 OFFCURVE",
"692 219 OFFCURVE",
"841 219 QCURVE SMOOTH",
"940 219 OFFCURVE",
"1112 319 OFFCURVE",
"1159 434 QCURVE",
"1163 330 OFFCURVE",
"1280 219 OFFCURVE",
"1372 219 QCURVE SMOOTH",
"1480 219 OFFCURVE",
"1622 352 OFFCURVE",
"1691 578 OFFCURVE",
"1691 719 QCURVE SMOOTH",
"1691 942 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"794 985 OFFCURVE",
"962 985 QCURVE SMOOTH",
"1081 985 OFFCURVE",
"1171 954 QCURVE",
"1155 647 LINE SMOOTH",
"1144 453 OFFCURVE",
"985 270 OFFCURVE",
"841 270 QCURVE SMOOTH",
"710 270 OFFCURVE",
"583 434 OFFCURVE",
"583 582 QCURVE SMOOTH",
"583 768 OFFCURVE"
);
}
);
width = 1798;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1523 1278 OFFCURVE",
"1191 1454 OFFCURVE",
"970 1454 QCURVE SMOOTH",
"710 1454 OFFCURVE",
"325 1237 OFFCURVE",
"112 844 OFFCURVE",
"112 578 QCURVE SMOOTH",
"112 338 OFFCURVE",
"294 -8 OFFCURVE",
"632 -193 OFFCURVE",
"868 -193 QCURVE SMOOTH",
"991 -193 OFFCURVE",
"1204 -150 OFFCURVE",
"1294 -113 QCURVE",
"1294 -14 LINE",
"1202 -53 OFFCURVE",
"982 -100 OFFCURVE",
"868 -100 QCURVE SMOOTH",
"554 -100 OFFCURVE",
"212 258 OFFCURVE",
"212 582 QCURVE SMOOTH",
"212 819 OFFCURVE",
"397 1169 OFFCURVE",
"737 1360 OFFCURVE",
"970 1360 QCURVE SMOOTH",
"1167 1360 OFFCURVE",
"1451 1206 OFFCURVE",
"1607 922 OFFCURVE",
"1607 725 QCURVE SMOOTH",
"1607 606 OFFCURVE",
"1556 420 OFFCURVE",
"1453 311 OFFCURVE",
"1376 311 QCURVE SMOOTH",
"1304 311 OFFCURVE",
"1228 406 OFFCURVE",
"1228 516 QCURVE SMOOTH",
"1228 545 OFFCURVE",
"1230 612 OFFCURVE",
"1232 649 QCURVE SMOOTH",
"1249 1006 LINE",
"1195 1026 OFFCURVE",
"1044 1051 OFFCURVE",
"962 1051 QCURVE SMOOTH",
"831 1051 OFFCURVE",
"636 932 OFFCURVE",
"528 725 OFFCURVE",
"528 594 QCURVE SMOOTH",
"528 418 OFFCURVE",
"694 221 OFFCURVE",
"847 221 QCURVE SMOOTH",
"1062 221 OFFCURVE",
"1150 418 QCURVE",
"1154 418 LINE",
"1163 330 OFFCURVE",
"1275 221 OFFCURVE",
"1369 221 QCURVE SMOOTH",
"1482 221 OFFCURVE",
"1634 362 OFFCURVE",
"1707 592 OFFCURVE",
"1707 725 QCURVE SMOOTH",
"1707 950 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"710 862 OFFCURVE",
"855 961 OFFCURVE",
"962 961 QCURVE SMOOTH",
"1015 961 OFFCURVE",
"1107 946 OFFCURVE",
"1142 934 QCURVE",
"1130 653 LINE SMOOTH",
"1122 487 OFFCURVE",
"989 311 OFFCURVE",
"860 311 QCURVE SMOOTH",
"751 311 OFFCURVE",
"634 451 OFFCURVE",
"634 590 QCURVE SMOOTH",
"634 694 OFFCURVE"
);
}
);
width = 1818;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1531 1286 OFFCURVE",
"1199 1462 OFFCURVE",
"986 1462 QCURVE SMOOTH",
"784 1462 OFFCURVE",
"462 1329 OFFCURVE",
"237 1090 OFFCURVE",
"118 764 OFFCURVE",
"118 573 QCURVE SMOOTH",
"118 336 OFFCURVE",
"300 -2 OFFCURVE",
"644 -182 OFFCURVE",
"886 -182 QCURVE SMOOTH",
"1019 -182 OFFCURVE",
"1238 -135 OFFCURVE",
"1326 -98 QCURVE",
"1326 41 LINE",
"1238 8 OFFCURVE",
"1011 -47 OFFCURVE",
"886 -47 QCURVE SMOOTH",
"585 -47 OFFCURVE",
"265 276 OFFCURVE",
"265 580 QCURVE SMOOTH",
"265 797 OFFCURVE",
"431 1135 OFFCURVE",
"753 1327 OFFCURVE",
"986 1327 QCURVE SMOOTH",
"1156 1327 OFFCURVE",
"1425 1188 OFFCURVE",
"1578 922 OFFCURVE",
"1578 733 QCURVE SMOOTH",
"1578 627 OFFCURVE",
"1531 455 OFFCURVE",
"1443 350 OFFCURVE",
"1380 350 QCURVE SMOOTH",
"1328 350 OFFCURVE",
"1253 418 OFFCURVE",
"1253 526 QCURVE SMOOTH",
"1253 532 OFFCURVE",
"1253 563 OFFCURVE",
"1255 600 QCURVE SMOOTH",
"1275 1016 LINE",
"1226 1034 OFFCURVE",
"1052 1065 OFFCURVE",
"962 1065 QCURVE SMOOTH",
"829 1065 OFFCURVE",
"634 946 OFFCURVE",
"528 737 OFFCURVE",
"528 604 QCURVE SMOOTH",
"528 432 OFFCURVE",
"696 223 OFFCURVE",
"853 223 QCURVE SMOOTH",
"962 223 OFFCURVE",
"1105 326 OFFCURVE",
"1142 401 QCURVE",
"1152 401 LINE",
"1165 332 OFFCURVE",
"1273 223 OFFCURVE",
"1367 223 QCURVE SMOOTH",
"1457 223 OFFCURVE",
"1588 311 OFFCURVE",
"1679 457 OFFCURVE",
"1722 637 OFFCURVE",
"1722 731 QCURVE SMOOTH",
"1722 958 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"741 838 OFFCURVE",
"863 936 OFFCURVE",
"964 936 QCURVE SMOOTH",
"1007 936 OFFCURVE",
"1089 924 OFFCURVE",
"1115 915 QCURVE",
"1103 659 LINE SMOOTH",
"1095 522 OFFCURVE",
"995 350 OFFCURVE",
"880 350 QCURVE SMOOTH",
"790 350 OFFCURVE",
"687 467 OFFCURVE",
"687 600 QCURVE SMOOTH",
"687 684 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01222 1 9 2 71 8 2 3 9 47 1 5 0 48 1 6 5 4 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0128 1 3 1 1 0 5 3 0 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 31 77 0 9 9 2 97 0 2 2 34 9 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 0 9 3 2 9 105 8 1 3 1 1 0 5 3 0 105 0 5 0 6 5 6 101 0 4 4 7 97 0 7 7 31 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01275 73 37 39 37 37 38 40 37 37 36 10 8 31 \012CALL[ ]	/* CallFunction */";
};
width = 1841;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1540 1286 OFFCURVE",
"1200 1462 OFFCURVE",
"981 1462 QCURVE SMOOTH",
"780 1462 OFFCURVE",
"454 1329 OFFCURVE",
"225 1090 OFFCURVE",
"102 770 OFFCURVE",
"102 584 QCURVE SMOOTH",
"102 346 OFFCURVE",
"292 8 OFFCURVE",
"653 -172 OFFCURVE",
"907 -172 QCURVE SMOOTH",
"1042 -172 OFFCURVE",
"1284 -123 OFFCURVE",
"1382 -82 QCURVE",
"1382 111 LINE",
"1273 70 OFFCURVE",
"1017 18 OFFCURVE",
"899 18 QCURVE SMOOTH",
"618 18 OFFCURVE",
"323 313 OFFCURVE",
"323 590 QCURVE SMOOTH",
"323 786 OFFCURVE",
"475 1096 OFFCURVE",
"768 1274 OFFCURVE",
"983 1274 QCURVE SMOOTH",
"1134 1274 OFFCURVE",
"1376 1147 OFFCURVE",
"1515 905 OFFCURVE",
"1515 735 QCURVE SMOOTH",
"1515 643 OFFCURVE",
"1484 489 OFFCURVE",
"1421 397 OFFCURVE",
"1376 397 QCURVE SMOOTH",
"1347 397 OFFCURVE",
"1300 453 OFFCURVE",
"1300 537 QCURVE SMOOTH",
"1300 543 OFFCURVE",
"1300 586 OFFCURVE",
"1302 606 QCURVE SMOOTH",
"1323 1026 LINE",
"1265 1047 OFFCURVE",
"1058 1081 OFFCURVE",
"962 1081 QCURVE SMOOTH",
"815 1081 OFFCURVE",
"598 961 OFFCURVE",
"479 750 OFFCURVE",
"479 612 QCURVE SMOOTH",
"479 434 OFFCURVE",
"677 215 OFFCURVE",
"860 215 QCURVE SMOOTH",
"956 215 OFFCURVE",
"1093 293 OFFCURVE",
"1134 344 QCURVE",
"1151 344 LINE",
"1173 287 OFFCURVE",
"1288 215 OFFCURVE",
"1364 215 QCURVE SMOOTH",
"1458 215 OFFCURVE",
"1597 303 OFFCURVE",
"1689 455 OFFCURVE",
"1734 639 OFFCURVE",
"1734 733 QCURVE SMOOTH",
"1734 958 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"761 815 OFFCURVE",
"876 899 OFFCURVE",
"974 899 QCURVE SMOOTH",
"1007 899 OFFCURVE",
"1067 893 OFFCURVE",
"1089 889 QCURVE",
"1077 668 LINE SMOOTH",
"1069 547 OFFCURVE",
"985 397 OFFCURVE",
"882 397 QCURVE SMOOTH",
"804 397 OFFCURVE",
"710 496 OFFCURVE",
"710 608 QCURVE SMOOTH",
"710 680 OFFCURVE"
);
}
);
width = 1837;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1558 1305 OFFCURVE",
"1203 1481 OFFCURVE",
"968 1481 QCURVE SMOOTH",
"765 1481 OFFCURVE",
"437 1348 OFFCURVE",
"206 1112 OFFCURVE",
"81 795 OFFCURVE",
"81 610 QCURVE SMOOTH",
"81 373 OFFCURVE",
"278 31 OFFCURVE",
"650 -154 OFFCURVE",
"912 -154 QCURVE SMOOTH",
"1050 -154 OFFCURVE",
"1306 -104 OFFCURVE",
"1412 -59 QCURVE",
"1412 170 LINE",
"1289 125 OFFCURVE",
"1011 74 OFFCURVE",
"898 74 QCURVE SMOOTH",
"626 74 OFFCURVE",
"353 365 OFFCURVE",
"353 606 QCURVE SMOOTH",
"353 795 OFFCURVE",
"493 1090 OFFCURVE",
"769 1257 OFFCURVE",
"972 1257 QCURVE SMOOTH",
"1230 1257 OFFCURVE",
"1490 987 OFFCURVE",
"1490 758 QCURVE SMOOTH",
"1490 676 OFFCURVE",
"1461 535 OFFCURVE",
"1410 451 OFFCURVE",
"1373 451 QCURVE SMOOTH",
"1351 451 OFFCURVE",
"1324 489 OFFCURVE",
"1324 537 QCURVE SMOOTH",
"1324 565 OFFCURVE",
"1326 621 OFFCURVE",
"1326 631 QCURVE SMOOTH",
"1347 1053 LINE",
"1281 1075 OFFCURVE",
"1091 1114 OFFCURVE",
"990 1114 QCURVE SMOOTH",
"822 1114 OFFCURVE",
"595 989 OFFCURVE",
"478 774 OFFCURVE",
"478 639 QCURVE SMOOTH",
"478 457 OFFCURVE",
"667 233 OFFCURVE",
"857 233 QCURVE SMOOTH",
"941 233 OFFCURVE",
"1072 301 OFFCURVE",
"1117 352 QCURVE",
"1132 352 LINE",
"1171 295 OFFCURVE",
"1302 233 OFFCURVE",
"1375 233 QCURVE SMOOTH",
"1467 233 OFFCURVE",
"1609 324 OFFCURVE",
"1705 473 OFFCURVE",
"1754 659 OFFCURVE",
"1754 756 QCURVE SMOOTH",
"1754 979 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"872 895 OFFCURVE",
"994 895 QCURVE SMOOTH",
"1013 895 OFFCURVE",
"1042 893 OFFCURVE",
"1062 889 QCURVE",
"1052 733 LINE SMOOTH",
"1044 582 OFFCURVE",
"974 451 OFFCURVE",
"892 451 QCURVE SMOOTH",
"833 451 OFFCURVE",
"759 541 OFFCURVE",
"759 641 QCURVE SMOOTH",
"759 743 OFFCURVE"
);
}
);
width = 1837;
}
);
note = at;
unicode = 0040;
},
{
glyphname = A;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"629 1466 LINE",
"578 1466 LINE",
"0 0 LINE",
"57 0 LINE",
"276 555 LINE",
"911 555 LINE",
"1124 0 LINE",
"1182 0 LINE"
);
},
{
closed = 1;
nodes = (
"532 1214 LINE SMOOTH",
"549 1255 OFFCURVE",
"586 1352 OFFCURVE",
"600 1397 QCURVE",
"621 1339 OFFCURVE",
"653 1251 OFFCURVE",
"666 1217 QCURVE SMOOTH",
"891 606 LINE",
"295 606 LINE"
);
}
);
width = 1181;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"684 1466 LINE",
"573 1466 LINE",
"0 0 LINE",
"121 0 LINE",
"319 504 LINE",
"926 504 LINE",
"1120 0 LINE",
"1245 0 LINE"
);
},
{
closed = 1;
nodes = (
"561 1137 LINE",
"573 1176 OFFCURVE",
"610 1284 OFFCURVE",
"627 1337 QCURVE",
"643 1290 OFFCURVE",
"684 1167 OFFCURVE",
"692 1139 QCURVE",
"889 610 LINE",
"358 610 LINE"
);
}
);
width = 1245;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"600 1094 OFFCURVE",
"635 1214 OFFCURVE",
"651 1278 QCURVE",
"659 1253 OFFCURVE",
"686 1161 OFFCURVE",
"715 1075 OFFCURVE",
"721 1059 QCURVE SMOOTH",
"885 616 LINE",
"422 616 LINE",
"588 1059 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"0 0 LINE",
"186 0 LINE",
"360 453 LINE",
"940 453 LINE",
"1116 0 LINE",
"1307 0 LINE",
"737 1468 LINE",
"571 1468 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\0126 1 0 4 1 76 0 0 0 2 1 0 2 104 5 1 4 4 31 77 3 1 1 1 32 1 78 10 10 10 17 10 17 17 17 26 16 6 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1308;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"895 1468 LINE",
"516 1468 LINE",
"0 0 LINE",
"334 0 LINE",
"440 348 LINE",
"973 348 LINE",
"1079 0 LINE",
"1413 0 LINE"
);
},
{
closed = 1;
nodes = (
"623 948 LINE SMOOTH",
"631 971 OFFCURVE",
"662 1079 OFFCURVE",
"696 1200 OFFCURVE",
"707 1241 QCURVE",
"717 1200 OFFCURVE",
"750 1090 OFFCURVE",
"782 983 OFFCURVE",
"793 948 QCURVE SMOOTH",
"899 608 LINE",
"518 608 LINE"
);
}
);
width = 1413;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1004 1468 LINE",
"477 1468 LINE",
"0 0 LINE",
"434 0 LINE",
"508 274 LINE",
"983 274 LINE",
"1055 0 LINE",
"1487 0 LINE"
);
},
{
closed = 1;
nodes = (
"653 838 LINE SMOOTH",
"666 885 OFFCURVE",
"700 1030 OFFCURVE",
"733 1176 OFFCURVE",
"743 1227 QCURVE",
"754 1176 OFFCURVE",
"791 1022 OFFCURVE",
"827 877 OFFCURVE",
"838 838 QCURVE SMOOTH",
"901 598 LINE",
"590 598 LINE"
);
}
);
width = 1486;
}
);
note = A;
unicode = 0041;
},
{
glyphname = B;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"620 0 LINE SMOOTH",
"769 0 OFFCURVE",
"1005 82 OFFCURVE",
"1140 266 OFFCURVE",
"1140 416 QCURVE SMOOTH",
"1140 553 OFFCURVE",
"994 741 OFFCURVE",
"814 768 QCURVE",
"814 772 LINE",
"955 797 OFFCURVE",
"1103 985 OFFCURVE",
"1103 1110 QCURVE SMOOTH",
"1103 1286 OFFCURVE",
"869 1462 OFFCURVE",
"601 1462 QCURVE SMOOTH",
"210 1462 LINE",
"210 0 LINE"
);
},
{
closed = 1;
nodes = (
"595 1411 LINE SMOOTH",
"833 1411 OFFCURVE",
"1048 1270 OFFCURVE",
"1048 1108 QCURVE SMOOTH",
"1048 795 OFFCURVE",
"620 795 QCURVE SMOOTH",
"263 795 LINE",
"263 1411 LINE"
);
},
{
closed = 1;
nodes = (
"761 743 OFFCURVE",
"972 684 OFFCURVE",
"1084 541 OFFCURVE",
"1084 414 QCURVE SMOOTH",
"1084 225 OFFCURVE",
"845 51 OFFCURVE",
"636 51 QCURVE SMOOTH",
"263 51 LINE",
"263 743 LINE",
"613 743 LINE SMOOTH"
);
}
);
width = 1255;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"667 0 LINE SMOOTH",
"818 0 OFFCURVE",
"1050 90 OFFCURVE",
"1179 274 OFFCURVE",
"1179 416 QCURVE SMOOTH",
"1179 571 OFFCURVE",
"1013 741 OFFCURVE",
"853 766 QCURVE",
"853 774 LINE",
"990 799 OFFCURVE",
"1138 979 OFFCURVE",
"1138 1106 QCURVE SMOOTH",
"1138 1294 OFFCURVE",
"880 1462 OFFCURVE",
"610 1462 QCURVE SMOOTH",
"204 1462 LINE",
"204 0 LINE"
);
},
{
closed = 1;
nodes = (
"610 1358 LINE SMOOTH",
"822 1358 OFFCURVE",
"1015 1235 OFFCURVE",
"1015 1094 QCURVE SMOOTH",
"1015 956 OFFCURVE",
"837 817 OFFCURVE",
"636 817 QCURVE SMOOTH",
"323 817 LINE",
"323 1358 LINE"
);
},
{
closed = 1;
nodes = (
"851 715 OFFCURVE",
"1054 573 OFFCURVE",
"1054 422 QCURVE SMOOTH",
"1054 102 OFFCURVE",
"657 102 QCURVE SMOOTH",
"323 102 LINE",
"323 715 LINE",
"638 715 LINE SMOOTH"
);
}
);
width = 1294;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"948 0 OFFCURVE",
"1220 217 OFFCURVE",
"1220 416 QCURVE SMOOTH",
"1220 528 OFFCURVE",
"1134 672 OFFCURVE",
"984 750 OFFCURVE",
"892 766 QCURVE",
"892 776 LINE",
"1027 801 OFFCURVE",
"1171 971 OFFCURVE",
"1171 1100 QCURVE SMOOTH",
"1171 1298 OFFCURVE",
"888 1462 OFFCURVE",
"616 1462 QCURVE SMOOTH",
"198 1462 LINE",
"198 0 LINE",
"712 0 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"810 1305 OFFCURVE",
"980 1200 OFFCURVE",
"980 1079 QCURVE SMOOTH",
"980 961 OFFCURVE",
"839 840 OFFCURVE",
"653 840 QCURVE SMOOTH",
"382 840 LINE",
"382 1305 LINE",
"624 1305 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1023 545 OFFCURVE",
"1023 430 QCURVE SMOOTH",
"1023 307 OFFCURVE",
"872 156 OFFCURVE",
"677 156 QCURVE SMOOTH",
"382 156 LINE",
"382 686 LINE",
"663 686 LINE SMOOTH",
"866 686 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\0128 1 4 2 1 76 0 2 8 1 4 5 2 4 103 7 1 3 3 0 95 0 0 0 31 77 0 5 5 1 95 6 1 1 1 32 1 78 27 26 17 17 0 0 30 28 26 34 27 34 17 25 17 24 20 18 0 16 0 15 33 9 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 1331;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"731 0 LINE SMOOTH",
"979 0 OFFCURVE",
"1267 225 OFFCURVE",
"1267 424 QCURVE SMOOTH",
"1267 539 OFFCURVE",
"1198 678 OFFCURVE",
"1077 750 OFFCURVE",
"1005 766 QCURVE",
"1005 776 LINE",
"1114 795 OFFCURVE",
"1231 967 OFFCURVE",
"1231 1092 QCURVE SMOOTH",
"1231 1298 OFFCURVE",
"929 1462 OFFCURVE",
"639 1462 QCURVE SMOOTH",
"184 1462 LINE",
"184 0 LINE"
);
},
{
closed = 1;
nodes = (
"657 1208 LINE SMOOTH",
"790 1208 OFFCURVE",
"913 1135 OFFCURVE",
"913 1051 QCURVE SMOOTH",
"913 967 OFFCURVE",
"809 883 OFFCURVE",
"673 883 QCURVE SMOOTH",
"493 883 LINE",
"493 1208 LINE"
);
},
{
closed = 1;
nodes = (
"833 637 OFFCURVE",
"946 537 OFFCURVE",
"946 455 QCURVE SMOOTH",
"946 365 OFFCURVE",
"835 256 OFFCURVE",
"696 256 QCURVE SMOOTH",
"493 256 LINE",
"493 637 LINE",
"686 637 LINE SMOOTH"
);
}
);
width = 1376;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"726 0 LINE SMOOTH",
"984 0 OFFCURVE",
"1283 229 OFFCURVE",
"1283 428 QCURVE SMOOTH",
"1283 545 OFFCURVE",
"1204 682 OFFCURVE",
"1085 750 OFFCURVE",
"1025 766 QCURVE",
"1025 776 LINE",
"1081 791 OFFCURVE",
"1185 868 OFFCURVE",
"1255 1001 OFFCURVE",
"1255 1098 QCURVE SMOOTH",
"1255 1274 OFFCURVE",
"982 1462 OFFCURVE",
"667 1462 QCURVE SMOOTH",
"157 1462 LINE",
"157 0 LINE"
);
},
{
closed = 1;
nodes = (
"663 1163 LINE SMOOTH",
"849 1163 OFFCURVE",
"849 1040 QCURVE SMOOTH",
"849 983 OFFCURVE",
"769 901 OFFCURVE",
"671 901 QCURVE SMOOTH",
"552 901 LINE",
"552 1163 LINE"
);
},
{
closed = 1;
nodes = (
"794 612 OFFCURVE",
"876 520 OFFCURVE",
"876 461 QCURVE SMOOTH",
"876 393 OFFCURVE",
"794 305 OFFCURVE",
"692 305 QCURVE SMOOTH",
"552 305 LINE",
"552 612 LINE",
"683 612 LINE SMOOTH"
);
}
);
width = 1380;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1085 1401 OFFCURVE",
"1173 1356 QCURVE",
"1194 1407 LINE",
"1028 1483 OFFCURVE",
"829 1483 QCURVE SMOOTH",
"610 1483 OFFCURVE",
"297 1288 OFFCURVE",
"129 950 OFFCURVE",
"129 737 QCURVE SMOOTH",
"129 510 OFFCURVE",
"279 170 OFFCURVE",
"573 -20 OFFCURVE",
"791 -20 QCURVE SMOOTH",
"911 -20 OFFCURVE",
"1100 16 OFFCURVE",
"1167 43 QCURVE",
"1167 90 LINE",
"1094 63 OFFCURVE",
"909 31 OFFCURVE",
"791 31 QCURVE SMOOTH",
"590 31 OFFCURVE",
"319 207 OFFCURVE",
"184 524 OFFCURVE",
"184 737 QCURVE SMOOTH",
"184 938 OFFCURVE",
"336 1251 OFFCURVE",
"623 1432 OFFCURVE",
"829 1432 QCURVE SMOOTH",
"913 1432 OFFCURVE"
);
}
);
width = 1257;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1164 1298 QCURVE",
"1211 1401 LINE",
"1041 1483 OFFCURVE",
"826 1483 QCURVE SMOOTH",
"605 1483 OFFCURVE",
"292 1290 OFFCURVE",
"126 952 OFFCURVE",
"126 735 QCURVE SMOOTH",
"126 508 OFFCURVE",
"276 168 OFFCURVE",
"572 -20 OFFCURVE",
"794 -20 QCURVE SMOOTH",
"912 -20 OFFCURVE",
"1095 12 OFFCURVE",
"1170 41 QCURVE",
"1170 143 LINE",
"1091 119 OFFCURVE",
"912 86 OFFCURVE",
"806 86 QCURVE SMOOTH",
"622 86 OFFCURVE",
"376 246 OFFCURVE",
"251 537 OFFCURVE",
"251 733 QCURVE SMOOTH",
"251 926 OFFCURVE",
"388 1214 OFFCURVE",
"646 1376 OFFCURVE",
"826 1376 QCURVE SMOOTH",
"1005 1376 OFFCURVE"
);
}
);
width = 1275;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1089 1272 OFFCURVE",
"1156 1241 QCURVE",
"1230 1397 LINE",
"1058 1483 OFFCURVE",
"826 1483 QCURVE SMOOTH",
"601 1483 OFFCURVE",
"286 1292 OFFCURVE",
"124 954 OFFCURVE",
"124 733 QCURVE SMOOTH",
"124 504 OFFCURVE",
"274 164 OFFCURVE",
"573 -20 OFFCURVE",
"796 -20 QCURVE SMOOTH",
"917 -20 OFFCURVE",
"1091 8 OFFCURVE",
"1173 39 QCURVE",
"1173 199 LINE",
"1089 174 OFFCURVE",
"917 141 OFFCURVE",
"822 141 QCURVE SMOOTH",
"570 141 OFFCURVE",
"319 459 OFFCURVE",
"319 731 QCURVE SMOOTH",
"319 1006 OFFCURVE",
"589 1321 OFFCURVE",
"824 1321 QCURVE SMOOTH",
"923 1321 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\01223 1 0 3 24 9 2 1 0 10 1 2 1 3 76 4 1 0 0 3 97 0 3 3 37 77 0 1 1 2 97 0 2 2 38 2 78 1 0 22 20 14 12 7 5 0 26 1 26 5 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1294;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1050 1167 OFFCURVE",
"1132 1128 QCURVE",
"1232 1380 LINE",
"1132 1427 OFFCURVE",
"913 1483 OFFCURVE",
"804 1483 QCURVE SMOOTH",
"583 1483 OFFCURVE",
"278 1290 OFFCURVE",
"118 950 OFFCURVE",
"118 729 QCURVE SMOOTH",
"118 504 OFFCURVE",
"257 166 OFFCURVE",
"548 -20 OFFCURVE",
"775 -20 QCURVE SMOOTH",
"892 -20 OFFCURVE",
"1081 16 OFFCURVE",
"1177 55 QCURVE",
"1177 315 LINE",
"1072 279 OFFCURVE",
"892 238 OFFCURVE",
"804 238 QCURVE SMOOTH",
"612 238 OFFCURVE",
"437 494 OFFCURVE",
"437 727 QCURVE SMOOTH",
"437 958 OFFCURVE",
"626 1225 OFFCURVE",
"804 1225 QCURVE SMOOTH",
"884 1225 OFFCURVE"
);
}
);
width = 1304;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1065 1108 OFFCURVE",
"1144 1069 QCURVE",
"1265 1380 LINE",
"1153 1434 OFFCURVE",
"919 1483 OFFCURVE",
"813 1483 QCURVE SMOOTH",
"585 1483 OFFCURVE",
"268 1288 OFFCURVE",
"104 948 OFFCURVE",
"104 727 QCURVE SMOOTH",
"104 506 OFFCURVE",
"247 168 OFFCURVE",
"548 -20 OFFCURVE",
"788 -20 QCURVE SMOOTH",
"901 -20 OFFCURVE",
"1105 18 OFFCURVE",
"1202 61 QCURVE",
"1202 395 LINE",
"1110 356 OFFCURVE",
"927 303 OFFCURVE",
"831 303 QCURVE SMOOTH",
"667 303 OFFCURVE",
"510 518 OFFCURVE",
"510 725 QCURVE SMOOTH",
"510 930 OFFCURVE",
"669 1159 OFFCURVE",
"809 1159 QCURVE SMOOTH",
"901 1159 OFFCURVE"
);
}
);
width = 1329;
}
);
note = C;
unicode = 0043;
},
{
glyphname = D;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"935 1462 OFFCURVE",
"572 1462 QCURVE SMOOTH",
"210 1462 LINE",
"210 0 LINE",
"525 0 LINE SMOOTH",
"908 0 OFFCURVE",
"1285 379 OFFCURVE",
"1285 745 QCURVE SMOOTH",
"1285 1094 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"532 51 QCURVE SMOOTH",
"263 51 LINE",
"263 1411 LINE",
"552 1411 LINE SMOOTH",
"908 1411 OFFCURVE",
"1230 1069 OFFCURVE",
"1230 743 QCURVE SMOOTH",
"1230 51 OFFCURVE"
);
}
);
width = 1417;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"958 1462 OFFCURVE",
"610 1462 QCURVE SMOOTH",
"204 1462 LINE",
"204 0 LINE",
"564 0 LINE SMOOTH",
"937 0 OFFCURVE",
"1326 377 OFFCURVE",
"1326 745 QCURVE SMOOTH",
"1326 1096 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"556 104 QCURVE SMOOTH",
"323 104 LINE",
"323 1358 LINE",
"587 1358 LINE SMOOTH",
"1203 1358 OFFCURVE",
"1203 741 QCURVE SMOOTH",
"1203 104 OFFCURVE"
);
}
);
width = 1456;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1193 1298 OFFCURVE",
"868 1462 OFFCURVE",
"649 1462 QCURVE SMOOTH",
"198 1462 LINE",
"198 0 LINE",
"606 0 LINE SMOOTH",
"966 0 OFFCURVE",
"1369 375 OFFCURVE",
"1369 745 QCURVE SMOOTH",
"1369 979 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"581 158 QCURVE SMOOTH",
"382 158 LINE",
"382 1305 LINE",
"622 1305 LINE SMOOTH",
"886 1305 OFFCURVE",
"1175 1032 OFFCURVE",
"1175 739 QCURVE SMOOTH",
"1175 158 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 2 2 1 95 0 1 1 31 77 0 3 3 0 95 0 0 0 32 0 78 33 37 33 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1495;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1210 1298 OFFCURVE",
"872 1462 OFFCURVE",
"643 1462 QCURVE SMOOTH",
"184 1462 LINE",
"184 0 LINE",
"598 0 LINE SMOOTH",
"975 0 OFFCURVE",
"1396 375 OFFCURVE",
"1396 745 QCURVE SMOOTH",
"1396 979 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"626 256 QCURVE SMOOTH",
"493 256 LINE",
"493 1208 LINE",
"659 1208 LINE SMOOTH",
"862 1208 OFFCURVE",
"1075 979 OFFCURVE",
"1075 737 QCURVE SMOOTH",
"1075 256 OFFCURVE"
);
}
);
width = 1515;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1015 1462 OFFCURVE",
"663 1462 QCURVE SMOOTH",
"157 1462 LINE",
"157 0 LINE",
"630 0 LINE SMOOTH",
"864 0 OFFCURVE",
"1208 168 OFFCURVE",
"1398 508 OFFCURVE",
"1398 762 QCURVE SMOOTH",
"1398 1102 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"821 324 OFFCURVE",
"640 324 QCURVE SMOOTH",
"552 324 LINE",
"552 1143 LINE",
"667 1143 LINE SMOOTH",
"988 1143 OFFCURVE",
"988 748 QCURVE SMOOTH",
"988 532 OFFCURVE"
);
}
);
width = 1503;
}
);
note = D;
unicode = 0044;
},
{
glyphname = E;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"263 51 LINE",
"263 745 LINE",
"958 745 LINE",
"958 797 LINE",
"263 797 LINE",
"263 1411 LINE",
"998 1411 LINE",
"998 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"998 0 LINE",
"998 51 LINE"
);
}
);
width = 1126;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"323 106 LINE",
"323 715 LINE",
"968 715 LINE",
"968 819 LINE",
"323 819 LINE",
"323 1356 LINE",
"1007 1356 LINE",
"1007 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"1007 0 LINE",
"1007 106 LINE"
);
}
);
width = 1132;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"978 684 LINE",
"978 844 LINE",
"382 844 LINE",
"382 1300 LINE",
"1015 1300 LINE",
"1015 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"1015 0 LINE",
"1015 162 LINE",
"382 162 LINE",
"382 684 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0120 4 0 5 0 4 5 103 0 3 3 2 95 0 2 2 31 77 0 0 0 1 95 0 1 1 32 1 78 17 17 17 17 17 16 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1138;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"493 256 LINE",
"493 633 LINE",
"989 633 LINE",
"989 887 LINE",
"493 887 LINE",
"493 1208 LINE",
"1026 1208 LINE",
"1026 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"1026 0 LINE",
"1026 256 LINE"
);
}
);
width = 1146;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"552 322 LINE",
"552 598 LINE",
"991 598 LINE",
"991 915 LINE",
"552 915 LINE",
"552 1145 LINE",
"1025 1145 LINE",
"1025 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"1025 0 LINE",
"1025 322 LINE"
);
}
);
width = 1124;
}
);
note = E;
unicode = 0045;
},
{
glyphname = F;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"962 674 LINE",
"962 725 LINE",
"263 725 LINE",
"263 1411 LINE",
"1001 1411 LINE",
"1001 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"263 0 LINE",
"263 674 LINE"
);
}
);
width = 1007;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"970 647 LINE",
"970 754 LINE",
"323 754 LINE",
"323 1356 LINE",
"1007 1356 LINE",
"1007 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"323 0 LINE",
"323 647 LINE"
);
}
);
width = 1036;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"382 782 LINE",
"382 1300 LINE",
"1015 1300 LINE",
"1015 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"382 0 LINE",
"382 621 LINE",
"976 621 LINE",
"976 782 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\0120 4 0 0 1 4 0 103 0 3 3 2 95 0 2 2 31 77 0 1 1 32 1 78 17 17 17 17 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1062;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"985 578 LINE",
"985 831 LINE",
"489 831 LINE",
"489 1208 LINE",
"1022 1208 LINE",
"1022 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"489 0 LINE",
"489 578 LINE"
);
}
);
width = 1124;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"984 549 LINE",
"984 866 LINE",
"546 866 LINE",
"546 1145 LINE",
"1021 1145 LINE",
"1021 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"546 0 LINE",
"546 549 LINE"
);
}
);
width = 1103;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1255 666 LINE",
"1255 102 LINE",
"1176 70 OFFCURVE",
"977 31 OFFCURVE",
"858 31 QCURVE SMOOTH",
"653 31 OFFCURVE",
"350 174 OFFCURVE",
"184 481 OFFCURVE",
"184 729 QCURVE SMOOTH",
"184 932 OFFCURVE",
"348 1251 OFFCURVE",
"655 1436 OFFCURVE",
"866 1436 QCURVE SMOOTH",
"965 1436 OFFCURVE",
"1163 1397 OFFCURVE",
"1268 1346 QCURVE",
"1292 1397 LINE",
"1196 1444 OFFCURVE",
"985 1487 OFFCURVE",
"868 1487 QCURVE SMOOTH",
"639 1487 OFFCURVE",
"307 1286 OFFCURVE",
"129 942 OFFCURVE",
"129 727 QCURVE SMOOTH",
"129 369 OFFCURVE",
"500 -20 OFFCURVE",
"854 -20 QCURVE SMOOTH",
"975 -20 OFFCURVE",
"1210 27 OFFCURVE",
"1309 74 QCURVE",
"1309 717 LINE",
"752 717 LINE",
"752 666 LINE"
);
}
);
width = 1474;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1203 637 LINE",
"1203 137 LINE",
"1136 115 OFFCURVE",
"970 84 OFFCURVE",
"863 84 QCURVE SMOOTH",
"562 84 OFFCURVE",
"249 414 OFFCURVE",
"249 729 QCURVE SMOOTH",
"249 922 OFFCURVE",
"398 1214 OFFCURVE",
"675 1378 OFFCURVE",
"867 1378 QCURVE SMOOTH",
"1070 1378 OFFCURVE",
"1256 1290 QCURVE",
"1306 1397 LINE",
"1211 1440 OFFCURVE",
"994 1485 OFFCURVE",
"876 1485 QCURVE SMOOTH",
"640 1485 OFFCURVE",
"304 1292 OFFCURVE",
"126 950 OFFCURVE",
"126 729 QCURVE SMOOTH",
"126 377 OFFCURVE",
"491 -20 OFFCURVE",
"839 -20 QCURVE SMOOTH",
"978 -20 OFFCURVE",
"1216 23 OFFCURVE",
"1322 66 QCURVE",
"1322 745 LINE",
"792 745 LINE",
"792 637 LINE"
);
}
);
width = 1482;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1154 174 LINE",
"1099 160 OFFCURVE",
"964 139 OFFCURVE",
"867 139 QCURVE SMOOTH",
"671 139 OFFCURVE",
"429 289 OFFCURVE",
"317 557 OFFCURVE",
"317 731 QCURVE SMOOTH",
"317 1004 OFFCURVE",
"609 1321 OFFCURVE",
"872 1321 QCURVE SMOOTH",
"976 1321 OFFCURVE",
"1171 1270 OFFCURVE",
"1248 1237 QCURVE",
"1318 1397 LINE",
"1224 1438 OFFCURVE",
"1005 1483 OFFCURVE",
"882 1483 QCURVE SMOOTH",
"642 1483 OFFCURVE",
"302 1296 OFFCURVE",
"124 958 OFFCURVE",
"124 731 QCURVE SMOOTH",
"124 500 OFFCURVE",
"286 162 OFFCURVE",
"597 -20 OFFCURVE",
"824 -20 QCURVE SMOOTH",
"978 -20 OFFCURVE",
"1220 16 OFFCURVE",
"1338 55 QCURVE",
"1338 772 LINE",
"833 772 LINE",
"833 608 LINE",
"1154 608 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01217 1 3 2 18 1 0 3 31 1 4 5 3 1 1 4 4 76 0 0 6 1 5 4 0 5 103 0 3 3 2 97 0 2 2 37 77 0 4 4 1 97 0 1 1 38 1 78 0 0 0 32 0 32 37 37 38 35 17 7 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1490;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1015 563 LINE",
"1015 258 LINE",
"974 250 OFFCURVE",
"884 238 OFFCURVE",
"818 238 QCURVE SMOOTH",
"683 238 OFFCURVE",
"515 362 OFFCURVE",
"437 584 OFFCURVE",
"437 727 QCURVE SMOOTH",
"437 877 OFFCURVE",
"546 1102 OFFCURVE",
"745 1225 OFFCURVE",
"880 1225 QCURVE SMOOTH",
"974 1225 OFFCURVE",
"1146 1180 OFFCURVE",
"1214 1145 QCURVE",
"1316 1393 LINE",
"1224 1434 OFFCURVE",
"999 1483 OFFCURVE",
"882 1483 QCURVE SMOOTH",
"636 1483 OFFCURVE",
"294 1298 OFFCURVE",
"118 963 OFFCURVE",
"118 733 QCURVE SMOOTH",
"118 365 OFFCURVE",
"470 -20 OFFCURVE",
"798 -20 QCURVE SMOOTH",
"954 -20 OFFCURVE",
"1203 25 OFFCURVE",
"1318 63 QCURVE",
"1318 821 LINE",
"739 821 LINE",
"739 563 LINE"
);
}
);
width = 1482;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1005 551 LINE",
"1005 322 LINE",
"978 315 OFFCURVE",
"878 305 OFFCURVE",
"843 305 QCURVE SMOOTH",
"684 305 OFFCURVE",
"512 520 OFFCURVE",
"512 725 QCURVE SMOOTH",
"512 844 OFFCURVE",
"583 1040 OFFCURVE",
"743 1159 OFFCURVE",
"874 1159 QCURVE SMOOTH",
"970 1159 OFFCURVE",
"1142 1120 OFFCURVE",
"1220 1081 QCURVE",
"1345 1391 LINE",
"1255 1430 OFFCURVE",
"1009 1483 OFFCURVE",
"872 1483 QCURVE SMOOTH",
"622 1483 OFFCURVE",
"280 1300 OFFCURVE",
"104 965 OFFCURVE",
"104 735 QCURVE SMOOTH",
"104 479 OFFCURVE",
"282 143 OFFCURVE",
"600 -20 OFFCURVE",
"811 -20 QCURVE SMOOTH",
"970 -20 OFFCURVE",
"1261 29 OFFCURVE",
"1376 68 QCURVE",
"1376 856 LINE",
"745 856 LINE",
"745 551 LINE"
);
}
);
width = 1515;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1181 1462 LINE",
"1181 795 LINE",
"263 795 LINE",
"263 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"263 0 LINE",
"263 743 LINE",
"1181 743 LINE",
"1181 0 LINE",
"1234 0 LINE",
"1234 1462 LINE"
);
}
);
width = 1445;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1156 1462 LINE",
"1156 819 LINE",
"323 819 LINE",
"323 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"323 0 LINE",
"323 713 LINE",
"1156 713 LINE",
"1156 0 LINE",
"1275 0 LINE",
"1275 1462 LINE"
);
}
);
width = 1482;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"382 844 LINE",
"382 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"382 0 LINE",
"382 682 LINE",
"1132 682 LINE",
"1132 0 LINE",
"1316 0 LINE",
"1316 1462 LINE",
"1132 1462 LINE",
"1132 844 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0120 5 0 2 1 5 2 103 4 1 0 0 31 77 3 1 1 1 32 1 78 17 17 17 17 17 16 6 8 28 \012CALL[ ]	/* CallFunction */";
};
width = 1517;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1073 1462 LINE",
"1073 889 LINE",
"493 889 LINE",
"493 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"493 0 LINE",
"493 631 LINE",
"1073 631 LINE",
"1073 0 LINE",
"1382 0 LINE",
"1382 1462 LINE"
);
}
);
width = 1566;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1013 1462 LINE",
"1013 920 LINE",
"554 920 LINE",
"554 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"554 0 LINE",
"554 596 LINE",
"1013 596 LINE",
"1013 0 LINE",
"1410 0 LINE",
"1410 1462 LINE"
);
}
);
width = 1568;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"317 47 LINE",
"317 1413 LINE",
"456 1421 LINE",
"456 1462 LINE",
"124 1462 LINE",
"124 1421 LINE",
"263 1413 LINE",
"263 47 LINE",
"124 41 LINE",
"124 0 LINE",
"456 0 LINE",
"456 41 LINE"
);
}
);
width = 579;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"376 96 LINE",
"376 1364 LINE",
"532 1389 LINE",
"532 1462 LINE",
"102 1462 LINE",
"102 1389 LINE",
"258 1364 LINE",
"258 96 LINE",
"102 74 LINE",
"102 0 LINE",
"532 0 LINE",
"532 74 LINE"
);
}
);
width = 636;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"609 1356 LINE",
"609 1462 LINE",
"81 1462 LINE",
"81 1356 LINE",
"253 1315 LINE",
"253 145 LINE",
"81 106 LINE",
"81 0 LINE",
"609 0 LINE",
"609 106 LINE",
"437 145 LINE",
"437 1315 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 10 7 6 5 4 1 0 8 0 1 1 76 0 1 1 31 77 0 0 0 32 0 78 21 18 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 694;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"552 258 LINE",
"552 1204 LINE",
"731 1286 LINE",
"731 1462 LINE",
"65 1462 LINE",
"65 1286 LINE",
"243 1204 LINE",
"243 258 LINE",
"65 176 LINE",
"65 0 LINE",
"731 0 LINE",
"731 176 LINE"
);
}
);
width = 796;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"649 295 LINE",
"649 1169 LINE",
"831 1237 LINE",
"831 1462 LINE",
"69 1462 LINE",
"69 1237 LINE",
"251 1169 LINE",
"251 295 LINE",
"69 225 LINE",
"69 0 LINE",
"831 0 LINE",
"831 225 LINE"
);
}
);
width = 901;
}
);
note = I;
unicode = 0049;
},
{
glyphname = J;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"212 -260 OFFCURVE",
"271 -98 OFFCURVE",
"271 4 QCURVE SMOOTH",
"271 1462 LINE",
"218 1462 LINE",
"218 10 LINE SMOOTH",
"218 -129 OFFCURVE",
"109 -303 OFFCURVE",
"-38 -303 QCURVE SMOOTH",
"-85 -303 OFFCURVE",
"-171 -287 OFFCURVE",
"-200 -274 QCURVE",
"-200 -332 LINE",
"-173 -340 OFFCURVE",
"-96 -356 OFFCURVE",
"-38 -356 QCURVE SMOOTH",
"76 -356 OFFCURVE"
);
}
);
width = 473;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"322 -168 OFFCURVE",
"322 12 QCURVE SMOOTH",
"322 1462 LINE",
"203 1462 LINE",
"203 8 LINE SMOOTH",
"203 -266 OFFCURVE",
"-26 -266 QCURVE SMOOTH",
"-71 -266 OFFCURVE",
"-149 -250 OFFCURVE",
"-180 -242 QCURVE",
"-180 -348 LINE",
"-151 -356 OFFCURVE",
"-78 -373 OFFCURVE",
"-24 -373 QCURVE SMOOTH",
"148 -373 OFFCURVE"
);
}
);
width = 516;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"373 -188 OFFCURVE",
"373 23 QCURVE SMOOTH",
"373 1462 LINE",
"189 1462 LINE",
"189 8 LINE SMOOTH",
"189 -86 OFFCURVE",
"132 -186 OFFCURVE",
"40 -227 OFFCURVE",
"-12 -227 QCURVE SMOOTH",
"-53 -227 OFFCURVE",
"-126 -217 OFFCURVE",
"-159 -207 QCURVE",
"-159 -362 LINE",
"-130 -375 OFFCURVE",
"-57 -389 OFFCURVE",
"-7 -389 QCURVE SMOOTH",
"165 -389 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */\0124 1 1 2 3 1 0 1 2 76 0 1 3 1 0 1 0 101 0 2 2 31 2 78 1 0 13 12 8 6 0 16 1 16 4 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 559;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"377 -326 OFFCURVE",
"494 -94 OFFCURVE",
"494 94 QCURVE SMOOTH",
"494 1462 LINE",
"185 1462 LINE",
"185 92 LINE SMOOTH",
"185 -16 OFFCURVE",
"136 -129 OFFCURVE",
"48 -170 OFFCURVE",
"-6 -170 QCURVE SMOOTH",
"-47 -170 OFFCURVE",
"-118 -158 OFFCURVE",
"-151 -150 QCURVE",
"-151 -408 LINE",
"-118 -418 OFFCURVE",
"-28 -430 OFFCURVE",
"31 -430 QCURVE SMOOTH",
"168 -430 OFFCURVE"
);
}
);
width = 677;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"431 -342 OFFCURVE",
"564 -78 OFFCURVE",
"564 143 QCURVE SMOOTH",
"564 1462 LINE",
"167 1462 LINE",
"167 109 LINE SMOOTH",
"167 -23 OFFCURVE",
"91 -152 OFFCURVE",
"-16 -152 QCURVE SMOOTH",
"-57 -152 OFFCURVE",
"-128 -137 OFFCURVE",
"-161 -131 QCURVE",
"-161 -438 LINE",
"-124 -446 OFFCURVE",
"-24 -459 OFFCURVE",
"44 -459 QCURVE SMOOTH",
"197 -459 OFFCURVE"
);
}
);
width = 720;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1130 1462 LINE",
"1052 1462 LINE",
"366 770 LINE SMOOTH",
"339 741 OFFCURVE",
"286 690 OFFCURVE",
"263 664 QCURVE",
"263 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"263 0 LINE",
"263 600 LINE",
"478 815 LINE",
"1072 0 LINE",
"1142 0 LINE",
"519 854 LINE"
);
}
);
width = 1142;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1187 1462 LINE",
"1040 1462 LINE",
"499 895 LINE SMOOTH",
"454 846 OFFCURVE",
"364 750 OFFCURVE",
"323 702 QCURVE",
"323 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"323 0 LINE",
"323 584 LINE",
"505 758 LINE",
"1060 0 LINE",
"1203 0 LINE",
"593 840 LINE"
);
}
);
width = 1204;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1029 1462 LINE",
"634 1020 LINE SMOOTH",
"571 950 OFFCURVE",
"444 811 OFFCURVE",
"382 741 QCURVE",
"382 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"382 0 LINE",
"382 567 LINE",
"532 698 LINE",
"1050 0 LINE",
"1267 0 LINE",
"665 825 LINE",
"1245 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0129 4 3 3 0 2 1 76 3 1 2 2 31 77 1 1 0 0 32 0 78 21 17 19 17 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1267;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1355 1462 LINE",
"1011 1462 LINE",
"616 965 LINE",
"585 922 OFFCURVE",
"524 836 OFFCURVE",
"493 793 QCURVE",
"493 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"493 0 LINE",
"493 522 LINE",
"624 616 LINE",
"1007 0 LINE",
"1360 0 LINE",
"846 815 LINE"
);
}
);
width = 1359;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1414 1462 LINE",
"982 1462 LINE",
"675 1014 LINE SMOOTH",
"644 971 OFFCURVE",
"579 874 OFFCURVE",
"554 827 QCURVE",
"554 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"554 0 LINE",
"554 489 LINE",
"671 559 LINE",
"960 0 LINE",
"1406 0 LINE",
"954 807 LINE"
);
}
);
width = 1406;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"994 51 LINE",
"263 51 LINE",
"263 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"994 0 LINE"
);
}
);
width = 1036;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1007 106 LINE",
"323 106 LINE",
"323 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"1007 0 LINE"
);
}
);
width = 1054;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"382 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"1021 0 LINE",
"1021 164 LINE",
"382 164 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 1 1 31 77 3 1 2 2 0 96 0 0 0 32 0 78 0 0 0 5 0 5 17 17 4 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 1073;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1087 256 LINE",
"493 256 LINE",
"493 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"1087 0 LINE"
);
}
);
width = 1157;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1115 319 LINE",
"552 319 LINE",
"552 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"1115 0 LINE"
);
}
);
width = 1191;
}
);
note = L;
unicode = 004C;
},
{
glyphname = M;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1445 1389 LINE",
"1449 1389 LINE",
"1447 1337 OFFCURVE",
"1447 1264 OFFCURVE",
"1447 1233 QCURVE SMOOTH",
"1447 0 LINE",
"1500 0 LINE",
"1500 1462 LINE",
"1418 1462 LINE",
"859 98 LINE",
"853 98 LINE",
"296 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"263 0 LINE",
"263 1221 LINE SMOOTH",
"263 1266 OFFCURVE",
"263 1339 OFFCURVE",
"261 1391 QCURVE",
"265 1391 LINE",
"835 0 LINE",
"876 0 LINE"
);
}
);
width = 1714;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1464 1335 LINE",
"1470 1335 LINE",
"1466 1278 OFFCURVE",
"1461 1135 OFFCURVE",
"1461 1065 QCURVE SMOOTH",
"1461 0 LINE",
"1580 0 LINE",
"1580 1462 LINE",
"1404 1462 LINE",
"894 180 LINE",
"888 180 LINE",
"384 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"315 0 LINE",
"315 1053 LINE SMOOTH",
"315 1135 OFFCURVE",
"310 1280 OFFCURVE",
"306 1335 QCURVE",
"315 1335 LINE",
"839 0 LINE",
"935 0 LINE"
);
}
);
width = 1785;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1490 1280 LINE",
"1486 1214 OFFCURVE",
"1476 1006 OFFCURVE",
"1476 899 QCURVE SMOOTH",
"1476 0 LINE",
"1658 0 LINE",
"1658 1462 LINE",
"1388 1462 LINE",
"929 264 LINE",
"921 264 LINE",
"470 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"368 0 LINE",
"368 887 LINE SMOOTH",
"368 1004 OFFCURVE",
"360 1219 OFFCURVE",
"354 1282 QCURVE",
"362 1282 LINE",
"843 0 LINE",
"995 0 LINE",
"1482 1280 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01220 11 2 3 0 2 1 76 3 1 2 2 31 77 4 1 2 0 0 32 0 78 17 19 17 22 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1857;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1464 1145 LINE",
"1472 1145 LINE",
"1470 1104 OFFCURVE",
"1464 942 OFFCURVE",
"1458 762 OFFCURVE",
"1458 692 QCURVE SMOOTH",
"1458 0 LINE",
"1747 0 LINE",
"1747 1462 LINE",
"1325 1462 LINE",
"958 344 LINE",
"952 344 LINE",
"606 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"460 0 LINE",
"460 680 LINE SMOOTH",
"460 754 OFFCURVE",
"452 942 OFFCURVE",
"444 1106 OFFCURVE",
"442 1147 QCURVE",
"450 1147 LINE",
"802 0 LINE",
"1087 0 LINE"
);
}
);
width = 1931;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1466 1051 LINE",
"1474 1051 LINE",
"1470 1010 OFFCURVE",
"1464 868 OFFCURVE",
"1460 709 OFFCURVE",
"1460 641 QCURVE SMOOTH",
"1460 0 LINE",
"1822 0 LINE",
"1822 1462 LINE",
"1296 1462 LINE",
"997 424 LINE",
"988 424 LINE",
"683 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"507 0 LINE",
"507 635 LINE SMOOTH",
"507 709 OFFCURVE",
"499 872 OFFCURVE",
"491 1012 OFFCURVE",
"487 1053 QCURVE",
"495 1053 LINE",
"794 0 LINE",
"1171 0 LINE"
);
}
);
width = 1980;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1162 1462 LINE",
"1162 432 LINE SMOOTH",
"1162 360 OFFCURVE",
"1162 201 OFFCURVE",
"1164 125 QCURVE",
"1160 125 LINE",
"251 1462 LINE",
"210 1462 LINE",
"210 0 LINE",
"263 0 LINE",
"263 1028 LINE SMOOTH",
"263 1110 OFFCURVE",
"263 1253 OFFCURVE",
"261 1341 QCURVE",
"265 1341 LINE",
"1177 0 LINE",
"1216 0 LINE",
"1216 1462 LINE"
);
}
);
width = 1429;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1175 1462 LINE",
"1175 535 LINE SMOOTH",
"1175 451 OFFCURVE",
"1179 252 OFFCURVE",
"1183 188 QCURVE",
"1175 188 LINE",
"331 1462 LINE",
"204 1462 LINE",
"204 0 LINE",
"315 0 LINE",
"315 922 LINE SMOOTH",
"315 1020 OFFCURVE",
"310 1198 OFFCURVE",
"306 1278 QCURVE",
"313 1278 LINE",
"1158 0 LINE",
"1285 0 LINE",
"1285 1462 LINE"
);
}
);
width = 1492;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1185 637 LINE SMOOTH",
"1185 569 OFFCURVE",
"1191 416 OFFCURVE",
"1197 285 OFFCURVE",
"1199 252 QCURVE",
"1191 252 LINE",
"411 1462 LINE",
"198 1462 LINE",
"198 0 LINE",
"368 0 LINE",
"368 817 LINE SMOOTH",
"368 930 OFFCURVE",
"356 1143 OFFCURVE",
"352 1214 QCURVE",
"360 1214 LINE",
"1142 0 LINE",
"1357 0 LINE",
"1357 1462 LINE",
"1185 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\0123 1 0 2 1 76 4 3 2 2 2 31 77 1 1 0 0 32 0 78 0 0 0 18 0 18 17 22 17 5 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1556;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1202 1462 LINE",
"1202 770 LINE SMOOTH",
"1204 668 OFFCURVE",
"1212 467 OFFCURVE",
"1216 367 QCURVE",
"1210 367 LINE",
"575 1462 LINE",
"184 1462 LINE",
"184 0 LINE",
"460 0 LINE",
"460 688 LINE",
"456 793 OFFCURVE",
"446 1001 OFFCURVE",
"442 1106 QCURVE",
"450 1106 LINE",
"1087 0 LINE",
"1480 0 LINE",
"1480 1462 LINE"
);
}
);
width = 1665;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1197 1462 LINE",
"1197 801 LINE SMOOTH",
"1197 750 OFFCURVE",
"1201 627 OFFCURVE",
"1208 516 OFFCURVE",
"1212 446 OFFCURVE",
"1212 446 QCURVE",
"1206 446 LINE",
"673 1462 LINE",
"157 1462 LINE",
"157 0 LINE",
"507 0 LINE",
"507 659 LINE SMOOTH",
"507 715 OFFCURVE",
"501 844 OFFCURVE",
"495 958 OFFCURVE",
"489 1030 OFFCURVE",
"489 1030 QCURVE",
"497 1030 LINE",
"1031 0 LINE",
"1550 0 LINE",
"1550 1462 LINE"
);
}
);
width = 1708;
}
);
note = N;
unicode = 004E;
},
{
glyphname = O;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1085 1485 OFFCURVE",
"782 1485 QCURVE SMOOTH",
"573 1485 OFFCURVE",
"281 1294 OFFCURVE",
"129 954 OFFCURVE",
"129 735 QCURVE SMOOTH",
"129 514 OFFCURVE",
"272 172 OFFCURVE",
"557 -20 OFFCURVE",
"770 -20 QCURVE SMOOTH",
"987 -20 OFFCURVE",
"1272 172 OFFCURVE",
"1413 512 OFFCURVE",
"1413 733 QCURVE SMOOTH",
"1413 1090 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"315 1253 OFFCURVE",
"582 1434 OFFCURVE",
"782 1434 QCURVE SMOOTH",
"1059 1434 OFFCURVE",
"1358 1067 OFFCURVE",
"1358 733 QCURVE SMOOTH",
"1358 526 OFFCURVE",
"1233 209 OFFCURVE",
"973 31 OFFCURVE",
"772 31 QCURVE SMOOTH",
"573 31 OFFCURVE",
"311 213 OFFCURVE",
"184 530 OFFCURVE",
"184 735 QCURVE SMOOTH",
"184 938 OFFCURVE"
);
}
);
width = 1544;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1291 1303 OFFCURVE",
"1003 1485 OFFCURVE",
"792 1485 QCURVE SMOOTH",
"572 1485 OFFCURVE",
"276 1294 OFFCURVE",
"126 958 OFFCURVE",
"126 735 QCURVE SMOOTH",
"126 512 OFFCURVE",
"271 170 OFFCURVE",
"564 -20 OFFCURVE",
"785 -20 QCURVE SMOOTH",
"1003 -20 OFFCURVE",
"1295 170 OFFCURVE",
"1443 510 OFFCURVE",
"1443 733 QCURVE SMOOTH",
"1443 967 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"368 1217 OFFCURVE",
"609 1378 OFFCURVE",
"792 1378 QCURVE SMOOTH",
"1054 1378 OFFCURVE",
"1318 1036 OFFCURVE",
"1318 733 QCURVE SMOOTH",
"1318 537 OFFCURVE",
"1205 246 OFFCURVE",
"970 84 OFFCURVE",
"785 84 QCURVE SMOOTH",
"603 84 OFFCURVE",
"366 246 OFFCURVE",
"251 539 OFFCURVE",
"251 733 QCURVE SMOOTH",
"251 926 OFFCURVE"
);
}
);
width = 1572;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1320 1298 OFFCURVE",
"1021 1485 OFFCURVE",
"802 1485 QCURVE SMOOTH",
"573 1485 OFFCURVE",
"271 1296 OFFCURVE",
"124 958 OFFCURVE",
"124 735 QCURVE SMOOTH",
"124 508 OFFCURVE",
"271 168 OFFCURVE",
"573 -20 OFFCURVE",
"800 -20 QCURVE SMOOTH",
"1019 -20 OFFCURVE",
"1320 168 OFFCURVE",
"1474 506 OFFCURVE",
"1474 733 QCURVE SMOOTH",
"1474 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"552 1323 OFFCURVE",
"802 1323 QCURVE SMOOTH",
"1050 1323 OFFCURVE",
"1279 1010 OFFCURVE",
"1279 733 QCURVE SMOOTH",
"1279 457 OFFCURVE",
"1048 139 OFFCURVE",
"800 139 QCURVE SMOOTH",
"552 139 OFFCURVE",
"319 457 OFFCURVE",
"319 733 QCURVE SMOOTH",
"319 1010 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 3 3 1 97 0 1 1 37 77 0 2 2 0 97 0 0 0 38 0 78 36 37 38 35 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1599;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1361 1298 OFFCURVE",
"1054 1485 OFFCURVE",
"816 1485 QCURVE SMOOTH",
"577 1485 OFFCURVE",
"268 1298 OFFCURVE",
"118 963 OFFCURVE",
"118 735 QCURVE SMOOTH",
"118 508 OFFCURVE",
"268 168 OFFCURVE",
"577 -20 OFFCURVE",
"814 -20 QCURVE SMOOTH",
"1052 -20 OFFCURVE",
"1361 168 OFFCURVE",
"1511 506 OFFCURVE",
"1511 733 QCURVE SMOOTH",
"1511 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"620 1227 OFFCURVE",
"816 1227 QCURVE SMOOTH",
"1013 1227 OFFCURVE",
"1185 963 OFFCURVE",
"1185 733 QCURVE SMOOTH",
"1185 504 OFFCURVE",
"1013 240 OFFCURVE",
"814 240 QCURVE SMOOTH",
"620 240 OFFCURVE",
"444 504 OFFCURVE",
"444 733 QCURVE SMOOTH",
"444 963 OFFCURVE"
);
}
);
width = 1630;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1380 1298 OFFCURVE",
"1067 1485 OFFCURVE",
"817 1485 QCURVE SMOOTH",
"569 1485 OFFCURVE",
"256 1298 OFFCURVE",
"104 963 OFFCURVE",
"104 735 QCURVE SMOOTH",
"104 508 OFFCURVE",
"254 168 OFFCURVE",
"569 -20 OFFCURVE",
"815 -20 QCURVE SMOOTH",
"1065 -20 OFFCURVE",
"1380 168 OFFCURVE",
"1525 506 OFFCURVE",
"1525 733 QCURVE SMOOTH",
"1525 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"655 1161 OFFCURVE",
"817 1161 QCURVE SMOOTH",
"978 1161 OFFCURVE",
"1110 932 OFFCURVE",
"1110 733 QCURVE SMOOTH",
"1110 535 OFFCURVE",
"978 309 OFFCURVE",
"815 309 QCURVE SMOOTH",
"657 309 OFFCURVE",
"520 535 OFFCURVE",
"520 733 QCURVE SMOOTH",
"520 932 OFFCURVE"
);
}
);
width = 1632;
}
);
note = O;
unicode = 004F;
},
{
glyphname = P;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"210 0 LINE",
"263 0 LINE",
"263 625 LINE",
"523 625 LINE SMOOTH",
"685 625 OFFCURVE",
"925 711 OFFCURVE",
"1056 905 OFFCURVE",
"1056 1063 QCURVE SMOOTH",
"1056 1276 OFFCURVE",
"796 1462 OFFCURVE",
"552 1462 QCURVE SMOOTH",
"210 1462 LINE"
);
},
{
closed = 1;
nodes = (
"1001 1247 OFFCURVE",
"1001 1061 QCURVE SMOOTH",
"1001 911 OFFCURVE",
"880 743 OFFCURVE",
"663 676 OFFCURVE",
"519 676 QCURVE SMOOTH",
"263 676 LINE",
"263 1411 LINE",
"544 1411 LINE SMOOTH",
"777 1411 OFFCURVE"
);
}
);
width = 1173;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"204 0 LINE",
"323 0 LINE",
"323 598 LINE",
"536 598 LINE SMOOTH",
"822 598 OFFCURVE",
"1095 838 OFFCURVE",
"1095 1049 QCURVE SMOOTH",
"1095 1462 OFFCURVE",
"569 1462 QCURVE SMOOTH",
"204 1462 LINE"
);
},
{
closed = 1;
nodes = (
"972 1206 OFFCURVE",
"972 1042 QCURVE SMOOTH",
"972 850 OFFCURVE",
"736 700 OFFCURVE",
"523 700 QCURVE SMOOTH",
"323 700 LINE",
"323 1358 LINE",
"556 1358 LINE SMOOTH",
"769 1358 OFFCURVE"
);
}
);
width = 1206;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"382 0 LINE",
"382 569 LINE",
"550 569 LINE SMOOTH",
"769 569 OFFCURVE",
"1025 700 OFFCURVE",
"1134 911 OFFCURVE",
"1134 1032 QCURVE SMOOTH",
"1134 1237 OFFCURVE",
"872 1462 OFFCURVE",
"585 1462 QCURVE SMOOTH",
"198 1462 LINE",
"198 0 LINE"
);
},
{
closed = 1;
nodes = (
"943 1165 OFFCURVE",
"943 1024 QCURVE SMOOTH",
"943 862 OFFCURVE",
"739 727 OFFCURVE",
"530 727 QCURVE SMOOTH",
"382 727 LINE",
"382 1305 LINE",
"569 1305 LINE SMOOTH",
"761 1305 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */\0120 4 0 1 2 4 1 103 5 1 3 3 0 95 0 0 0 31 77 0 2 2 32 2 78 13 12 16 14 12 20 13 20 17 37 32 6 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1239;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"184 0 LINE",
"493 0 LINE",
"493 520 LINE",
"626 520 LINE SMOOTH",
"839 520 OFFCURVE",
"1087 655 OFFCURVE",
"1194 877 OFFCURVE",
"1194 1006 QCURVE SMOOTH",
"1194 1219 OFFCURVE",
"934 1462 OFFCURVE",
"651 1462 QCURVE SMOOTH",
"184 1462 LINE"
);
},
{
closed = 1;
nodes = (
"880 995 QCURVE SMOOTH",
"880 879 OFFCURVE",
"727 774 OFFCURVE",
"596 774 QCURVE SMOOTH",
"493 774 LINE",
"493 1208 LINE",
"635 1208 LINE SMOOTH",
"880 1208 OFFCURVE"
);
}
);
width = 1286;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"157 0 LINE",
"552 0 LINE",
"552 485 LINE",
"663 485 LINE SMOOTH",
"819 485 OFFCURVE",
"1031 569 OFFCURVE",
"1161 715 OFFCURVE",
"1218 897 OFFCURVE",
"1218 997 QCURVE SMOOTH",
"1218 1221 OFFCURVE",
"941 1462 OFFCURVE",
"663 1462 QCURVE SMOOTH",
"157 1462 LINE"
);
},
{
closed = 1;
nodes = (
"823 1057 OFFCURVE",
"823 987 QCURVE SMOOTH",
"823 887 OFFCURVE",
"708 807 OFFCURVE",
"630 807 QCURVE SMOOTH",
"552 807 LINE",
"552 1143 LINE",
"655 1143 LINE SMOOTH",
"741 1143 OFFCURVE"
);
}
);
width = 1294;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Q;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1085 1485 OFFCURVE",
"782 1485 QCURVE SMOOTH",
"573 1485 OFFCURVE",
"281 1294 OFFCURVE",
"129 954 OFFCURVE",
"129 735 QCURVE SMOOTH",
"129 514 OFFCURVE",
"272 172 OFFCURVE",
"557 -20 OFFCURVE",
"770 -20 QCURVE SMOOTH",
"791 -20 OFFCURVE",
"827 -18 OFFCURVE",
"846 -16 QCURVE",
"1124 -348 LINE",
"1198 -348 LINE",
"907 -8 LINE",
"1077 20 OFFCURVE",
"1300 223 OFFCURVE",
"1413 539 OFFCURVE",
"1413 733 QCURVE SMOOTH",
"1413 1090 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"315 1253 OFFCURVE",
"582 1434 OFFCURVE",
"782 1434 QCURVE SMOOTH",
"1059 1434 OFFCURVE",
"1358 1067 OFFCURVE",
"1358 733 QCURVE SMOOTH",
"1358 526 OFFCURVE",
"1233 209 OFFCURVE",
"973 31 OFFCURVE",
"772 31 QCURVE SMOOTH",
"573 31 OFFCURVE",
"311 213 OFFCURVE",
"184 530 OFFCURVE",
"184 735 QCURVE SMOOTH",
"184 938 OFFCURVE"
);
}
);
width = 1544;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1291 1303 OFFCURVE",
"1003 1485 OFFCURVE",
"792 1485 QCURVE SMOOTH",
"572 1485 OFFCURVE",
"276 1294 OFFCURVE",
"126 958 OFFCURVE",
"126 735 QCURVE SMOOTH",
"126 512 OFFCURVE",
"271 170 OFFCURVE",
"564 -20 OFFCURVE",
"785 -20 QCURVE SMOOTH",
"802 -20 OFFCURVE",
"831 -18 OFFCURVE",
"847 -16 QCURVE",
"1130 -348 LINE",
"1297 -348 LINE",
"978 4 LINE",
"1132 41 OFFCURVE",
"1338 244 OFFCURVE",
"1443 547 OFFCURVE",
"1443 733 QCURVE SMOOTH",
"1443 967 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"368 1217 OFFCURVE",
"609 1378 OFFCURVE",
"792 1378 QCURVE SMOOTH",
"1054 1378 OFFCURVE",
"1318 1036 OFFCURVE",
"1318 733 QCURVE SMOOTH",
"1318 537 OFFCURVE",
"1205 246 OFFCURVE",
"970 84 OFFCURVE",
"785 84 QCURVE SMOOTH",
"603 84 OFFCURVE",
"366 246 OFFCURVE",
"251 539 OFFCURVE",
"251 733 QCURVE SMOOTH",
"251 926 OFFCURVE"
);
}
);
width = 1572;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1320 1298 OFFCURVE",
"1021 1485 OFFCURVE",
"802 1485 QCURVE SMOOTH",
"573 1485 OFFCURVE",
"271 1296 OFFCURVE",
"124 958 OFFCURVE",
"124 735 QCURVE SMOOTH",
"124 508 OFFCURVE",
"271 168 OFFCURVE",
"573 -20 OFFCURVE",
"800 -20 QCURVE SMOOTH",
"812 -20 OFFCURVE",
"839 -18 OFFCURVE",
"851 -18 QCURVE",
"1134 -348 LINE",
"1398 -348 LINE",
"1048 16 LINE",
"1259 86 OFFCURVE",
"1474 465 OFFCURVE",
"1474 733 QCURVE SMOOTH",
"1474 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"552 1323 OFFCURVE",
"802 1323 QCURVE SMOOTH",
"1050 1323 OFFCURVE",
"1279 1010 OFFCURVE",
"1279 733 QCURVE SMOOTH",
"1279 457 OFFCURVE",
"1048 139 OFFCURVE",
"800 139 QCURVE SMOOTH",
"552 139 OFFCURVE",
"319 457 OFFCURVE",
"319 733 QCURVE SMOOTH",
"319 1010 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\0123 1 1 3 1 76 0 0 1 0 134 0 4 4 2 97 0 2 2 37 77 0 3 3 1 97 0 1 1 38 1 78 36 37 38 65 20 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1599;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1361 1298 OFFCURVE",
"1054 1485 OFFCURVE",
"816 1485 QCURVE SMOOTH",
"577 1485 OFFCURVE",
"268 1298 OFFCURVE",
"118 963 OFFCURVE",
"118 735 QCURVE SMOOTH",
"118 508 OFFCURVE",
"268 168 OFFCURVE",
"577 -20 OFFCURVE",
"814 -20 QCURVE SMOOTH",
"837 -20 LINE",
"1105 -348 LINE",
"1502 -348 LINE",
"1150 45 LINE",
"1335 127 OFFCURVE",
"1511 487 OFFCURVE",
"1511 733 QCURVE SMOOTH",
"1511 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"620 1227 OFFCURVE",
"816 1227 QCURVE SMOOTH",
"1013 1227 OFFCURVE",
"1185 963 OFFCURVE",
"1185 733 QCURVE SMOOTH",
"1185 504 OFFCURVE",
"1013 240 OFFCURVE",
"814 240 QCURVE SMOOTH",
"620 240 OFFCURVE",
"444 504 OFFCURVE",
"444 733 QCURVE SMOOTH",
"444 963 OFFCURVE"
);
}
);
width = 1630;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1380 1298 OFFCURVE",
"1067 1485 OFFCURVE",
"817 1485 QCURVE SMOOTH",
"569 1485 OFFCURVE",
"256 1298 OFFCURVE",
"104 963 OFFCURVE",
"104 735 QCURVE SMOOTH",
"104 508 OFFCURVE",
"254 168 OFFCURVE",
"569 -20 OFFCURVE",
"815 -20 QCURVE SMOOTH",
"829 -20 LINE",
"1075 -348 LINE",
"1566 -348 LINE",
"1210 63 LINE",
"1378 156 OFFCURVE",
"1525 504 OFFCURVE",
"1525 733 QCURVE SMOOTH",
"1525 961 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"655 1161 OFFCURVE",
"817 1161 QCURVE SMOOTH",
"978 1161 OFFCURVE",
"1110 932 OFFCURVE",
"1110 733 QCURVE SMOOTH",
"1110 535 OFFCURVE",
"978 309 OFFCURVE",
"815 309 QCURVE SMOOTH",
"657 309 OFFCURVE",
"520 535 OFFCURVE",
"520 733 QCURVE SMOOTH",
"520 932 OFFCURVE"
);
}
);
width = 1632;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"210 0 LINE",
"263 0 LINE",
"263 655 LINE",
"669 655 LINE",
"1060 0 LINE",
"1128 0 LINE",
"726 670 LINE",
"882 711 OFFCURVE",
"1056 913 OFFCURVE",
"1056 1075 QCURVE SMOOTH",
"1056 1227 OFFCURVE",
"937 1395 OFFCURVE",
"704 1462 OFFCURVE",
"536 1462 QCURVE SMOOTH",
"210 1462 LINE"
);
},
{
closed = 1;
nodes = (
"896 1352 OFFCURVE",
"1001 1204 OFFCURVE",
"1001 1073 QCURVE SMOOTH",
"1001 897 OFFCURVE",
"775 707 OFFCURVE",
"597 707 QCURVE SMOOTH",
"263 707 LINE",
"263 1411 LINE",
"525 1411 LINE SMOOTH",
"685 1411 OFFCURVE"
);
}
);
width = 1181;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"204 0 LINE",
"323 0 LINE",
"323 631 LINE",
"671 631 LINE",
"1044 0 LINE",
"1185 0 LINE",
"784 664 LINE",
"917 705 OFFCURVE",
"1095 893 OFFCURVE",
"1095 1061 QCURVE SMOOTH",
"1095 1278 OFFCURVE",
"831 1462 OFFCURVE",
"569 1462 QCURVE SMOOTH",
"204 1462 LINE"
);
},
{
closed = 1;
nodes = (
"972 1225 OFFCURVE",
"972 1057 QCURVE SMOOTH",
"972 901 OFFCURVE",
"777 733 OFFCURVE",
"599 733 QCURVE SMOOTH",
"323 733 LINE",
"323 1356 LINE",
"558 1356 LINE SMOOTH",
"769 1356 OFFCURVE"
);
}
);
width = 1228;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"382 0 LINE",
"382 604 LINE",
"673 604 LINE",
"1027 0 LINE",
"1242 0 LINE",
"841 655 LINE",
"915 680 OFFCURVE",
"1048 774 OFFCURVE",
"1134 930 OFFCURVE",
"1134 1047 QCURVE SMOOTH",
"1134 1255 OFFCURVE",
"874 1462 OFFCURVE",
"601 1462 QCURVE SMOOTH",
"198 1462 LINE",
"198 0 LINE"
);
},
{
closed = 1;
nodes = (
"943 1182 OFFCURVE",
"943 1038 QCURVE SMOOTH",
"943 901 OFFCURVE",
"780 760 OFFCURVE",
"601 760 QCURVE SMOOTH",
"382 760 LINE",
"382 1303 LINE",
"591 1303 LINE SMOOTH",
"771 1303 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\0128 1 2 5 1 76 0 5 0 2 1 5 2 103 6 1 4 4 0 95 0 0 0 31 77 3 1 1 1 32 1 78 16 15 19 17 15 23 16 23 17 17 23 32 7 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1273;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"184 0 LINE",
"493 0 LINE",
"493 561 LINE",
"659 561 LINE",
"1007 0 LINE",
"1351 0 LINE",
"921 637 LINE",
"993 670 OFFCURVE",
"1118 774 OFFCURVE",
"1194 924 OFFCURVE",
"1194 1024 QCURVE SMOOTH",
"1194 1245 OFFCURVE",
"909 1462 OFFCURVE",
"610 1462 QCURVE SMOOTH",
"184 1462 LINE"
);
},
{
closed = 1;
nodes = (
"880 1120 OFFCURVE",
"880 1016 QCURVE SMOOTH",
"880 915 OFFCURVE",
"747 813 OFFCURVE",
"594 813 QCURVE SMOOTH",
"493 813 LINE",
"493 1208 LINE",
"587 1208 LINE SMOOTH",
"737 1208 OFFCURVE"
);
}
);
width = 1351;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"157 0 LINE",
"552 0 LINE",
"552 532 LINE",
"653 532 LINE",
"962 0 LINE",
"1410 0 LINE",
"984 637 LINE",
"1099 700 OFFCURVE",
"1232 897 OFFCURVE",
"1232 1030 QCURVE SMOOTH",
"1232 1462 OFFCURVE",
"636 1462 QCURVE SMOOTH",
"157 1462 LINE"
);
},
{
closed = 1;
nodes = (
"833 1081 OFFCURVE",
"833 1012 QCURVE SMOOTH",
"833 909 OFFCURVE",
"716 829 OFFCURVE",
"626 829 QCURVE SMOOTH",
"552 829 LINE",
"552 1163 LINE",
"630 1163 LINE SMOOTH",
"737 1163 OFFCURVE"
);
}
);
width = 1386;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"892 635 OFFCURVE",
"696 727 OFFCURVE",
"567 768 QCURVE SMOOTH",
"462 801 OFFCURVE",
"288 877 OFFCURVE",
"186 1008 OFFCURVE",
"186 1118 QCURVE SMOOTH",
"186 1229 OFFCURVE",
"298 1366 OFFCURVE",
"483 1432 OFFCURVE",
"591 1432 QCURVE SMOOTH",
"673 1432 OFFCURVE",
"847 1401 OFFCURVE",
"941 1360 QCURVE",
"964 1407 LINE",
"874 1446 OFFCURVE",
"692 1483 OFFCURVE",
"595 1483 QCURVE SMOOTH",
"466 1483 OFFCURVE",
"255 1401 OFFCURVE",
"130 1237 OFFCURVE",
"130 1114 QCURVE SMOOTH",
"130 991 OFFCURVE",
"235 848 OFFCURVE",
"419 758 OFFCURVE",
"538 721 QCURVE SMOOTH",
"663 680 OFFCURVE",
"847 598 OFFCURVE",
"945 471 OFFCURVE",
"945 371 QCURVE SMOOTH",
"945 252 OFFCURVE",
"827 102 OFFCURVE",
"630 31 OFFCURVE",
"515 31 QCURVE SMOOTH",
"390 31 OFFCURVE",
"196 70 OFFCURVE",
"114 98 QCURVE",
"114 39 LINE",
"188 16 OFFCURVE",
"370 -20 OFFCURVE",
"511 -20 QCURVE SMOOTH",
"644 -20 OFFCURVE",
"868 63 OFFCURVE",
"1001 238 OFFCURVE",
"1001 369 QCURVE SMOOTH",
"1001 489 OFFCURVE"
);
}
);
width = 1112;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"913 645 OFFCURVE",
"726 745 OFFCURVE",
"597 791 QCURVE SMOOTH",
"485 829 OFFCURVE",
"329 907 OFFCURVE",
"247 1020 OFFCURVE",
"247 1114 QCURVE SMOOTH",
"247 1243 OFFCURVE",
"438 1376 OFFCURVE",
"589 1376 QCURVE SMOOTH",
"765 1376 OFFCURVE",
"937 1303 QCURVE",
"978 1405 LINE",
"892 1442 OFFCURVE",
"700 1483 OFFCURVE",
"593 1483 QCURVE SMOOTH",
"458 1483 OFFCURVE",
"247 1397 OFFCURVE",
"126 1233 OFFCURVE",
"126 1112 QCURVE SMOOTH",
"126 995 OFFCURVE",
"221 842 OFFCURVE",
"397 741 OFFCURVE",
"520 698 QCURVE SMOOTH",
"649 655 OFFCURVE",
"815 571 OFFCURVE",
"894 459 OFFCURVE",
"894 373 QCURVE SMOOTH",
"894 229 OFFCURVE",
"683 84 OFFCURVE",
"516 84 QCURVE SMOOTH",
"395 84 OFFCURVE",
"188 131 OFFCURVE",
"110 162 QCURVE",
"110 45 LINE",
"180 16 OFFCURVE",
"376 -20 OFFCURVE",
"507 -20 QCURVE SMOOTH",
"655 -20 OFFCURVE",
"884 72 OFFCURVE",
"1015 250 OFFCURVE",
"1015 381 QCURVE SMOOTH",
"1015 498 OFFCURVE"
);
}
);
width = 1118;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"935 657 OFFCURVE",
"757 766 OFFCURVE",
"628 813 QCURVE SMOOTH",
"510 856 OFFCURVE",
"370 936 OFFCURVE",
"309 1034 OFFCURVE",
"309 1108 QCURVE SMOOTH",
"309 1204 OFFCURVE",
"448 1321 OFFCURVE",
"585 1321 QCURVE SMOOTH",
"679 1321 OFFCURVE",
"860 1276 OFFCURVE",
"935 1243 QCURVE",
"993 1401 LINE",
"909 1438 OFFCURVE",
"708 1483 OFFCURVE",
"589 1483 QCURVE SMOOTH",
"450 1483 OFFCURVE",
"241 1393 OFFCURVE",
"122 1225 OFFCURVE",
"122 1110 QCURVE SMOOTH",
"122 940 OFFCURVE",
"311 743 OFFCURVE",
"499 676 QCURVE SMOOTH",
"630 627 OFFCURVE",
"782 545 OFFCURVE",
"843 446 OFFCURVE",
"843 375 QCURVE SMOOTH",
"843 266 OFFCURVE",
"675 139 OFFCURVE",
"514 139 QCURVE SMOOTH",
"397 139 OFFCURVE",
"178 193 OFFCURVE",
"104 225 QCURVE",
"104 49 LINE",
"174 16 OFFCURVE",
"383 -20 OFFCURVE",
"505 -20 QCURVE SMOOTH",
"745 -20 OFFCURVE",
"1028 197 OFFCURVE",
"1028 391 QCURVE SMOOTH",
"1028 506 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01227 1 3 2 28 7 2 1 3 6 1 0 1 3 76 0 3 3 2 97 0 2 2 37 77 0 1 1 0 97 0 0 0 38 0 78 37 44 37 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1124;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"960 676 OFFCURVE",
"803 791 OFFCURVE",
"690 844 QCURVE SMOOTH",
"553 909 OFFCURVE",
"413 999 OFFCURVE",
"413 1077 QCURVE SMOOTH",
"413 1143 OFFCURVE",
"508 1225 OFFCURVE",
"596 1225 QCURVE SMOOTH",
"680 1225 OFFCURVE",
"839 1180 OFFCURVE",
"940 1139 QCURVE",
"1040 1380 LINE",
"925 1430 OFFCURVE",
"721 1483 OFFCURVE",
"606 1483 QCURVE SMOOTH",
"377 1483 OFFCURVE",
"110 1264 OFFCURVE",
"110 1067 QCURVE SMOOTH",
"110 967 OFFCURVE",
"180 823 OFFCURVE",
"289 723 OFFCURVE",
"407 655 OFFCURVE",
"459 631 QCURVE SMOOTH",
"540 592 OFFCURVE",
"667 524 OFFCURVE",
"743 446 OFFCURVE",
"743 391 QCURVE SMOOTH",
"743 324 OFFCURVE",
"647 236 OFFCURVE",
"532 236 QCURVE SMOOTH",
"422 236 OFFCURVE",
"198 311 OFFCURVE",
"94 356 QCURVE",
"94 68 LINE",
"276 -20 OFFCURVE",
"508 -20 QCURVE SMOOTH",
"766 -20 OFFCURVE",
"1046 211 OFFCURVE",
"1046 406 QCURVE SMOOTH",
"1046 520 OFFCURVE"
);
}
);
width = 1128;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1034 713 OFFCURVE",
"885 823 OFFCURVE",
"778 872 QCURVE SMOOTH",
"670 922 OFFCURVE",
"545 985 OFFCURVE",
"491 1038 OFFCURVE",
"491 1073 QCURVE SMOOTH",
"491 1114 OFFCURVE",
"561 1167 OFFCURVE",
"639 1167 QCURVE SMOOTH",
"717 1167 OFFCURVE",
"899 1116 OFFCURVE",
"993 1073 QCURVE",
"1114 1378 LINE",
"1024 1417 OFFCURVE",
"795 1483 OFFCURVE",
"651 1483 QCURVE SMOOTH",
"487 1483 OFFCURVE",
"240 1386 OFFCURVE",
"100 1196 OFFCURVE",
"100 1055 QCURVE SMOOTH",
"100 930 OFFCURVE",
"186 766 OFFCURVE",
"346 651 OFFCURVE",
"455 602 QCURVE SMOOTH",
"598 537 OFFCURVE",
"719 467 OFFCURVE",
"719 410 QCURVE SMOOTH",
"719 362 OFFCURVE",
"637 301 OFFCURVE",
"549 301 QCURVE SMOOTH",
"450 301 OFFCURVE",
"209 365 OFFCURVE",
"90 424 QCURVE",
"90 72 LINE",
"160 39 OFFCURVE",
"291 -2 OFFCURVE",
"440 -20 OFFCURVE",
"541 -20 QCURVE SMOOTH",
"741 -20 OFFCURVE",
"993 113 OFFCURVE",
"1114 324 OFFCURVE",
"1114 444 QCURVE SMOOTH",
"1114 557 OFFCURVE"
);
}
);
width = 1181;
}
);
note = S;
unicode = 0053;
},
{
glyphname = T;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1030 1411 LINE",
"1030 1462 LINE",
"4 1462 LINE",
"4 1411 LINE",
"489 1411 LINE",
"489 0 LINE",
"543 0 LINE",
"543 1411 LINE"
);
}
);
width = 1034;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1073 1356 LINE",
"1073 1462 LINE",
"12 1462 LINE",
"12 1356 LINE",
"483 1356 LINE",
"483 0 LINE",
"602 0 LINE",
"602 1356 LINE"
);
}
);
width = 1085;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"20 1462 LINE",
"20 1300 LINE",
"477 1300 LINE",
"477 0 LINE",
"661 0 LINE",
"661 1300 LINE",
"1116 1300 LINE",
"1116 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0122 1 0 0 3 95 0 3 3 31 77 0 1 1 32 1 78 17 17 17 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1138;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1144 1204 LINE",
"1144 1462 LINE",
"40 1462 LINE",
"40 1204 LINE",
"437 1204 LINE",
"437 0 LINE",
"747 0 LINE",
"747 1204 LINE"
);
}
);
width = 1185;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1159 1139 LINE",
"1159 1462 LINE",
"51 1462 LINE",
"51 1139 LINE",
"407 1139 LINE",
"407 0 LINE",
"803 0 LINE",
"803 1139 LINE"
);
}
);
width = 1210;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1212 500 LINE SMOOTH",
"1212 266 OFFCURVE",
"946 31 OFFCURVE",
"729 31 QCURVE SMOOTH",
"499 31 OFFCURVE",
"247 279 OFFCURVE",
"247 524 QCURVE SMOOTH",
"247 1462 LINE",
"194 1462 LINE",
"194 520 LINE SMOOTH",
"194 254 OFFCURVE",
"473 -20 OFFCURVE",
"726 -20 QCURVE SMOOTH",
"884 -20 OFFCURVE",
"1128 96 OFFCURVE",
"1265 334 OFFCURVE",
"1265 516 QCURVE SMOOTH",
"1265 1462 LINE",
"1212 1462 LINE"
);
}
);
width = 1458;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1171 508 LINE SMOOTH",
"1171 307 OFFCURVE",
"948 84 OFFCURVE",
"741 84 QCURVE SMOOTH",
"528 84 OFFCURVE",
"307 307 OFFCURVE",
"307 520 QCURVE SMOOTH",
"307 1462 LINE",
"188 1462 LINE",
"188 520 LINE SMOOTH",
"188 266 OFFCURVE",
"471 -20 OFFCURVE",
"733 -20 QCURVE SMOOTH",
"997 -20 OFFCURVE",
"1288 266 OFFCURVE",
"1288 516 QCURVE SMOOTH",
"1288 1462 LINE",
"1171 1462 LINE"
);
}
);
width = 1478;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1128 350 OFFCURVE",
"950 139 OFFCURVE",
"751 139 QCURVE SMOOTH",
"559 139 OFFCURVE",
"368 336 OFFCURVE",
"368 514 QCURVE SMOOTH",
"368 1462 LINE",
"184 1462 LINE",
"184 520 LINE SMOOTH",
"184 276 OFFCURVE",
"467 -20 OFFCURVE",
"741 -20 QCURVE SMOOTH",
"934 -20 OFFCURVE",
"1188 121 OFFCURVE",
"1310 365 OFFCURVE",
"1310 516 QCURVE SMOOTH",
"1310 1462 LINE",
"1128 1462 LINE",
"1128 516 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0122 1 0 0 31 77 0 3 3 1 97 0 1 1 38 1 78 35 19 36 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1497;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1065 569 LINE SMOOTH",
"1065 399 OFFCURVE",
"928 240 OFFCURVE",
"776 240 QCURVE SMOOTH",
"631 240 OFFCURVE",
"483 385 OFFCURVE",
"483 567 QCURVE SMOOTH",
"483 1462 LINE",
"174 1462 LINE",
"174 520 LINE SMOOTH",
"174 276 OFFCURVE",
"477 -20 OFFCURVE",
"768 -20 QCURVE SMOOTH",
"971 -20 OFFCURVE",
"1241 121 OFFCURVE",
"1374 365 OFFCURVE",
"1374 516 QCURVE SMOOTH",
"1374 1462 LINE",
"1065 1462 LINE"
);
}
);
width = 1548;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1005 606 LINE SMOOTH",
"1005 451 OFFCURVE",
"897 309 OFFCURVE",
"776 309 QCURVE SMOOTH",
"663 309 OFFCURVE",
"546 449 OFFCURVE",
"546 604 QCURVE SMOOTH",
"546 1462 LINE",
"149 1462 LINE",
"149 573 LINE SMOOTH",
"149 289 OFFCURVE",
"466 -20 OFFCURVE",
"770 -20 QCURVE SMOOTH",
"1085 -20 OFFCURVE",
"1400 305 OFFCURVE",
"1400 582 QCURVE SMOOTH",
"1400 1462 LINE",
"1005 1462 LINE"
);
}
);
width = 1550;
}
);
note = U;
unicode = 0055;
},
{
glyphname = V;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"655 293 LINE SMOOTH",
"629 223 OFFCURVE",
"594 123 OFFCURVE",
"578 76 QCURVE",
"561 123 OFFCURVE",
"520 233 OFFCURVE",
"500 293 QCURVE",
"57 1462 LINE",
"0 1462 LINE",
"551 0 LINE",
"602 0 LINE",
"1153 1462 LINE",
"1096 1462 LINE"
);
}
);
width = 1153;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"680 410 LINE SMOOTH",
"651 330 OFFCURVE",
"610 199 OFFCURVE",
"596 139 QCURVE",
"582 199 OFFCURVE",
"539 334 OFFCURVE",
"512 408 QCURVE SMOOTH",
"125 1462 LINE",
"0 1462 LINE",
"537 0 LINE",
"655 0 LINE",
"1192 1462 LINE",
"1065 1462 LINE"
);
}
);
width = 1191;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"674 436 OFFCURVE",
"629 276 OFFCURVE",
"614 205 QCURVE",
"598 276 OFFCURVE",
"555 434 OFFCURVE",
"522 524 QCURVE SMOOTH",
"193 1462 LINE",
"0 1462 LINE",
"522 0 LINE",
"707 0 LINE",
"1229 1462 LINE",
"1034 1462 LINE",
"707 528 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0129 1 1 0 1 76 2 1 0 0 31 77 0 1 1 32 1 78 17 17 16 3 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1228;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"741 592 LINE SMOOTH",
"733 569 OFFCURVE",
"702 449 OFFCURVE",
"672 315 OFFCURVE",
"666 270 QCURVE",
"659 315 OFFCURVE",
"627 449 OFFCURVE",
"594 569 OFFCURVE",
"588 592 QCURVE SMOOTH",
"313 1462 LINE",
"0 1462 LINE",
"496 0 LINE",
"834 0 LINE",
"1331 1462 LINE",
"1018 1462 LINE"
);
}
);
width = 1331;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"776 717 LINE SMOOTH",
"764 676 OFFCURVE",
"737 547 OFFCURVE",
"715 418 OFFCURVE",
"711 377 QCURVE",
"709 418 OFFCURVE",
"682 549 OFFCURVE",
"653 680 OFFCURVE",
"643 721 QCURVE SMOOTH",
"444 1462 LINE",
"0 1462 LINE",
"477 0 LINE",
"942 0 LINE",
"1421 1462 LINE",
"979 1462 LINE"
);
}
);
width = 1421;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1347 344 LINE SMOOTH",
"1324 264 OFFCURVE",
"1300 160 OFFCURVE",
"1288 98 QCURVE",
"1273 160 OFFCURVE",
"1247 264 OFFCURVE",
"1224 344 QCURVE SMOOTH",
"911 1462 LINE",
"860 1462 LINE",
"554 350 LINE SMOOTH",
"532 274 OFFCURVE",
"505 164 OFFCURVE",
"491 106 QCURVE",
"477 164 OFFCURVE",
"446 272 OFFCURVE",
"425 348 QCURVE SMOOTH",
"122 1462 LINE",
"67 1462 LINE",
"466 0 LINE",
"516 0 LINE",
"849 1237 LINE SMOOTH",
"860 1272 OFFCURVE",
"872 1331 OFFCURVE",
"882 1382 QCURVE",
"894 1327 OFFCURVE",
"917 1249 OFFCURVE",
"933 1192 QCURVE SMOOTH",
"1263 0 LINE",
"1312 0 LINE",
"1718 1462 LINE",
"1662 1462 LINE"
);
}
);
width = 1779;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1405 457 LINE SMOOTH",
"1380 369 OFFCURVE",
"1347 227 OFFCURVE",
"1339 160 QCURVE",
"1327 225 OFFCURVE",
"1294 371 OFFCURVE",
"1266 459 QCURVE SMOOTH",
"975 1462 LINE",
"856 1462 LINE",
"573 465 LINE SMOOTH",
"549 381 OFFCURVE",
"516 233 OFFCURVE",
"504 164 QCURVE",
"491 231 OFFCURVE",
"457 373 OFFCURVE",
"434 459 QCURVE SMOOTH",
"170 1462 LINE",
"47 1462 LINE",
"438 0 LINE",
"557 0 LINE",
"862 1094 LINE SMOOTH",
"881 1159 OFFCURVE",
"907 1274 OFFCURVE",
"913 1315 QCURVE",
"934 1227 OFFCURVE",
"975 1075 QCURVE SMOOTH",
"1282 0 LINE",
"1401 0 LINE",
"1798 1462 LINE",
"1675 1462 LINE"
);
}
);
width = 1843;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1435 475 OFFCURVE",
"1396 297 OFFCURVE",
"1388 221 QCURVE",
"1378 291 OFFCURVE",
"1337 479 OFFCURVE",
"1308 573 QCURVE SMOOTH",
"1040 1462 LINE",
"849 1462 LINE",
"591 580 LINE SMOOTH",
"565 489 OFFCURVE",
"524 301 OFFCURVE",
"513 221 QCURVE",
"503 299 OFFCURVE",
"468 475 OFFCURVE",
"444 569 QCURVE SMOOTH",
"217 1462 LINE",
"24 1462 LINE",
"411 0 LINE",
"597 0 LINE",
"874 952 LINE SMOOTH",
"901 1047 OFFCURVE",
"942 1221 OFFCURVE",
"944 1247 QCURVE",
"946 1229 OFFCURVE",
"968 1137 OFFCURVE",
"999 1016 OFFCURVE",
"1017 958 QCURVE SMOOTH",
"1302 0 LINE",
"1488 0 LINE",
"1877 1462 LINE",
"1685 1462 LINE",
"1460 571 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01228 19 8 3 1 0 1 76 4 3 2 0 0 31 77 2 1 1 1 32 1 78 24 17 25 17 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1904;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1489 664 LINE SMOOTH",
"1479 614 OFFCURVE",
"1448 473 OFFCURVE",
"1423 332 OFFCURVE",
"1417 281 QCURVE",
"1411 330 OFFCURVE",
"1386 473 OFFCURVE",
"1360 606 OFFCURVE",
"1350 643 QCURVE SMOOTH",
"1137 1462 LINE",
"844 1462 LINE",
"631 643 LINE SMOOTH",
"621 606 OFFCURVE",
"594 473 OFFCURVE",
"569 332 OFFCURVE",
"563 281 QCURVE",
"557 330 OFFCURVE",
"532 473 OFFCURVE",
"504 616 OFFCURVE",
"492 664 QCURVE SMOOTH",
"305 1462 LINE",
"0 1462 LINE",
"373 0 LINE",
"725 0 LINE",
"922 766 LINE SMOOTH",
"928 791 OFFCURVE",
"948 883 OFFCURVE",
"969 987 OFFCURVE",
"987 1081 OFFCURVE",
"989 1110 QCURVE",
"991 1081 OFFCURVE",
"1010 987 OFFCURVE",
"1032 881 OFFCURVE",
"1051 791 OFFCURVE",
"1057 768 QCURVE SMOOTH",
"1255 0 LINE",
"1608 0 LINE",
"1980 1462 LINE",
"1675 1462 LINE"
);
}
);
width = 1980;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1554 727 LINE SMOOTH",
"1546 690 OFFCURVE",
"1517 545 OFFCURVE",
"1488 393 OFFCURVE",
"1482 342 QCURVE",
"1476 401 OFFCURVE",
"1447 561 OFFCURVE",
"1414 725 OFFCURVE",
"1384 866 OFFCURVE",
"1373 909 QCURVE SMOOTH",
"1249 1462 LINE",
"882 1462 LINE",
"753 909 LINE SMOOTH",
"743 864 OFFCURVE",
"712 725 OFFCURVE",
"679 563 OFFCURVE",
"653 403 OFFCURVE",
"644 342 QCURVE",
"640 379 OFFCURVE",
"620 487 OFFCURVE",
"597 602 OFFCURVE",
"577 702 OFFCURVE",
"571 729 QCURVE SMOOTH",
"411 1462 LINE",
"30 1462 LINE",
"392 0 LINE",
"859 0 LINE",
"1001 637 LINE SMOOTH",
"1005 655 OFFCURVE",
"1023 741 OFFCURVE",
"1044 852 OFFCURVE",
"1062 958 OFFCURVE",
"1066 995 QCURVE",
"1070 958 OFFCURVE",
"1087 852 OFFCURVE",
"1109 741 OFFCURVE",
"1126 655 OFFCURVE",
"1130 637 QCURVE SMOOTH",
"1269 0 LINE",
"1736 0 LINE",
"2096 1462 LINE",
"1716 1462 LINE"
);
}
);
width = 2127;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1012 1462 LINE",
"948 1462 LINE",
"526 799 LINE",
"109 1462 LINE",
"45 1462 LINE",
"490 758 LINE",
"-6 0 LINE",
"57 0 LINE",
"524 717 LINE",
"985 0 LINE",
"1049 0 LINE",
"561 758 LINE"
);
}
);
width = 1042;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1085 1462 LINE",
"954 1462 LINE",
"565 844 LINE",
"176 1462 LINE",
"41 1462 LINE",
"492 760 LINE",
"0 0 LINE",
"129 0 LINE",
"561 676 LINE",
"983 0 LINE",
"1120 0 LINE",
"633 762 LINE"
);
}
);
width = 1122;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"602 889 LINE",
"244 1462 LINE",
"39 1462 LINE",
"493 762 LINE",
"8 0 LINE",
"203 0 LINE",
"596 635 LINE",
"983 0 LINE",
"1192 0 LINE",
"704 766 LINE",
"1157 1462 LINE",
"962 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01210 7 4 1 4 0 2 1 76 4 3 2 2 2 31 77 1 1 0 0 32 0 78 0 0 0 11 0 11 18 18 18 5 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1200;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1331 1462 LINE",
"997 1462 LINE",
"688 936 LINE",
"373 1462 LINE",
"31 1462 LINE",
"485 754 LINE",
"0 0 LINE",
"332 0 LINE",
"672 553 LINE",
"1012 0 LINE",
"1366 0 LINE",
"872 737 LINE"
);
}
);
width = 1366;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1440 1462 LINE",
"989 1462 LINE",
"735 1010 LINE",
"471 1462 LINE",
"33 1462 LINE",
"489 748 LINE",
"4 0 LINE",
"450 0 LINE",
"733 457 LINE",
"1018 0 LINE",
"1474 0 LINE",
"977 717 LINE"
);
}
);
width = 1480;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"0 1462 LINE",
"494 555 LINE",
"494 0 LINE",
"547 0 LINE",
"547 563 LINE",
"1034 1462 LINE",
"973 1462 LINE",
"518 616 LINE",
"61 1462 LINE"
);
}
);
width = 1034;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"0 1462 LINE",
"492 557 LINE",
"492 0 LINE",
"610 0 LINE",
"610 565 LINE",
"1098 1462 LINE",
"967 1462 LINE",
"549 680 LINE",
"131 1462 LINE"
);
}
);
width = 1097;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"487 0 LINE",
"672 0 LINE",
"672 567 LINE",
"1159 1462 LINE",
"961 1462 LINE",
"580 743 LINE",
"201 1462 LINE",
"0 1462 LINE",
"487 559 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0128 5 2 3 2 0 1 76 1 1 0 0 31 77 0 2 2 32 2 78 18 18 16 3 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1159;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"0 1462 LINE",
"485 559 LINE",
"485 0 LINE",
"793 0 LINE",
"793 569 LINE",
"1278 1462 LINE",
"944 1462 LINE",
"639 860 LINE",
"336 1462 LINE"
);
}
);
width = 1277;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"0 1462 LINE",
"481 559 LINE",
"481 0 LINE",
"879 0 LINE",
"879 571 LINE",
"1360 1462 LINE",
"932 1462 LINE",
"680 920 LINE",
"430 1462 LINE"
);
}
);
width = 1359;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Z;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"149 51 LINE",
"1077 1425 LINE",
"1077 1462 LINE",
"130 1462 LINE",
"130 1411 LINE",
"1001 1411 LINE",
"73 37 LINE",
"73 0 LINE",
"1101 0 LINE",
"1101 51 LINE"
);
}
);
width = 1183;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"225 106 LINE",
"1072 1374 LINE",
"1072 1462 LINE",
"116 1462 LINE",
"116 1356 LINE",
"925 1356 LINE",
"75 88 LINE",
"75 0 LINE",
"1097 0 LINE",
"1097 106 LINE"
);
}
);
width = 1177;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1070 1462 LINE",
"102 1462 LINE",
"102 1298 LINE",
"847 1298 LINE",
"77 139 LINE",
"77 0 LINE",
"1091 0 LINE",
"1091 164 LINE",
"300 164 LINE",
"1070 1323 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0129 1 2 3 4 1 1 0 2 76 0 2 2 3 95 0 3 3 31 77 0 0 0 1 95 0 1 1 32 1 78 17 18 17 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"418 256 LINE",
"1118 1262 LINE",
"1118 1462 LINE",
"67 1462 LINE",
"67 1206 LINE",
"749 1206 LINE",
"49 201 LINE",
"49 0 LINE",
"1136 0 LINE",
"1136 256 LINE"
);
}
);
width = 1185;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 319 LINE",
"1183 1219 LINE",
"1183 1462 LINE",
"75 1462 LINE",
"75 1143 LINE",
"694 1143 LINE",
"61 244 LINE",
"61 0 LINE",
"1200 0 LINE",
"1200 319 LINE"
);
}
);
width = 1251;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = bracketleft;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"231 -272 LINE",
"231 1411 LINE",
"590 1411 LINE",
"590 1462 LINE",
"180 1462 LINE",
"180 -324 LINE",
"590 -324 LINE",
"590 -272 LINE"
);
}
);
width = 641;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"287 -225 LINE",
"287 1364 LINE",
"606 1364 LINE",
"606 1462 LINE",
"172 1462 LINE",
"172 -324 LINE",
"606 -324 LINE",
"606 -225 LINE"
);
}
);
width = 657;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"622 1315 LINE",
"622 1462 LINE",
"163 1462 LINE",
"163 -324 LINE",
"622 -324 LINE",
"622 -176 LINE",
"339 -176 LINE",
"339 1315 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0120 0 0 1 0 1 99 0 3 3 2 95 0 2 2 31 3 78 17 17 17 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 673;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"403 -113 LINE",
"403 1251 LINE",
"626 1251 LINE",
"626 1462 LINE",
"143 1462 LINE",
"143 -324 LINE",
"626 -324 LINE",
"626 -113 LINE"
);
}
);
width = 677;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"433 -90 LINE",
"433 1249 LINE",
"616 1249 LINE",
"616 1503 LINE",
"116 1503 LINE",
"116 -344 LINE",
"616 -344 LINE",
"616 -90 LINE"
);
}
);
width = 663;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = backslash;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"575 0 LINE",
"632 0 LINE",
"83 1462 LINE",
"26 1462 LINE"
);
}
);
width = 659;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"569 0 LINE",
"688 0 LINE",
"139 1462 LINE",
"24 1462 LINE"
);
}
);
width = 710;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"196 1462 LINE",
"20 1462 LINE",
"565 0 LINE",
"743 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 0 0 31 77 2 1 1 1 32 1 78 0 0 0 3 0 3 17 3 8 23 \012CALL[ ]	/* CallFunction */";
};
width = 761;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"557 0 LINE",
"833 0 LINE",
"288 1462 LINE",
"12 1462 LINE"
);
}
);
width = 845;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"551 -20 LINE",
"897 -20 LINE",
"352 1483 LINE",
"6 1483 LINE"
);
}
);
width = 905;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = bracketright;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"461 -324 LINE",
"461 1462 LINE",
"51 1462 LINE",
"51 1411 LINE",
"409 1411 LINE",
"409 -272 LINE",
"51 -272 LINE",
"51 -324 LINE"
);
}
);
width = 641;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"485 -324 LINE",
"485 1462 LINE",
"51 1462 LINE",
"51 1364 LINE",
"373 1364 LINE",
"373 -225 LINE",
"51 -225 LINE",
"51 -324 LINE"
);
}
);
width = 657;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"51 1462 LINE",
"51 1315 LINE",
"334 1315 LINE",
"334 -176 LINE",
"51 -176 LINE",
"51 -324 LINE",
"510 -324 LINE",
"510 1462 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0120 1 0 0 1 0 99 0 2 2 3 95 0 3 3 31 2 78 17 17 17 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 673;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"534 -324 LINE",
"534 1462 LINE",
"51 1462 LINE",
"51 1251 LINE",
"274 1251 LINE",
"274 -113 LINE",
"51 -113 LINE",
"51 -324 LINE"
);
}
);
width = 677;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"547 -344 LINE",
"547 1503 LINE",
"47 1503 LINE",
"47 1249 LINE",
"229 1249 LINE",
"229 -90 LINE",
"47 -90 LINE",
"47 -344 LINE"
);
}
);
width = 663;
}
);
note = bracketright;
unicode = 005D;
},
{
glyphname = asciicircum;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"598 1405 LINE",
"1014 569 LINE",
"1073 569 LINE",
"624 1473 LINE",
"577 1473 LINE",
"94 569 LINE",
"153 569 LINE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"582 1343 LINE",
"975 557 LINE",
"1083 557 LINE",
"618 1473 LINE",
"545 1473 LINE",
"86 557 LINE",
"195 557 LINE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1093 547 LINE",
"614 1473 LINE",
"511 1473 LINE",
"77 547 LINE",
"237 547 LINE",
"564 1282 LINE",
"933 547 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 1 133 2 1 0 0 118 17 17 17 3 8 25 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"563 1163 LINE",
"885 520 LINE",
"1124 520 LINE",
"629 1470 LINE",
"485 1470 LINE",
"47 520 LINE",
"283 520 LINE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"519 1079 LINE",
"807 502 LINE",
"1102 502 LINE",
"594 1468 LINE",
"424 1468 LINE",
"-16 502 LINE",
"271 502 LINE"
);
}
);
width = 1075;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = underscore;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-4 -186 LINE",
"-4 -238 LINE",
"805 -238 LINE",
"805 -186 LINE"
);
}
);
width = 800;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-4 -184 LINE",
"-4 -276 LINE",
"860 -276 LINE",
"860 -184 LINE"
);
}
);
width = 856;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"914 -315 LINE",
"914 -184 LINE",
"-4 -184 LINE",
"-4 -315 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 87 0 0 0 1 95 0 1 0 1 79 17 16 2 8 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 909;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-4 -184 LINE",
"-4 -324 LINE",
"846 -324 LINE",
"846 -184 LINE"
);
}
);
width = 841;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-4 -133 LINE",
"-4 -379 LINE",
"1028 -379 LINE",
"1028 -133 LINE"
);
}
);
width = 1024;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = grave;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"81 1554 LINE",
"134 1485 OFFCURVE",
"302 1309 OFFCURVE",
"384 1241 QCURVE",
"427 1241 LINE",
"427 1253 LINE",
"380 1294 OFFCURVE",
"271 1409 OFFCURVE",
"171 1524 OFFCURVE",
"142 1569 QCURVE",
"81 1569 LINE"
);
}
);
width = 509;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"81 1552 LINE",
"110 1509 OFFCURVE",
"212 1395 OFFCURVE",
"327 1282 OFFCURVE",
"378 1241 QCURVE",
"460 1241 LINE",
"460 1260 LINE",
"421 1298 OFFCURVE",
"329 1409 OFFCURVE",
"245 1524 OFFCURVE",
"218 1569 QCURVE",
"81 1569 LINE"
);
}
);
width = 542;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"106 1511 OFFCURVE",
"206 1395 OFFCURVE",
"325 1278 OFFCURVE",
"372 1241 QCURVE",
"493 1241 LINE",
"493 1266 LINE",
"462 1303 OFFCURVE",
"386 1411 OFFCURVE",
"319 1524 OFFCURVE",
"296 1569 QCURVE",
"81 1569 LINE",
"81 1548 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 21 values pushed */\01211 5 2 1 0 1 76 0 0 1 0 133 0 1 1 118 21 16 2 8 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 575;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"81 1548 LINE",
"110 1520 OFFCURVE",
"204 1438 OFFCURVE",
"312 1348 OFFCURVE",
"417 1268 OFFCURVE",
"456 1241 QCURVE",
"659 1241 LINE",
"659 1268 LINE",
"626 1307 OFFCURVE",
"538 1411 OFFCURVE",
"454 1524 OFFCURVE",
"423 1569 QCURVE",
"81 1569 LINE"
);
}
);
width = 741;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"81 1548 LINE",
"118 1520 OFFCURVE",
"231 1436 OFFCURVE",
"355 1348 OFFCURVE",
"472 1268 OFFCURVE",
"513 1241 QCURVE",
"773 1241 LINE",
"773 1270 LINE",
"740 1307 OFFCURVE",
"642 1413 OFFCURVE",
"546 1524 OFFCURVE",
"511 1569 QCURVE",
"81 1569 LINE"
);
}
);
width = 856;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"280 1057 OFFCURVE",
"198 1020 QCURVE",
"217 967 LINE",
"305 1012 OFFCURVE",
"458 1049 OFFCURVE",
"540 1049 QCURVE SMOOTH",
"684 1049 OFFCURVE",
"823 887 OFFCURVE",
"823 702 QCURVE SMOOTH",
"823 614 LINE",
"612 602 LINE SMOOTH",
"370 588 OFFCURVE",
"98 426 OFFCURVE",
"98 264 QCURVE SMOOTH",
"98 135 OFFCURVE",
"262 -20 OFFCURVE",
"426 -20 QCURVE SMOOTH",
"592 -20 OFFCURVE",
"776 117 OFFCURVE",
"819 211 QCURVE",
"823 211 LINE",
"831 0 LINE",
"876 0 LINE",
"876 717 LINE SMOOTH",
"876 918 OFFCURVE",
"708 1100 OFFCURVE",
"540 1100 QCURVE SMOOTH",
"450 1100 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"819 264 OFFCURVE",
"630 31 OFFCURVE",
"426 31 QCURVE SMOOTH",
"295 31 OFFCURVE",
"155 156 OFFCURVE",
"155 264 QCURVE SMOOTH",
"155 408 OFFCURVE",
"407 543 OFFCURVE",
"616 553 QCURVE SMOOTH",
"823 563 LINE",
"823 451 LINE SMOOTH"
);
}
);
width = 1046;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"282 1059 OFFCURVE",
"207 1020 QCURVE",
"243 926 LINE",
"321 967 OFFCURVE",
"477 1010 OFFCURVE",
"561 1010 QCURVE SMOOTH",
"686 1010 OFFCURVE",
"815 877 OFFCURVE",
"815 715 QCURVE SMOOTH",
"815 639 LINE",
"616 629 LINE SMOOTH",
"360 618 OFFCURVE",
"96 446 OFFCURVE",
"96 285 QCURVE SMOOTH",
"96 135 OFFCURVE",
"278 -20 OFFCURVE",
"434 -20 QCURVE SMOOTH",
"585 -20 OFFCURVE",
"758 92 OFFCURVE",
"815 184 QCURVE",
"819 184 LINE",
"841 0 LINE",
"930 0 LINE",
"930 733 LINE SMOOTH",
"930 928 OFFCURVE",
"749 1108 OFFCURVE",
"565 1108 QCURVE SMOOTH",
"467 1108 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"811 270 OFFCURVE",
"624 78 OFFCURVE",
"454 78 QCURVE SMOOTH",
"344 78 OFFCURVE",
"217 182 OFFCURVE",
"217 283 QCURVE SMOOTH",
"217 408 OFFCURVE",
"422 532 OFFCURVE",
"631 541 QCURVE SMOOTH",
"815 549 LINE",
"815 444 LINE SMOOTH"
);
}
);
width = 1097;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"287 1061 OFFCURVE",
"215 1022 QCURVE",
"270 887 LINE",
"338 920 OFFCURVE",
"493 971 OFFCURVE",
"579 971 QCURVE SMOOTH",
"688 971 OFFCURVE",
"807 864 OFFCURVE",
"807 727 QCURVE SMOOTH",
"807 662 LINE",
"620 655 LINE SMOOTH",
"352 647 OFFCURVE",
"94 469 OFFCURVE",
"94 305 QCURVE SMOOTH",
"94 137 OFFCURVE",
"291 -20 OFFCURVE",
"440 -20 QCURVE SMOOTH",
"577 -20 OFFCURVE",
"737 66 OFFCURVE",
"809 156 QCURVE",
"817 156 LINE",
"852 0 LINE",
"983 0 LINE",
"983 748 LINE SMOOTH",
"983 940 OFFCURVE",
"790 1116 OFFCURVE",
"590 1116 QCURVE SMOOTH",
"483 1116 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"618 125 OFFCURVE",
"481 125 QCURVE SMOOTH",
"393 125 OFFCURVE",
"280 211 OFFCURVE",
"280 303 QCURVE SMOOTH",
"280 408 OFFCURVE",
"438 522 OFFCURVE",
"643 530 QCURVE SMOOTH",
"805 537 LINE",
"805 438 LINE SMOOTH",
"805 279 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01225 1 4 0 24 1 3 4 6 1 6 5 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0120 3 0 5 6 3 5 103 0 4 4 0 97 7 1 0 0 40 77 0 6 6 1 97 2 1 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 3 0 5 6 3 5 103 0 4 4 0 97 7 1 0 0 40 77 0 1 1 32 77 0 6 6 2 97 0 2 2 38 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\0121 0 37 35 31 29 22 20 17 15 11 9 5 4 0 27 1 27 8 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1148;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"279 1085 OFFCURVE",
"190 1040 QCURVE",
"291 834 LINE",
"369 868 OFFCURVE",
"524 915 OFFCURVE",
"606 915 QCURVE SMOOTH",
"688 915 OFFCURVE",
"780 834 OFFCURVE",
"780 745 QCURVE SMOOTH",
"780 696 LINE",
"586 690 LINE SMOOTH",
"336 680 OFFCURVE",
"86 512 OFFCURVE",
"86 334 QCURVE SMOOTH",
"86 152 OFFCURVE",
"283 -20 OFFCURVE",
"432 -20 QCURVE SMOOTH",
"571 -20 OFFCURVE",
"731 61 OFFCURVE",
"803 152 QCURVE",
"811 152 LINE",
"870 0 LINE",
"1083 0 LINE",
"1083 745 LINE SMOOTH",
"1083 946 OFFCURVE",
"844 1141 OFFCURVE",
"618 1141 QCURVE SMOOTH",
"500 1141 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"780 319 OFFCURVE",
"645 203 OFFCURVE",
"547 203 QCURVE SMOOTH",
"481 203 OFFCURVE",
"399 262 OFFCURVE",
"399 332 QCURVE SMOOTH",
"399 412 OFFCURVE",
"514 510 OFFCURVE",
"661 514 QCURVE SMOOTH",
"780 518 LINE",
"780 426 LINE SMOOTH"
);
}
);
width = 1236;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"286 1102 OFFCURVE",
"188 1051 QCURVE",
"300 793 LINE",
"384 829 OFFCURVE",
"548 877 OFFCURVE",
"616 877 QCURVE SMOOTH",
"679 877 OFFCURVE",
"753 813 OFFCURVE",
"753 737 QCURVE SMOOTH",
"753 721 LINE",
"565 715 LINE SMOOTH",
"325 705 OFFCURVE",
"73 528 OFFCURVE",
"73 346 QCURVE SMOOTH",
"73 160 OFFCURVE",
"270 -20 OFFCURVE",
"417 -20 QCURVE SMOOTH",
"511 -20 OFFCURVE",
"642 14 OFFCURVE",
"741 90 OFFCURVE",
"790 150 QCURVE",
"798 150 LINE",
"874 0 LINE",
"1144 0 LINE",
"1144 743 LINE SMOOTH",
"1144 940 OFFCURVE",
"902 1153 OFFCURVE",
"687 1153 QCURVE SMOOTH",
"534 1153 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"755 346 OFFCURVE",
"655 256 OFFCURVE",
"583 256 QCURVE SMOOTH",
"532 256 OFFCURVE",
"470 311 OFFCURVE",
"470 369 QCURVE SMOOTH",
"470 430 OFFCURVE",
"556 498 OFFCURVE",
"665 502 QCURVE SMOOTH",
"755 506 LINE",
"755 418 LINE SMOOTH"
);
}
);
width = 1275;
}
);
note = a;
unicode = 0061;
},
{
glyphname = b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"182 0 LINE",
"227 0 LINE",
"235 213 LINE",
"239 213 LINE",
"276 111 OFFCURVE",
"458 -20 OFFCURVE",
"604 -20 QCURVE SMOOTH",
"770 -20 OFFCURVE",
"977 133 OFFCURVE",
"1073 389 OFFCURVE",
"1073 545 QCURVE SMOOTH",
"1073 819 OFFCURVE",
"852 1104 OFFCURVE",
"637 1104 QCURVE SMOOTH",
"481 1104 OFFCURVE",
"270 950 OFFCURVE",
"235 831 QCURVE",
"231 831 LINE",
"233 883 OFFCURVE",
"235 1026 OFFCURVE",
"235 1075 QCURVE SMOOTH",
"235 1556 LINE",
"182 1556 LINE"
);
},
{
closed = 1;
nodes = (
"1018 545 QCURVE SMOOTH",
"1018 299 OFFCURVE",
"807 31 OFFCURVE",
"604 31 QCURVE SMOOTH",
"418 31 OFFCURVE",
"235 281 OFFCURVE",
"235 518 QCURVE SMOOTH",
"235 539 LINE SMOOTH",
"235 778 OFFCURVE",
"432 1053 OFFCURVE",
"637 1053 QCURVE SMOOTH",
"1018 1053 OFFCURVE"
);
}
);
width = 1193;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"178 0 LINE",
"266 0 LINE",
"287 176 LINE",
"297 176 LINE",
"338 94 OFFCURVE",
"512 -20 OFFCURVE",
"649 -20 QCURVE SMOOTH",
"874 -20 OFFCURVE",
"1110 289 OFFCURVE",
"1110 547 QCURVE SMOOTH",
"1110 825 OFFCURVE",
"876 1110 OFFCURVE",
"665 1110 QCURVE SMOOTH",
"522 1110 OFFCURVE",
"336 985 OFFCURVE",
"295 893 QCURVE",
"287 893 LINE",
"291 934 OFFCURVE",
"295 1069 OFFCURVE",
"295 1126 QCURVE SMOOTH",
"295 1556 LINE",
"178 1556 LINE"
);
},
{
closed = 1;
nodes = (
"989 549 QCURVE SMOOTH",
"989 324 OFFCURVE",
"811 80 OFFCURVE",
"635 80 QCURVE SMOOTH",
"452 80 OFFCURVE",
"295 311 OFFCURVE",
"295 532 QCURVE SMOOTH",
"295 547 LINE SMOOTH",
"295 772 OFFCURVE",
"461 1010 OFFCURVE",
"651 1010 QCURVE SMOOTH",
"989 1010 OFFCURVE"
);
}
);
width = 1226;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"303 0 LINE",
"340 139 LINE",
"354 139 LINE",
"401 74 OFFCURVE",
"565 -20 OFFCURVE",
"694 -20 QCURVE SMOOTH",
"897 -20 OFFCURVE",
"1147 266 OFFCURVE",
"1147 549 QCURVE SMOOTH",
"1147 831 OFFCURVE",
"899 1116 OFFCURVE",
"694 1116 QCURVE SMOOTH",
"565 1116 OFFCURVE",
"401 1022 OFFCURVE",
"354 952 QCURVE",
"344 952 LINE",
"348 987 OFFCURVE",
"354 1108 OFFCURVE",
"354 1178 QCURVE SMOOTH",
"354 1556 LINE",
"174 1556 LINE",
"174 0 LINE"
);
},
{
closed = 1;
nodes = (
"960 551 QCURVE SMOOTH",
"960 346 OFFCURVE",
"815 129 OFFCURVE",
"668 129 QCURVE SMOOTH",
"487 129 OFFCURVE",
"354 344 OFFCURVE",
"354 547 QCURVE SMOOTH",
"354 555 LINE SMOOTH",
"354 766 OFFCURVE",
"487 967 OFFCURVE",
"663 967 QCURVE SMOOTH",
"960 967 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 5 2 5 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 0 33 77 6 1 4 4 1 97 0 1 1 40 77 0 5 5 2 97 3 1 2 2 38 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 0 33 77 6 1 4 4 1 97 0 1 1 40 77 0 3 3 32 77 0 5 5 2 97 0 2 2 38 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0126 1 4 4 1 97 0 1 1 40 77 0 0 0 3 95 0 3 3 32 77 0 5 5 2 97 0 2 2 38 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\01223 22 30 28 22 33 23 33 20 36 39 16 7 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1259;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"159 0 LINE",
"392 0 LINE",
"444 123 LINE",
"464 123 LINE",
"509 68 OFFCURVE",
"651 -20 OFFCURVE",
"773 -20 QCURVE SMOOTH",
"966 -20 OFFCURVE",
"1203 274 OFFCURVE",
"1203 561 QCURVE SMOOTH",
"1203 846 OFFCURVE",
"970 1139 OFFCURVE",
"782 1139 QCURVE SMOOTH",
"661 1139 OFFCURVE",
"509 1042 OFFCURVE",
"464 973 QCURVE",
"452 973 LINE",
"456 1008 OFFCURVE",
"464 1130 OFFCURVE",
"464 1194 QCURVE SMOOTH",
"464 1556 LINE",
"159 1556 LINE"
);
},
{
closed = 1;
nodes = (
"892 729 OFFCURVE",
"892 565 QCURVE SMOOTH",
"892 401 OFFCURVE",
"782 227 OFFCURVE",
"687 227 QCURVE SMOOTH",
"560 227 OFFCURVE",
"464 401 OFFCURVE",
"464 563 QCURVE SMOOTH",
"464 596 LINE SMOOTH",
"466 745 OFFCURVE",
"565 895 OFFCURVE",
"683 895 QCURVE SMOOTH",
"780 895 OFFCURVE"
);
}
);
width = 1296;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"135 0 LINE",
"440 0 LINE",
"502 111 LINE",
"526 111 LINE",
"569 63 OFFCURVE",
"696 -20 OFFCURVE",
"815 -20 QCURVE SMOOTH",
"999 -20 OFFCURVE",
"1229 279 OFFCURVE",
"1229 569 QCURVE SMOOTH",
"1229 854 OFFCURVE",
"1003 1153 OFFCURVE",
"827 1153 QCURVE SMOOTH",
"713 1153 OFFCURVE",
"569 1057 OFFCURVE",
"526 987 QCURVE",
"512 987 LINE",
"518 1034 OFFCURVE",
"526 1145 OFFCURVE",
"526 1204 QCURVE SMOOTH",
"526 1556 LINE",
"135 1556 LINE"
);
},
{
closed = 1;
nodes = (
"831 573 QCURVE SMOOTH",
"831 295 OFFCURVE",
"688 295 QCURVE SMOOTH",
"598 295 OFFCURVE",
"526 422 OFFCURVE",
"526 555 QCURVE SMOOTH",
"526 610 LINE SMOOTH",
"526 731 OFFCURVE",
"602 846 OFFCURVE",
"684 846 QCURVE SMOOTH",
"831 846 OFFCURVE"
);
}
);
width = 1316;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"845 12 OFFCURVE",
"896 33 QCURVE",
"896 84 LINE",
"837 59 OFFCURVE",
"691 31 OFFCURVE",
"618 31 QCURVE SMOOTH",
"462 31 OFFCURVE",
"267 166 OFFCURVE",
"175 395 OFFCURVE",
"175 535 QCURVE SMOOTH",
"175 686 OFFCURVE",
"290 920 OFFCURVE",
"505 1051 OFFCURVE",
"652 1051 QCURVE SMOOTH",
"712 1051 OFFCURVE",
"833 1028 OFFCURVE",
"894 1001 QCURVE",
"904 1053 LINE",
"847 1077 OFFCURVE",
"726 1102 OFFCURVE",
"652 1102 QCURVE SMOOTH",
"487 1102 OFFCURVE",
"249 956 OFFCURVE",
"120 700 OFFCURVE",
"120 535 QCURVE SMOOTH",
"120 377 OFFCURVE",
"224 125 OFFCURVE",
"446 -20 OFFCURVE",
"618 -20 QCURVE SMOOTH",
"702 -20 OFFCURVE"
);
}
);
width = 966;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"843 10 OFFCURVE",
"896 37 QCURVE",
"896 141 LINE",
"839 115 OFFCURVE",
"696 82 OFFCURVE",
"614 82 QCURVE SMOOTH",
"421 82 OFFCURVE",
"237 336 OFFCURVE",
"237 541 QCURVE SMOOTH",
"237 756 OFFCURVE",
"446 1006 OFFCURVE",
"638 1006 QCURVE SMOOTH",
"761 1006 OFFCURVE",
"876 954 QCURVE",
"909 1057 LINE",
"855 1081 OFFCURVE",
"718 1110 OFFCURVE",
"638 1110 QCURVE SMOOTH",
"483 1110 OFFCURVE",
"247 977 OFFCURVE",
"116 721 OFFCURVE",
"116 539 QCURVE SMOOTH",
"116 272 OFFCURVE",
"376 -20 OFFCURVE",
"616 -20 QCURVE SMOOTH",
"704 -20 OFFCURVE"
);
}
);
width = 974;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"841 10 OFFCURVE",
"896 39 QCURVE",
"896 199 LINE",
"839 172 OFFCURVE",
"700 135 OFFCURVE",
"612 135 QCURVE SMOOTH",
"456 135 OFFCURVE",
"298 346 OFFCURVE",
"298 545 QCURVE SMOOTH",
"298 961 OFFCURVE",
"622 961 QCURVE SMOOTH",
"679 961 OFFCURVE",
"810 928 OFFCURVE",
"860 909 QCURVE",
"915 1059 LINE",
"866 1083 OFFCURVE",
"708 1118 OFFCURVE",
"626 1118 QCURVE SMOOTH",
"479 1118 OFFCURVE",
"245 999 OFFCURVE",
"112 745 OFFCURVE",
"112 543 QCURVE SMOOTH",
"112 348 OFFCURVE",
"241 98 OFFCURVE",
"466 -20 OFFCURVE",
"614 -20 QCURVE SMOOTH",
"708 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */\01211 1 2 1 23 12 2 3 2 24 1 0 3 3 76 0 2 2 1 97 0 1 1 40 77 0 3 3 0 97 4 1 0 0 38 0 78 1 0 21 19 16 14 9 7 0 26 1 26 5 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 983;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"885 18 OFFCURVE",
"954 63 QCURVE",
"954 324 LINE",
"885 279 OFFCURVE",
"737 227 OFFCURVE",
"641 227 QCURVE SMOOTH",
"528 227 OFFCURVE",
"403 387 OFFCURVE",
"403 555 QCURVE SMOOTH",
"403 893 OFFCURVE",
"641 893 QCURVE SMOOTH",
"702 893 OFFCURVE",
"827 856 OFFCURVE",
"899 827 QCURVE",
"989 1063 LINE",
"926 1094 OFFCURVE",
"756 1139 OFFCURVE",
"641 1139 QCURVE SMOOTH",
"479 1139 OFFCURVE",
"231 1016 OFFCURVE",
"92 758 OFFCURVE",
"92 553 QCURVE SMOOTH",
"92 254 OFFCURVE",
"364 -20 OFFCURVE",
"614 -20 QCURVE SMOOTH",
"731 -20 OFFCURVE"
);
}
);
width = 1052;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"942 33 OFFCURVE",
"1014 80 QCURVE",
"1014 391 LINE",
"938 344 OFFCURVE",
"768 291 OFFCURVE",
"684 291 QCURVE SMOOTH",
"594 291 OFFCURVE",
"483 416 OFFCURVE",
"483 563 QCURVE SMOOTH",
"483 707 OFFCURVE",
"594 846 OFFCURVE",
"682 846 QCURVE SMOOTH",
"745 846 OFFCURVE",
"868 809 OFFCURVE",
"938 778 QCURVE",
"1053 1067 LINE",
"973 1106 OFFCURVE",
"786 1153 OFFCURVE",
"682 1153 QCURVE SMOOTH",
"510 1153 OFFCURVE",
"242 1028 OFFCURVE",
"86 766 OFFCURVE",
"86 561 QCURVE SMOOTH",
"86 258 OFFCURVE",
"393 -20 OFFCURVE",
"651 -20 QCURVE SMOOTH",
"768 -20 OFFCURVE"
);
}
);
width = 1103;
}
);
note = c;
unicode = 0063;
},
{
glyphname = d;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"921 129 OFFCURVE",
"958 231 QCURVE",
"962 231 LINE",
"966 0 LINE",
"1011 0 LINE",
"1011 1556 LINE",
"958 1556 LINE",
"958 1112 LINE SMOOTH",
"958 1049 OFFCURVE",
"958 918 OFFCURVE",
"962 848 QCURVE",
"958 848 LINE",
"925 954 OFFCURVE",
"743 1102 OFFCURVE",
"595 1102 QCURVE SMOOTH",
"364 1102 OFFCURVE",
"120 801 OFFCURVE",
"120 520 QCURVE SMOOTH",
"120 258 OFFCURVE",
"345 -20 OFFCURVE",
"579 -20 QCURVE SMOOTH",
"741 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"175 274 OFFCURVE",
"175 520 QCURVE SMOOTH",
"175 786 OFFCURVE",
"392 1051 OFFCURVE",
"595 1051 QCURVE SMOOTH",
"777 1051 OFFCURVE",
"958 791 OFFCURVE",
"958 545 QCURVE SMOOTH",
"958 539 LINE SMOOTH",
"958 299 OFFCURVE",
"784 31 OFFCURVE",
"579 31 QCURVE SMOOTH",
"372 31 OFFCURVE"
);
}
);
width = 1193;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"888 102 OFFCURVE",
"931 188 QCURVE",
"937 188 LINE",
"954 0 LINE",
"1048 0 LINE",
"1048 1556 LINE",
"931 1556 LINE",
"931 1114 LINE SMOOTH",
"931 1069 OFFCURVE",
"937 950 OFFCURVE",
"939 901 QCURVE",
"931 901 LINE",
"890 991 OFFCURVE",
"718 1110 OFFCURVE",
"581 1110 QCURVE SMOOTH",
"364 1110 OFFCURVE",
"116 815 OFFCURVE",
"116 532 QCURVE SMOOTH",
"116 260 OFFCURVE",
"352 -20 OFFCURVE",
"571 -20 QCURVE SMOOTH",
"716 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"237 309 OFFCURVE",
"237 532 QCURVE SMOOTH",
"237 762 OFFCURVE",
"417 1010 OFFCURVE",
"593 1010 QCURVE SMOOTH",
"773 1010 OFFCURVE",
"933 770 OFFCURVE",
"933 545 QCURVE SMOOTH",
"933 524 LINE SMOOTH",
"933 309 OFFCURVE",
"773 80 OFFCURVE",
"585 80 QCURVE SMOOTH",
"409 80 OFFCURVE"
);
}
);
width = 1226;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"855 78 OFFCURVE",
"905 147 QCURVE",
"913 147 LINE",
"939 0 LINE",
"1085 0 LINE",
"1085 1556 LINE",
"905 1556 LINE",
"905 1118 LINE SMOOTH",
"905 1087 OFFCURVE",
"913 983 OFFCURVE",
"917 956 QCURVE",
"905 956 LINE",
"853 1024 OFFCURVE",
"692 1118 OFFCURVE",
"565 1118 QCURVE SMOOTH",
"360 1118 OFFCURVE",
"112 829 OFFCURVE",
"112 547 QCURVE SMOOTH",
"112 264 OFFCURVE",
"358 -20 OFFCURVE",
"563 -20 QCURVE SMOOTH",
"692 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"298 346 OFFCURVE",
"298 543 QCURVE SMOOTH",
"298 737 OFFCURVE",
"444 969 OFFCURVE",
"589 969 QCURVE SMOOTH",
"771 969 OFFCURVE",
"907 750 OFFCURVE",
"907 545 QCURVE SMOOTH",
"907 512 LINE SMOOTH",
"907 319 OFFCURVE",
"765 129 OFFCURVE",
"591 129 QCURVE SMOOTH",
"444 129 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 9 2 4 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 2 33 77 0 5 5 1 97 0 1 1 40 77 7 1 4 4 0 97 3 6 2 0 0 38 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 2 33 77 0 5 5 1 97 0 1 1 40 77 0 3 3 32 77 7 1 4 4 0 97 6 1 0 0 38 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 5 5 1 97 0 1 1 40 77 0 2 2 3 95 0 3 3 32 77 7 1 4 4 0 97 6 1 0 0 38 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01223 22 1 0 30 28 22 34 23 34 17 16 15 14 7 5 0 21 1 21 8 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1259;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"786 76 OFFCURVE",
"831 145 QCURVE",
"844 145 LINE",
"903 0 LINE",
"1136 0 LINE",
"1136 1556 LINE",
"831 1556 LINE",
"831 1198 LINE SMOOTH",
"831 1133 OFFCURVE",
"848 1008 OFFCURVE",
"854 975 QCURVE",
"844 975 LINE",
"799 1044 OFFCURVE",
"643 1139 OFFCURVE",
"522 1139 QCURVE SMOOTH",
"330 1139 OFFCURVE",
"92 844 OFFCURVE",
"92 557 QCURVE SMOOTH",
"92 272 OFFCURVE",
"328 -20 OFFCURVE",
"514 -20 QCURVE SMOOTH",
"635 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"401 389 OFFCURVE",
"401 553 QCURVE SMOOTH",
"401 717 OFFCURVE",
"516 891 OFFCURVE",
"616 891 QCURVE SMOOTH",
"751 891 OFFCURVE",
"852 717 OFFCURVE",
"852 555 QCURVE SMOOTH",
"852 522 LINE SMOOTH",
"848 373 OFFCURVE",
"745 223 OFFCURVE",
"620 223 QCURVE SMOOTH",
"516 223 OFFCURVE"
);
}
);
width = 1296;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"748 76 OFFCURVE",
"788 143 QCURVE",
"803 143 LINE",
"887 0 LINE",
"1182 0 LINE",
"1182 1556 LINE",
"788 1556 LINE",
"788 1253 LINE SMOOTH",
"788 1182 OFFCURVE",
"799 1030 OFFCURVE",
"807 987 QCURVE",
"799 987 LINE",
"754 1057 OFFCURVE",
"614 1153 OFFCURVE",
"502 1153 QCURVE SMOOTH",
"317 1153 OFFCURVE",
"86 856 OFFCURVE",
"86 565 QCURVE SMOOTH",
"86 279 OFFCURVE",
"311 -20 OFFCURVE",
"487 -20 QCURVE SMOOTH",
"604 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"481 418 OFFCURVE",
"481 559 QCURVE SMOOTH",
"481 702 OFFCURVE",
"573 838 OFFCURVE",
"643 838 QCURVE SMOOTH",
"745 838 OFFCURVE",
"821 694 OFFCURVE",
"821 561 QCURVE SMOOTH",
"821 530 LINE SMOOTH",
"819 408 OFFCURVE",
"741 289 OFFCURVE",
"647 289 QCURVE SMOOTH",
"573 289 OFFCURVE"
);
}
);
width = 1316;
}
);
note = d;
unicode = 0064;
},
{
glyphname = e;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"222 944 OFFCURVE",
"120 684 OFFCURVE",
"120 530 QCURVE SMOOTH",
"120 373 OFFCURVE",
"220 123 OFFCURVE",
"435 -20 OFFCURVE",
"605 -20 QCURVE SMOOTH",
"704 -20 OFFCURVE",
"861 12 OFFCURVE",
"939 47 QCURVE",
"939 102 LINE",
"843 59 OFFCURVE",
"704 31 OFFCURVE",
"605 31 QCURVE SMOOTH",
"394 31 OFFCURVE",
"171 297 OFFCURVE",
"175 545 QCURVE",
"980 545 LINE",
"980 596 LINE SMOOTH",
"980 737 OFFCURVE",
"898 967 OFFCURVE",
"724 1102 OFFCURVE",
"587 1102 QCURVE SMOOTH",
"429 1102 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"927 799 OFFCURVE",
"925 596 QCURVE",
"177 596 LINE",
"196 819 OFFCURVE",
"415 1051 OFFCURVE",
"587 1051 QCURVE SMOOTH",
"759 1051 OFFCURVE"
);
}
);
width = 1105;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"229 963 OFFCURVE",
"116 702 OFFCURVE",
"116 537 QCURVE SMOOTH",
"116 279 OFFCURVE",
"378 -20 OFFCURVE",
"622 -20 QCURVE SMOOTH",
"728 -20 OFFCURVE",
"888 12 OFFCURVE",
"970 49 QCURVE",
"970 156 LINE",
"880 115 OFFCURVE",
"728 82 OFFCURVE",
"626 82 QCURVE SMOOTH",
"438 82 OFFCURVE",
"237 313 OFFCURVE",
"237 528 QCURVE",
"1015 528 LINE",
"1015 610 LINE SMOOTH",
"1015 756 OFFCURVE",
"921 981 OFFCURVE",
"732 1110 OFFCURVE",
"593 1110 QCURVE SMOOTH",
"442 1110 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"892 799 OFFCURVE",
"892 627 QCURVE",
"239 627 LINE",
"255 811 OFFCURVE",
"442 1012 OFFCURVE",
"591 1012 QCURVE SMOOTH",
"747 1012 OFFCURVE"
);
}
);
width = 1130;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"233 979 OFFCURVE",
"112 721 OFFCURVE",
"112 541 QCURVE SMOOTH",
"112 356 OFFCURVE",
"245 106 OFFCURVE",
"483 -20 OFFCURVE",
"640 -20 QCURVE SMOOTH",
"753 -20 OFFCURVE",
"917 14 OFFCURVE",
"1001 51 QCURVE",
"1001 209 LINE",
"915 172 OFFCURVE",
"753 133 OFFCURVE",
"649 133 QCURVE SMOOTH",
"485 133 OFFCURVE",
"302 328 OFFCURVE",
"298 514 QCURVE",
"1050 514 LINE",
"1050 623 LINE SMOOTH",
"1050 772 OFFCURVE",
"941 995 OFFCURVE",
"737 1118 OFFCURVE",
"597 1118 QCURVE SMOOTH",
"452 1118 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"860 797 OFFCURVE",
"862 657 QCURVE",
"302 657 LINE",
"317 805 OFFCURVE",
"466 971 OFFCURVE",
"595 971 QCURVE SMOOTH",
"733 971 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01212 1 2 1 13 1 3 2 2 76 0 5 0 1 2 5 1 103 7 1 4 4 0 97 6 1 0 0 40 77 0 2 2 3 97 0 3 3 38 3 78 25 24 1 0 28 27 24 30 25 30 17 15 10 8 6 5 0 23 1 23 8 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1155;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"225 1008 OFFCURVE",
"92 745 OFFCURVE",
"92 551 QCURVE SMOOTH",
"92 356 OFFCURVE",
"239 104 OFFCURVE",
"498 -20 OFFCURVE",
"665 -20 QCURVE SMOOTH",
"794 -20 OFFCURVE",
"975 18 OFFCURVE",
"1059 59 QCURVE",
"1059 295 LINE",
"964 250 OFFCURVE",
"786 207 OFFCURVE",
"680 207 QCURVE SMOOTH",
"551 207 OFFCURVE",
"405 354 OFFCURVE",
"401 483 QCURVE",
"1122 483 LINE",
"1122 631 LINE SMOOTH",
"1122 874 OFFCURVE",
"852 1139 OFFCURVE",
"620 1139 QCURVE SMOOTH",
"463 1139 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"833 786 OFFCURVE",
"835 686 QCURVE",
"407 686 LINE",
"418 807 OFFCURVE",
"532 922 OFFCURVE",
"622 922 QCURVE SMOOTH",
"729 922 OFFCURVE"
);
}
);
width = 1210;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"227 1026 OFFCURVE",
"86 762 OFFCURVE",
"86 559 QCURVE SMOOTH",
"86 356 OFFCURVE",
"242 100 OFFCURVE",
"510 -20 OFFCURVE",
"682 -20 QCURVE SMOOTH",
"829 -20 OFFCURVE",
"1024 20 OFFCURVE",
"1106 63 QCURVE",
"1106 344 LINE",
"1012 299 OFFCURVE",
"836 258 OFFCURVE",
"729 258 QCURVE SMOOTH",
"610 258 OFFCURVE",
"485 373 OFFCURVE",
"481 461 QCURVE",
"1180 461 LINE",
"1180 635 LINE SMOOTH",
"1180 895 OFFCURVE",
"893 1153 OFFCURVE",
"645 1153 QCURVE SMOOTH",
"479 1153 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"823 782 OFFCURVE",
"825 707 QCURVE",
"489 707 LINE",
"498 801 OFFCURVE",
"590 887 OFFCURVE",
"659 887 QCURVE SMOOTH",
"739 887 OFFCURVE"
);
}
);
width = 1265;
}
);
note = e;
unicode = 0065;
},
{
glyphname = f;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"284 1081 LINE",
"284 1235 LINE SMOOTH",
"284 1384 OFFCURVE",
"395 1516 OFFCURVE",
"526 1516 QCURVE SMOOTH",
"565 1516 OFFCURVE",
"649 1503 OFFCURVE",
"686 1489 QCURVE",
"694 1542 LINE",
"655 1552 OFFCURVE",
"577 1567 OFFCURVE",
"526 1567 QCURVE SMOOTH",
"368 1567 OFFCURVE",
"231 1395 OFFCURVE",
"231 1235 QCURVE SMOOTH",
"231 1081 LINE",
"22 1075 LINE",
"22 1030 LINE",
"231 1030 LINE",
"231 0 LINE",
"284 0 LINE",
"284 1030 LINE",
"528 1030 LINE",
"528 1081 LINE"
);
}
);
width = 561;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"343 1090 LINE",
"343 1202 LINE SMOOTH",
"343 1341 OFFCURVE",
"442 1466 OFFCURVE",
"552 1466 QCURVE SMOOTH",
"595 1466 OFFCURVE",
"679 1450 OFFCURVE",
"716 1438 QCURVE",
"743 1536 LINE",
"704 1548 OFFCURVE",
"610 1567 OFFCURVE",
"552 1567 QCURVE SMOOTH",
"388 1567 OFFCURVE",
"227 1389 OFFCURVE",
"227 1200 QCURVE SMOOTH",
"227 1094 LINE",
"26 1059 LINE",
"26 995 LINE",
"227 995 LINE",
"227 0 LINE",
"343 0 LINE",
"343 995 LINE",
"604 995 LINE",
"604 1090 LINE"
);
}
);
width = 632;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"403 1169 LINE SMOOTH",
"403 1298 OFFCURVE",
"491 1419 OFFCURVE",
"581 1419 QCURVE SMOOTH",
"626 1419 OFFCURVE",
"712 1399 OFFCURVE",
"745 1389 QCURVE",
"792 1530 LINE",
"753 1544 OFFCURVE",
"642 1567 OFFCURVE",
"579 1567 QCURVE SMOOTH",
"409 1567 OFFCURVE",
"223 1380 OFFCURVE",
"223 1167 QCURVE SMOOTH",
"223 1104 LINE",
"30 1042 LINE",
"30 958 LINE",
"223 958 LINE",
"223 0 LINE",
"403 0 LINE",
"403 958 LINE",
"679 958 LINE",
"679 1098 LINE",
"403 1098 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01215 1 4 3 16 8 2 5 4 7 1 0 5 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01229 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 4 3 97 0 3 3 33 77 2 1 0 0 5 95 6 1 5 5 34 77 0 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 3 0 4 5 3 4 105 2 1 0 0 5 95 6 1 5 5 34 77 0 1 1 32 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 23 0 23 37 37 17 17 17 7 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 704;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"513 1118 LINE",
"513 1188 LINE SMOOTH",
"513 1247 OFFCURVE",
"572 1325 OFFCURVE",
"636 1325 QCURVE SMOOTH",
"687 1325 OFFCURVE",
"771 1307 OFFCURVE",
"806 1296 QCURVE",
"884 1520 LINE",
"839 1538 OFFCURVE",
"691 1567 OFFCURVE",
"603 1567 QCURVE SMOOTH",
"482 1567 OFFCURVE",
"304 1501 OFFCURVE",
"208 1343 OFFCURVE",
"208 1200 QCURVE SMOOTH",
"208 1118 LINE",
"40 1036 LINE",
"40 889 LINE",
"208 889 LINE",
"208 0 LINE",
"513 0 LINE",
"513 889 LINE",
"777 889 LINE",
"777 1118 LINE"
);
}
);
width = 792;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"586 1133 LINE",
"586 1163 LINE SMOOTH",
"586 1280 OFFCURVE",
"672 1280 QCURVE SMOOTH",
"713 1280 OFFCURVE",
"784 1268 OFFCURVE",
"813 1260 QCURVE",
"897 1513 LINE",
"819 1540 OFFCURVE",
"676 1567 OFFCURVE",
"588 1567 QCURVE SMOOTH",
"381 1567 OFFCURVE",
"203 1366 OFFCURVE",
"203 1147 QCURVE SMOOTH",
"203 1128 LINE",
"45 1032 LINE",
"45 840 LINE",
"195 840 LINE",
"195 0 LINE",
"586 0 LINE",
"586 840 LINE",
"827 840 LINE",
"827 1133 LINE"
);
}
);
width = 845;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"120 791 OFFCURVE",
"120 524 QCURVE SMOOTH",
"120 256 OFFCURVE",
"356 -20 OFFCURVE",
"564 -20 QCURVE SMOOTH",
"716 -20 OFFCURVE",
"917 113 OFFCURVE",
"954 240 QCURVE",
"958 240 LINE",
"954 180 OFFCURVE",
"954 94 OFFCURVE",
"954 35 QCURVE SMOOTH",
"954 -51 LINE SMOOTH",
"954 -227 OFFCURVE",
"775 -440 OFFCURVE",
"558 -440 QCURVE SMOOTH",
"444 -440 OFFCURVE",
"251 -389 OFFCURVE",
"177 -354 QCURVE",
"177 -416 LINE",
"251 -446 OFFCURVE",
"433 -492 OFFCURVE",
"558 -492 QCURVE SMOOTH",
"722 -492 OFFCURVE",
"919 -379 OFFCURVE",
"1007 -180 OFFCURVE",
"1007 -51 QCURVE SMOOTH",
"1007 1081 LINE",
"962 1081 LINE",
"951 895 LINE",
"947 895 LINE",
"904 983 OFFCURVE",
"743 1102 OFFCURVE",
"593 1102 QCURVE SMOOTH",
"356 1102 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"888 934 OFFCURVE",
"954 729 OFFCURVE",
"954 602 QCURVE SMOOTH",
"954 504 LINE SMOOTH",
"954 420 OFFCURVE",
"921 252 OFFCURVE",
"837 115 OFFCURVE",
"683 31 OFFCURVE",
"564 31 QCURVE SMOOTH",
"376 31 OFFCURVE",
"175 283 OFFCURVE",
"175 524 QCURVE SMOOTH",
"175 772 OFFCURVE",
"378 1051 OFFCURVE",
"593 1051 QCURVE SMOOTH",
"732 1051 OFFCURVE"
);
}
);
width = 1193;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"116 801 OFFCURVE",
"116 537 QCURVE SMOOTH",
"116 266 OFFCURVE",
"352 -20 OFFCURVE",
"565 -20 QCURVE SMOOTH",
"696 -20 OFFCURVE",
"884 86 OFFCURVE",
"929 193 QCURVE",
"935 193 LINE",
"933 152 OFFCURVE",
"929 66 OFFCURVE",
"929 23 QCURVE SMOOTH",
"929 -41 LINE SMOOTH",
"929 -203 OFFCURVE",
"759 -391 OFFCURVE",
"581 -391 QCURVE SMOOTH",
"464 -391 OFFCURVE",
"266 -344 OFFCURVE",
"188 -305 QCURVE",
"188 -418 LINE",
"266 -451 OFFCURVE",
"454 -492 OFFCURVE",
"577 -492 QCURVE SMOOTH",
"827 -492 OFFCURVE",
"1046 -250 OFFCURVE",
"1046 -35 QCURVE SMOOTH",
"1046 1090 LINE",
"952 1090 LINE",
"933 924 LINE",
"927 924 LINE",
"876 1012 OFFCURVE",
"706 1110 OFFCURVE",
"577 1110 QCURVE SMOOTH",
"352 1110 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"931 782 OFFCURVE",
"931 573 QCURVE SMOOTH",
"931 504 LINE SMOOTH",
"931 381 OFFCURVE",
"866 188 OFFCURVE",
"712 78 OFFCURVE",
"577 78 QCURVE SMOOTH",
"411 78 OFFCURVE",
"237 311 OFFCURVE",
"237 535 QCURVE SMOOTH",
"237 760 OFFCURVE",
"413 1008 OFFCURVE",
"589 1008 QCURVE SMOOTH",
"778 1008 OFFCURVE"
);
}
);
width = 1226;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"112 809 OFFCURVE",
"112 547 QCURVE SMOOTH",
"112 279 OFFCURVE",
"352 -20 OFFCURVE",
"565 -20 QCURVE SMOOTH",
"794 -20 OFFCURVE",
"905 145 QCURVE",
"913 145 LINE",
"911 127 OFFCURVE",
"907 35 OFFCURVE",
"907 10 QCURVE SMOOTH",
"907 -33 LINE SMOOTH",
"907 -176 OFFCURVE",
"745 -342 OFFCURVE",
"604 -342 QCURVE SMOOTH",
"360 -342 OFFCURVE",
"198 -256 QCURVE",
"198 -422 LINE",
"352 -492 OFFCURVE",
"593 -492 QCURVE SMOOTH",
"845 -492 OFFCURVE",
"1085 -254 OFFCURVE",
"1085 -18 QCURVE SMOOTH",
"1085 1098 LINE",
"941 1098 LINE",
"917 952 LINE",
"907 952 LINE",
"845 1036 OFFCURVE",
"671 1118 OFFCURVE",
"563 1118 QCURVE SMOOTH",
"352 1118 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"909 770 OFFCURVE",
"909 547 QCURVE SMOOTH",
"909 504 LINE SMOOTH",
"909 305 OFFCURVE",
"757 127 OFFCURVE",
"591 127 QCURVE SMOOTH",
"446 127 OFFCURVE",
"298 342 OFFCURVE",
"298 545 QCURVE SMOOTH",
"298 748 OFFCURVE",
"450 967 OFFCURVE",
"587 967 QCURVE SMOOTH",
"753 967 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01222 3 2 6 5 13 1 3 4 12 1 2 3 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0128 1 5 5 0 97 1 7 2 0 0 40 77 0 6 6 4 97 0 4 4 38 77 0 3 3 2 97 0 2 2 36 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 1 1 34 77 8 1 5 5 0 97 7 1 0 0 40 77 0 6 6 4 97 0 4 4 38 77 0 3 3 2 97 0 2 2 36 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01232 31 1 0 38 36 31 43 32 43 26 24 16 14 11 9 6 5 0 30 1 30 9 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1259;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"92 831 OFFCURVE",
"92 557 QCURVE SMOOTH",
"92 285 OFFCURVE",
"315 -20 OFFCURVE",
"514 -20 QCURVE SMOOTH",
"614 -20 OFFCURVE",
"774 57 OFFCURVE",
"831 145 QCURVE",
"840 145 LINE",
"835 117 OFFCURVE",
"831 41 OFFCURVE",
"831 8 QCURVE SMOOTH",
"831 -14 LINE SMOOTH",
"831 -268 OFFCURVE",
"596 -268 QCURVE SMOOTH",
"364 -268 OFFCURVE",
"160 -182 QCURVE",
"160 -426 LINE",
"256 -463 OFFCURVE",
"459 -492 OFFCURVE",
"577 -492 QCURVE SMOOTH",
"854 -492 OFFCURVE",
"1136 -242 OFFCURVE",
"1136 -2 QCURVE SMOOTH",
"1136 1118 LINE",
"878 1118 LINE",
"854 975 LINE",
"846 975 LINE",
"729 1139 OFFCURVE",
"522 1139 QCURVE SMOOTH",
"321 1139 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"852 735 OFFCURVE",
"852 555 QCURVE SMOOTH",
"852 518 LINE SMOOTH",
"852 352 OFFCURVE",
"739 219 OFFCURVE",
"622 219 QCURVE SMOOTH",
"403 219 OFFCURVE",
"403 553 QCURVE SMOOTH",
"403 891 OFFCURVE",
"618 891 QCURVE SMOOTH",
"741 891 OFFCURVE"
);
}
);
width = 1296;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"86 852 OFFCURVE",
"86 565 QCURVE SMOOTH",
"86 279 OFFCURVE",
"311 -20 OFFCURVE",
"492 -20 QCURVE SMOOTH",
"608 -20 OFFCURVE",
"750 76 OFFCURVE",
"791 143 QCURVE",
"803 143 LINE",
"791 61 OFFCURVE",
"791 2 QCURVE SMOOTH",
"791 -18 LINE SMOOTH",
"791 -186 OFFCURVE",
"555 -186 QCURVE SMOOTH",
"422 -186 OFFCURVE",
"238 -143 OFFCURVE",
"135 -100 QCURVE",
"135 -426 LINE",
"231 -463 OFFCURVE",
"440 -492 OFFCURVE",
"578 -492 QCURVE SMOOTH",
"885 -492 OFFCURVE",
"1182 -242 OFFCURVE",
"1182 -2 QCURVE SMOOTH",
"1182 1133 LINE",
"844 1133 LINE",
"815 993 LINE",
"807 993 LINE",
"762 1061 OFFCURVE",
"616 1153 OFFCURVE",
"498 1153 QCURVE SMOOTH",
"315 1153 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"821 705 OFFCURVE",
"821 571 QCURVE SMOOTH",
"821 524 LINE SMOOTH",
"821 403 OFFCURVE",
"745 283 OFFCURVE",
"651 283 QCURVE SMOOTH",
"565 283 OFFCURVE",
"483 412 OFFCURVE",
"483 559 QCURVE SMOOTH",
"483 850 OFFCURVE",
"645 850 QCURVE SMOOTH",
"750 850 OFFCURVE"
);
}
);
width = 1316;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"184 0 LINE",
"237 0 LINE",
"237 618 LINE SMOOTH",
"237 840 OFFCURVE",
"456 1051 OFFCURVE",
"633 1051 QCURVE SMOOTH",
"782 1051 OFFCURVE",
"948 887 OFFCURVE",
"948 707 QCURVE SMOOTH",
"948 0 LINE",
"1001 0 LINE",
"1001 709 LINE SMOOTH",
"1001 909 OFFCURVE",
"807 1102 OFFCURVE",
"633 1102 QCURVE SMOOTH",
"518 1102 OFFCURVE",
"358 1032 OFFCURVE",
"258 918 OFFCURVE",
"237 854 QCURVE",
"233 854 LINE",
"235 899 OFFCURVE",
"237 971 OFFCURVE",
"237 1016 QCURVE SMOOTH",
"237 1556 LINE",
"184 1556 LINE"
);
}
);
width = 1173;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"180 0 LINE",
"295 0 LINE",
"295 594 LINE SMOOTH",
"295 1008 OFFCURVE",
"655 1008 QCURVE SMOOTH",
"792 1008 OFFCURVE",
"934 860 OFFCURVE",
"934 705 QCURVE SMOOTH",
"934 0 LINE",
"1050 0 LINE",
"1050 713 LINE SMOOTH",
"1050 918 OFFCURVE",
"852 1110 OFFCURVE",
"665 1110 QCURVE SMOOTH",
"526 1110 OFFCURVE",
"338 991 OFFCURVE",
"297 901 QCURVE",
"289 901 LINE",
"295 975 OFFCURVE",
"295 1057 QCURVE SMOOTH",
"295 1556 LINE",
"180 1556 LINE"
);
}
);
width = 1220;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"354 0 LINE",
"354 567 LINE SMOOTH",
"354 760 OFFCURVE",
"491 967 OFFCURVE",
"676 967 QCURVE SMOOTH",
"922 967 OFFCURVE",
"922 702 QCURVE SMOOTH",
"922 0 LINE",
"1100 0 LINE",
"1100 715 LINE SMOOTH",
"1100 926 OFFCURVE",
"897 1116 OFFCURVE",
"698 1116 QCURVE SMOOTH",
"592 1116 OFFCURVE",
"410 1030 OFFCURVE",
"356 946 QCURVE",
"344 946 LINE",
"354 1018 OFFCURVE",
"354 1100 QCURVE SMOOTH",
"354 1556 LINE",
"174 1556 LINE",
"174 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 2 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 0 0 33 77 0 3 3 1 97 0 1 1 40 77 4 1 2 2 32 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 3 1 97 0 1 1 40 77 0 0 0 2 95 4 1 2 2 32 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01219 34 19 38 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1265;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"159 0 LINE",
"464 0 LINE",
"464 526 LINE SMOOTH",
"464 705 OFFCURVE",
"569 895 OFFCURVE",
"706 895 QCURVE SMOOTH",
"886 895 OFFCURVE",
"886 653 QCURVE SMOOTH",
"886 0 LINE",
"1191 0 LINE",
"1191 729 LINE SMOOTH",
"1191 944 OFFCURVE",
"970 1139 OFFCURVE",
"790 1139 QCURVE SMOOTH",
"687 1139 OFFCURVE",
"519 1061 OFFCURVE",
"466 975 QCURVE",
"450 975 LINE",
"454 1006 OFFCURVE",
"464 1155 OFFCURVE",
"464 1239 QCURVE SMOOTH",
"464 1556 LINE",
"159 1556 LINE"
);
}
);
width = 1345;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"135 0 LINE",
"526 0 LINE",
"526 498 LINE SMOOTH",
"526 666 OFFCURVE",
"606 846 OFFCURVE",
"713 846 QCURVE SMOOTH",
"848 846 OFFCURVE",
"848 618 QCURVE SMOOTH",
"848 0 LINE",
"1241 0 LINE",
"1241 737 LINE SMOOTH",
"1241 885 OFFCURVE",
"1132 1067 OFFCURVE",
"950 1153 OFFCURVE",
"840 1153 QCURVE SMOOTH",
"737 1153 OFFCURVE",
"584 1081 OFFCURVE",
"528 993 QCURVE",
"510 993 LINE",
"514 1038 OFFCURVE",
"526 1208 OFFCURVE",
"526 1335 QCURVE SMOOTH",
"526 1556 LINE",
"135 1556 LINE"
);
}
);
width = 1372;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"159 1438 OFFCURVE",
"159 1413 QCURVE SMOOTH",
"159 1386 OFFCURVE",
"179 1350 OFFCURVE",
"210 1350 QCURVE SMOOTH",
"247 1350 OFFCURVE",
"265 1386 OFFCURVE",
"265 1413 QCURVE SMOOTH",
"265 1438 OFFCURVE",
"247 1477 OFFCURVE",
"210 1477 QCURVE SMOOTH",
"179 1477 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"184 0 LINE",
"237 0 LINE",
"237 1081 LINE",
"184 1081 LINE"
);
}
);
width = 423;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"159 1405 QCURVE SMOOTH",
"159 1315 OFFCURVE",
"237 1315 QCURVE SMOOTH",
"319 1315 OFFCURVE",
"319 1405 QCURVE SMOOTH",
"319 1493 OFFCURVE",
"237 1493 QCURVE SMOOTH",
"159 1493 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"179 0 LINE",
"294 0 LINE",
"294 1090 LINE",
"179 1090 LINE"
);
}
);
width = 475;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"159 1454 OFFCURVE",
"159 1395 QCURVE SMOOTH",
"159 1335 OFFCURVE",
"220 1280 OFFCURVE",
"265 1280 QCURVE SMOOTH",
"306 1280 OFFCURVE",
"370 1335 OFFCURVE",
"370 1395 QCURVE SMOOTH",
"370 1454 OFFCURVE",
"306 1509 OFFCURVE",
"265 1509 QCURVE SMOOTH",
"220 1509 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"354 1098 LINE",
"173 1098 LINE",
"173 0 LINE",
"354 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 37 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 33 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 37 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 33 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 37 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 97 4 1 0 0 33 77 0 2 2 34 77 5 1 3 3 32 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 0 0 1 2 0 1 105 0 2 2 34 77 5 1 3 3 32 3 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\01212 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 528;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"147 1493 OFFCURVE",
"147 1407 QCURVE SMOOTH",
"147 1323 OFFCURVE",
"243 1257 OFFCURVE",
"313 1257 QCURVE SMOOTH",
"380 1257 OFFCURVE",
"479 1323 OFFCURVE",
"479 1407 QCURVE SMOOTH",
"479 1493 OFFCURVE",
"380 1556 OFFCURVE",
"313 1556 QCURVE SMOOTH",
"243 1556 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"159 0 LINE",
"464 0 LINE",
"464 1118 LINE",
"159 1118 LINE"
);
}
);
width = 624;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"126 1520 OFFCURVE",
"126 1415 QCURVE SMOOTH",
"126 1315 OFFCURVE",
"247 1243 OFFCURVE",
"333 1243 QCURVE SMOOTH",
"417 1243 OFFCURVE",
"542 1315 OFFCURVE",
"542 1415 QCURVE SMOOTH",
"542 1520 OFFCURVE",
"417 1589 OFFCURVE",
"333 1589 QCURVE SMOOTH",
"247 1589 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"136 0 LINE",
"527 0 LINE",
"527 1133 LINE",
"136 1133 LINE"
);
}
);
width = 665;
}
);
note = i;
unicode = 0069;
},
{
glyphname = j;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"181 1350 OFFCURVE",
"211 1350 QCURVE SMOOTH",
"248 1350 OFFCURVE",
"267 1386 OFFCURVE",
"267 1413 QCURVE SMOOTH",
"267 1438 OFFCURVE",
"248 1477 OFFCURVE",
"211 1477 QCURVE SMOOTH",
"181 1477 OFFCURVE",
"160 1438 OFFCURVE",
"160 1413 QCURVE SMOOTH",
"160 1386 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"238 -371 OFFCURVE",
"238 -246 QCURVE SMOOTH",
"238 1081 LINE",
"185 1081 LINE",
"185 -238 LINE SMOOTH",
"185 -332 OFFCURVE",
"105 -440 OFFCURVE",
"23 -440 QCURVE SMOOTH",
"-8 -440 OFFCURVE",
"-71 -432 OFFCURVE",
"-102 -418 QCURVE",
"-102 -471 LINE",
"-77 -479 OFFCURVE",
"-16 -492 OFFCURVE",
"23 -492 QCURVE SMOOTH",
"111 -492 OFFCURVE"
);
}
);
width = 423;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"238 1315 QCURVE SMOOTH",
"320 1315 OFFCURVE",
"320 1405 QCURVE SMOOTH",
"320 1493 OFFCURVE",
"238 1493 QCURVE SMOOTH",
"160 1493 OFFCURVE",
"160 1405 QCURVE SMOOTH",
"160 1315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"295 -344 OFFCURVE",
"295 -205 QCURVE SMOOTH",
"295 1090 LINE",
"181 1090 LINE",
"181 -205 LINE SMOOTH",
"181 -301 OFFCURVE",
"97 -391 OFFCURVE",
"23 -391 QCURVE SMOOTH",
"-49 -391 OFFCURVE",
"-106 -369 QCURVE",
"-106 -469 LINE",
"-55 -492 OFFCURVE",
"33 -492 QCURVE SMOOTH",
"158 -492 OFFCURVE"
);
}
);
width = 475;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"222 1280 OFFCURVE",
"267 1280 QCURVE SMOOTH",
"308 1280 OFFCURVE",
"371 1335 OFFCURVE",
"371 1395 QCURVE SMOOTH",
"371 1454 OFFCURVE",
"308 1509 OFFCURVE",
"267 1509 QCURVE SMOOTH",
"222 1509 OFFCURVE",
"160 1454 OFFCURVE",
"160 1395 QCURVE SMOOTH",
"160 1335 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"355 -317 OFFCURVE",
"355 -164 QCURVE SMOOTH",
"355 1098 LINE",
"175 1098 LINE",
"175 -170 LINE SMOOTH",
"175 -270 OFFCURVE",
"89 -342 OFFCURVE",
"23 -342 QCURVE SMOOTH",
"-16 -342 OFFCURVE",
"-81 -332 OFFCURVE",
"-112 -322 QCURVE",
"-112 -467 LINE",
"-85 -477 OFFCURVE",
"-8 -492 OFFCURVE",
"46 -492 QCURVE SMOOTH",
"207 -492 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01216 1 3 4 15 1 2 3 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 37 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 33 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 37 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 33 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 37 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01243 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 1 1 0 97 0 0 0 33 77 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 0 1 4 0 1 105 0 4 4 34 77 0 3 3 2 97 5 1 2 2 36 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\01213 12 24 23 20 18 12 27 13 27 36 34 6 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 528;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"244 1257 OFFCURVE",
"313 1257 QCURVE SMOOTH",
"381 1257 OFFCURVE",
"479 1323 OFFCURVE",
"479 1407 QCURVE SMOOTH",
"479 1493 OFFCURVE",
"381 1556 OFFCURVE",
"313 1556 QCURVE SMOOTH",
"244 1556 OFFCURVE",
"148 1493 OFFCURVE",
"148 1407 QCURVE SMOOTH",
"148 1323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"387 -391 OFFCURVE",
"465 -223 OFFCURVE",
"465 -121 QCURVE SMOOTH",
"465 1118 LINE",
"160 1118 LINE",
"160 -76 LINE SMOOTH",
"160 -176 OFFCURVE",
"74 -246 OFFCURVE",
"12 -246 QCURVE SMOOTH",
"-29 -246 OFFCURVE",
"-94 -238 OFFCURVE",
"-131 -227 QCURVE",
"-131 -467 LINE",
"-94 -477 OFFCURVE",
"16 -492 OFFCURVE",
"70 -492 QCURVE SMOOTH",
"213 -492 OFFCURVE"
);
}
);
width = 624;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"246 1243 OFFCURVE",
"332 1243 QCURVE SMOOTH",
"416 1243 OFFCURVE",
"541 1315 OFFCURVE",
"541 1415 QCURVE SMOOTH",
"541 1520 OFFCURVE",
"416 1589 OFFCURVE",
"332 1589 QCURVE SMOOTH",
"246 1589 OFFCURVE",
"125 1520 OFFCURVE",
"125 1415 QCURVE SMOOTH",
"125 1315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"447 -377 OFFCURVE",
"527 -195 OFFCURVE",
"527 -92 QCURVE SMOOTH",
"527 1133 LINE",
"136 1133 LINE",
"136 -10 LINE SMOOTH",
"136 -113 OFFCURVE",
"64 -180 OFFCURVE",
"17 -180 QCURVE SMOOTH",
"-16 -180 OFFCURVE",
"-71 -172 OFFCURVE",
"-104 -162 QCURVE",
"-104 -467 LINE",
"-65 -477 OFFCURVE",
"60 -492 OFFCURVE",
"107 -492 QCURVE SMOOTH",
"263 -492 OFFCURVE"
);
}
);
width = 663;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"184 0 LINE",
"237 0 LINE",
"237 352 LINE",
"442 580 LINE",
"876 0 LINE",
"940 0 LINE",
"479 616 LINE",
"899 1081 LINE",
"829 1081 LINE",
"352 549 LINE SMOOTH",
"319 512 OFFCURVE",
"270 457 OFFCURVE",
"235 418 QCURVE",
"237 514 OFFCURVE",
"237 690 OFFCURVE",
"237 788 QCURVE SMOOTH",
"237 1556 LINE",
"184 1556 LINE"
);
}
);
width = 929;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"180 0 LINE",
"295 0 LINE",
"295 377 LINE",
"459 545 LINE",
"868 0 LINE",
"1007 0 LINE",
"540 623 LINE",
"971 1090 LINE",
"831 1090 LINE",
"418 639 LINE SMOOTH",
"387 606 OFFCURVE",
"319 522 OFFCURVE",
"293 489 QCURVE",
"291 489 LINE",
"291 559 OFFCURVE",
"295 700 OFFCURVE",
"295 766 QCURVE SMOOTH",
"295 1556 LINE",
"180 1556 LINE"
);
}
);
width = 1011;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"352 0 LINE",
"352 403 LINE",
"477 512 LINE",
"858 0 LINE",
"1075 0 LINE",
"600 629 LINE",
"1044 1098 LINE",
"833 1098 LINE",
"483 727 LINE SMOOTH",
"465 707 OFFCURVE",
"414 643 OFFCURVE",
"364 582 OFFCURVE",
"352 565 QCURVE",
"344 565 LINE",
"346 604 OFFCURVE",
"352 711 OFFCURVE",
"352 743 QCURVE SMOOTH",
"352 1556 LINE",
"174 1556 LINE",
"174 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01217 16 13 5 4 2 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 0 33 77 0 1 1 34 77 3 1 2 2 32 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 0 0 2 95 3 1 2 2 32 77 0 1 1 34 77 3 1 2 2 32 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01219 18 26 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1093;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"159 0 LINE",
"464 0 LINE",
"464 348 LINE",
"595 453 LINE",
"917 0 LINE",
"1269 0 LINE",
"798 633 LINE",
"1242 1118 LINE",
"898 1118 LINE",
"585 778 LINE SMOOTH",
"548 737 OFFCURVE",
"483 651 OFFCURVE",
"452 608 QCURVE",
"448 608 LINE",
"454 672 OFFCURVE",
"464 797 OFFCURVE",
"464 860 QCURVE SMOOTH",
"464 1556 LINE",
"159 1556 LINE"
);
}
);
width = 1269;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"135 0 LINE",
"528 0 LINE",
"528 309 LINE",
"655 406 LINE",
"903 0 LINE",
"1349 0 LINE",
"932 651 LINE",
"1325 1133 LINE",
"889 1133 LINE",
"635 813 LINE SMOOTH",
"610 780 OFFCURVE",
"553 698 OFFCURVE",
"514 637 OFFCURVE",
"514 637 QCURVE",
"506 637 LINE",
"516 707 OFFCURVE",
"528 874 OFFCURVE",
"528 944 QCURVE SMOOTH",
"528 1556 LINE",
"135 1556 LINE"
);
}
);
width = 1349;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"186 1556 LINE",
"186 0 LINE",
"239 0 LINE",
"239 1556 LINE"
);
}
);
width = 423;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"180 1556 LINE",
"180 0 LINE",
"297 0 LINE",
"297 1556 LINE"
);
}
);
width = 475;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"354 0 LINE",
"354 1556 LINE",
"174 1556 LINE",
"174 0 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 33 77 0 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 95 0 1 1 32 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 528;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"159 1556 LINE",
"159 0 LINE",
"464 0 LINE",
"464 1556 LINE"
);
}
);
width = 624;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"135 1556 LINE",
"135 0 LINE",
"526 0 LINE",
"526 1556 LINE"
);
}
);
width = 661;
}
);
note = l;
unicode = 006C;
},
{
glyphname = m;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"929 979 OFFCURVE",
"891 879 QCURVE",
"886 879 LINE",
"860 987 OFFCURVE",
"700 1102 OFFCURVE",
"587 1102 QCURVE SMOOTH",
"483 1102 OFFCURVE",
"344 1034 OFFCURVE",
"262 934 OFFCURVE",
"239 885 QCURVE",
"235 885 LINE",
"227 1081 LINE",
"184 1081 LINE",
"184 0 LINE",
"237 0 LINE",
"237 666 LINE SMOOTH",
"237 803 OFFCURVE",
"334 973 OFFCURVE",
"491 1051 OFFCURVE",
"587 1051 QCURVE SMOOTH",
"700 1051 OFFCURVE",
"854 901 OFFCURVE",
"854 737 QCURVE SMOOTH",
"854 0 LINE",
"907 0 LINE",
"907 666 LINE SMOOTH",
"907 872 OFFCURVE",
"1104 1051 OFFCURVE",
"1257 1051 QCURVE SMOOTH",
"1370 1051 OFFCURVE",
"1523 901 OFFCURVE",
"1523 737 QCURVE SMOOTH",
"1523 0 LINE",
"1577 0 LINE",
"1577 739 LINE SMOOTH",
"1577 926 OFFCURVE",
"1396 1102 OFFCURVE",
"1257 1102 QCURVE SMOOTH",
"1112 1102 OFFCURVE"
);
}
);
width = 1744;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1003 1004 OFFCURVE",
"958 905 QCURVE",
"950 905 LINE",
"917 1008 OFFCURVE",
"753 1110 OFFCURVE",
"635 1110 QCURVE SMOOTH",
"506 1110 OFFCURVE",
"340 997 OFFCURVE",
"299 918 QCURVE",
"291 918 LINE",
"274 1090 LINE",
"180 1090 LINE",
"180 0 LINE",
"295 0 LINE",
"295 618 LINE SMOOTH",
"295 817 OFFCURVE",
"463 1008 OFFCURVE",
"618 1008 QCURVE SMOOTH",
"733 1008 OFFCURVE",
"864 868 OFFCURVE",
"864 721 QCURVE SMOOTH",
"864 0 LINE",
"979 0 LINE",
"979 635 LINE SMOOTH",
"979 825 OFFCURVE",
"1147 1008 OFFCURVE",
"1302 1008 QCURVE SMOOTH",
"1417 1008 OFFCURVE",
"1548 868 OFFCURVE",
"1548 721 QCURVE SMOOTH",
"1548 0 LINE",
"1663 0 LINE",
"1663 727 LINE SMOOTH",
"1663 926 OFFCURVE",
"1480 1110 OFFCURVE",
"1319 1110 QCURVE SMOOTH",
"1192 1110 OFFCURVE"
);
}
);
width = 1830;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1081 1028 OFFCURVE",
"1026 934 QCURVE",
"1016 934 LINE",
"938 1118 OFFCURVE",
"680 1118 QCURVE SMOOTH",
"582 1118 OFFCURVE",
"407 1034 OFFCURVE",
"356 948 QCURVE",
"346 948 LINE",
"319 1098 LINE",
"174 1098 LINE",
"174 0 LINE",
"354 0 LINE",
"354 569 LINE SMOOTH",
"354 762 OFFCURVE",
"481 967 OFFCURVE",
"647 967 QCURVE SMOOTH",
"872 967 OFFCURVE",
"872 707 QCURVE SMOOTH",
"872 0 LINE",
"1051 0 LINE",
"1051 606 LINE SMOOTH",
"1051 782 OFFCURVE",
"1188 967 OFFCURVE",
"1348 967 QCURVE SMOOTH",
"1571 967 OFFCURVE",
"1571 707 QCURVE SMOOTH",
"1571 0 LINE",
"1749 0 LINE",
"1749 715 LINE SMOOTH",
"1749 926 OFFCURVE",
"1565 1118 OFFCURVE",
"1378 1118 QCURVE SMOOTH",
"1270 1118 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01230 24 2 1 2 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0124 1 2 2 0 97 7 6 8 3 0 0 40 77 5 3 2 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 6 6 34 77 4 1 2 2 0 97 7 8 2 0 0 40 77 5 3 2 1 1 32 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\0121 0 29 27 23 22 21 20 17 15 13 12 9 7 5 4 0 33 1 33 9 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1914;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1193 1061 OFFCURVE",
"1142 975 QCURVE",
"1115 975 LINE",
"1068 1059 OFFCURVE",
"898 1139 OFFCURVE",
"775 1139 QCURVE SMOOTH",
"679 1139 OFFCURVE",
"501 1061 OFFCURVE",
"450 975 QCURVE",
"433 975 LINE",
"392 1118 LINE",
"159 1118 LINE",
"159 0 LINE",
"464 0 LINE",
"464 526 LINE SMOOTH",
"464 705 OFFCURVE",
"560 895 OFFCURVE",
"687 895 QCURVE SMOOTH",
"855 895 OFFCURVE",
"855 653 QCURVE SMOOTH",
"855 0 LINE",
"1160 0 LINE",
"1160 561 LINE SMOOTH",
"1160 723 OFFCURVE",
"1263 895 OFFCURVE",
"1384 895 QCURVE SMOOTH",
"1552 895 OFFCURVE",
"1552 653 QCURVE SMOOTH",
"1552 0 LINE",
"1857 0 LINE",
"1857 729 LINE SMOOTH",
"1857 944 OFFCURVE",
"1662 1139 OFFCURVE",
"1472 1139 QCURVE SMOOTH",
"1376 1139 OFFCURVE"
);
}
);
width = 2011;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1241 1071 OFFCURVE",
"1188 995 QCURVE",
"1175 995 LINE",
"1124 1069 OFFCURVE",
"962 1153 OFFCURVE",
"837 1153 QCURVE SMOOTH",
"713 1153 OFFCURVE",
"543 1063 OFFCURVE",
"497 993 QCURVE",
"487 993 LINE",
"430 1133 LINE",
"135 1133 LINE",
"135 0 LINE",
"526 0 LINE",
"526 496 LINE SMOOTH",
"526 664 OFFCURVE",
"598 846 OFFCURVE",
"698 846 QCURVE SMOOTH",
"764 846 OFFCURVE",
"829 739 OFFCURVE",
"829 616 QCURVE SMOOTH",
"829 0 LINE",
"1220 0 LINE",
"1220 528 LINE SMOOTH",
"1220 680 OFFCURVE",
"1294 846 OFFCURVE",
"1388 846 QCURVE SMOOTH",
"1456 846 OFFCURVE",
"1526 745 OFFCURVE",
"1526 616 QCURVE SMOOTH",
"1526 0 LINE",
"1917 0 LINE",
"1917 737 LINE SMOOTH",
"1917 954 OFFCURVE",
"1712 1153 OFFCURVE",
"1517 1153 QCURVE SMOOTH",
"1411 1153 OFFCURVE"
);
}
);
width = 2048;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"360 1030 OFFCURVE",
"262 918 OFFCURVE",
"239 854 QCURVE",
"235 854 LINE",
"227 1081 LINE",
"184 1081 LINE",
"184 0 LINE",
"237 0 LINE",
"237 618 LINE SMOOTH",
"237 840 OFFCURVE",
"456 1051 OFFCURVE",
"633 1051 QCURVE SMOOTH",
"782 1051 OFFCURVE",
"948 887 OFFCURVE",
"948 707 QCURVE SMOOTH",
"948 0 LINE",
"1001 0 LINE",
"1001 709 LINE SMOOTH",
"1001 909 OFFCURVE",
"807 1102 OFFCURVE",
"633 1102 QCURVE SMOOTH",
"518 1102 OFFCURVE"
);
}
);
width = 1173;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"342 991 OFFCURVE",
"299 901 QCURVE",
"291 901 LINE",
"274 1090 LINE",
"180 1090 LINE",
"180 0 LINE",
"295 0 LINE",
"295 594 LINE SMOOTH",
"295 1008 OFFCURVE",
"655 1008 QCURVE SMOOTH",
"792 1008 OFFCURVE",
"934 860 OFFCURVE",
"934 705 QCURVE SMOOTH",
"934 0 LINE",
"1050 0 LINE",
"1050 713 LINE SMOOTH",
"1050 918 OFFCURVE",
"854 1110 OFFCURVE",
"667 1110 QCURVE SMOOTH",
"528 1110 OFFCURVE"
);
}
);
width = 1220;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"410 1034 OFFCURVE",
"356 948 QCURVE",
"346 948 LINE",
"319 1098 LINE",
"174 1098 LINE",
"174 0 LINE",
"354 0 LINE",
"354 569 LINE SMOOTH",
"354 762 OFFCURVE",
"493 967 OFFCURVE",
"676 967 QCURVE SMOOTH",
"922 967 OFFCURVE",
"922 702 QCURVE SMOOTH",
"922 0 LINE",
"1100 0 LINE",
"1100 715 LINE SMOOTH",
"1100 926 OFFCURVE",
"899 1118 OFFCURVE",
"702 1118 QCURVE SMOOTH",
"598 1118 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01216 1 1 2 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 2 2 0 97 4 5 2 0 0 40 77 3 1 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 4 4 34 77 0 2 2 0 97 5 1 0 0 40 77 3 1 1 1 32 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 15 14 13 12 9 7 5 4 0 19 1 19 6 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1265;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"503 1061 OFFCURVE",
"450 975 QCURVE",
"433 975 LINE",
"392 1118 LINE",
"159 1118 LINE",
"159 0 LINE",
"464 0 LINE",
"464 526 LINE SMOOTH",
"464 705 OFFCURVE",
"567 895 OFFCURVE",
"706 895 QCURVE SMOOTH",
"800 895 OFFCURVE",
"886 774 OFFCURVE",
"886 653 QCURVE SMOOTH",
"886 0 LINE",
"1191 0 LINE",
"1191 729 LINE SMOOTH",
"1191 944 OFFCURVE",
"974 1139 OFFCURVE",
"794 1139 QCURVE SMOOTH",
"689 1139 OFFCURVE"
);
}
);
width = 1345;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"551 1063 OFFCURVE",
"497 983 QCURVE",
"483 983 LINE",
"430 1133 LINE",
"135 1133 LINE",
"135 0 LINE",
"526 0 LINE",
"526 496 LINE SMOOTH",
"526 664 OFFCURVE",
"602 846 OFFCURVE",
"713 846 QCURVE SMOOTH",
"784 846 OFFCURVE",
"850 731 OFFCURVE",
"850 618 QCURVE SMOOTH",
"850 0 LINE",
"1241 0 LINE",
"1241 737 LINE SMOOTH",
"1241 954 OFFCURVE",
"1020 1153 OFFCURVE",
"844 1153 QCURVE SMOOTH",
"725 1153 OFFCURVE"
);
}
);
width = 1372;
}
);
note = n;
unicode = 006E;
},
{
glyphname = o;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"962 952 OFFCURVE",
"761 1102 OFFCURVE",
"597 1102 QCURVE SMOOTH",
"372 1102 OFFCURVE",
"120 799 OFFCURVE",
"120 541 QCURVE SMOOTH",
"120 381 OFFCURVE",
"222 127 OFFCURVE",
"429 -20 OFFCURVE",
"585 -20 QCURVE SMOOTH",
"745 -20 OFFCURVE",
"954 127 OFFCURVE",
"1054 381 OFFCURVE",
"1054 541 QCURVE SMOOTH",
"1054 696 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"394 1051 OFFCURVE",
"597 1051 QCURVE SMOOTH",
"741 1051 OFFCURVE",
"919 913 OFFCURVE",
"999 682 OFFCURVE",
"999 541 QCURVE SMOOTH",
"999 393 OFFCURVE",
"911 162 OFFCURVE",
"728 31 OFFCURVE",
"585 31 QCURVE SMOOTH",
"446 31 OFFCURVE",
"265 160 OFFCURVE",
"175 389 OFFCURVE",
"175 541 QCURVE SMOOTH",
"175 780 OFFCURVE"
);
}
);
width = 1177;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"980 969 OFFCURVE",
"765 1110 OFFCURVE",
"610 1110 QCURVE SMOOTH",
"380 1110 OFFCURVE",
"116 811 OFFCURVE",
"116 545 QCURVE SMOOTH",
"116 373 OFFCURVE",
"233 119 OFFCURVE",
"450 -20 OFFCURVE",
"601 -20 QCURVE SMOOTH",
"759 -20 OFFCURVE",
"978 121 OFFCURVE",
"1091 375 OFFCURVE",
"1091 545 QCURVE SMOOTH",
"1091 715 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"421 1008 OFFCURVE",
"608 1008 QCURVE SMOOTH",
"737 1008 OFFCURVE",
"896 889 OFFCURVE",
"970 680 OFFCURVE",
"970 545 QCURVE SMOOTH",
"970 336 OFFCURVE",
"792 80 OFFCURVE",
"601 80 QCURVE SMOOTH",
"413 80 OFFCURVE",
"237 336 OFFCURVE",
"237 545 QCURVE SMOOTH",
"237 762 OFFCURVE"
);
}
);
width = 1208;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"999 985 OFFCURVE",
"769 1118 OFFCURVE",
"622 1118 QCURVE SMOOTH",
"384 1118 OFFCURVE",
"112 823 OFFCURVE",
"112 551 QCURVE SMOOTH",
"112 369 OFFCURVE",
"243 113 OFFCURVE",
"470 -20 OFFCURVE",
"616 -20 QCURVE SMOOTH",
"851 -20 OFFCURVE",
"1128 279 OFFCURVE",
"1128 551 QCURVE SMOOTH",
"1128 733 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"450 967 OFFCURVE",
"618 967 QCURVE SMOOTH",
"786 967 OFFCURVE",
"941 745 OFFCURVE",
"941 551 QCURVE SMOOTH",
"941 356 OFFCURVE",
"786 129 OFFCURVE",
"620 129 QCURVE SMOOTH",
"452 129 OFFCURVE",
"298 356 OFFCURVE",
"298 551 QCURVE SMOOTH",
"298 745 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 3 3 1 97 0 1 1 40 77 0 2 2 0 97 0 0 0 38 0 78 36 37 37 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1239;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1036 1004 OFFCURVE",
"794 1139 OFFCURVE",
"637 1139 QCURVE SMOOTH",
"383 1139 OFFCURVE",
"92 840 OFFCURVE",
"92 561 QCURVE SMOOTH",
"92 375 OFFCURVE",
"231 115 OFFCURVE",
"475 -20 OFFCURVE",
"631 -20 QCURVE SMOOTH",
"883 -20 OFFCURVE",
"1175 283 OFFCURVE",
"1175 561 QCURVE SMOOTH",
"1175 745 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"512 893 OFFCURVE",
"633 893 QCURVE SMOOTH",
"756 893 OFFCURVE",
"864 727 OFFCURVE",
"864 561 QCURVE SMOOTH",
"864 395 OFFCURVE",
"756 225 OFFCURVE",
"635 225 QCURVE SMOOTH",
"512 225 OFFCURVE",
"403 395 OFFCURVE",
"403 561 QCURVE SMOOTH",
"403 727 OFFCURVE"
);
}
);
width = 1267;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1071 1018 OFFCURVE",
"819 1153 OFFCURVE",
"655 1153 QCURVE SMOOTH",
"389 1153 OFFCURVE",
"86 850 OFFCURVE",
"86 569 QCURVE SMOOTH",
"86 381 OFFCURVE",
"231 117 OFFCURVE",
"485 -20 OFFCURVE",
"649 -20 QCURVE SMOOTH",
"913 -20 OFFCURVE",
"1216 285 OFFCURVE",
"1216 569 QCURVE SMOOTH",
"1216 758 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"561 862 OFFCURVE",
"651 862 QCURVE SMOOTH",
"743 862 OFFCURVE",
"819 713 OFFCURVE",
"819 569 QCURVE SMOOTH",
"819 424 OFFCURVE",
"743 270 OFFCURVE",
"653 270 QCURVE SMOOTH",
"561 270 OFFCURVE",
"483 424 OFFCURVE",
"483 569 QCURVE SMOOTH",
"483 713 OFFCURVE"
);
}
);
width = 1304;
}
);
note = o;
unicode = 006F;
},
{
glyphname = p;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"364 1022 OFFCURVE",
"262 895 OFFCURVE",
"239 823 QCURVE",
"235 823 LINE",
"231 1081 LINE",
"186 1081 LINE",
"186 -475 LINE",
"239 -475 LINE",
"239 -31 LINE SMOOTH",
"239 33 OFFCURVE",
"237 168 OFFCURVE",
"235 238 QCURVE",
"239 238 LINE",
"274 131 OFFCURVE",
"458 -20 OFFCURVE",
"620 -20 QCURVE SMOOTH",
"837 -20 OFFCURVE",
"1077 279 OFFCURVE",
"1077 551 QCURVE SMOOTH",
"1077 821 OFFCURVE",
"856 1102 OFFCURVE",
"641 1102 QCURVE SMOOTH",
"528 1102 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1022 805 OFFCURVE",
"1022 551 QCURVE SMOOTH",
"1022 293 OFFCURVE",
"809 31 OFFCURVE",
"620 31 QCURVE SMOOTH",
"446 31 OFFCURVE",
"239 274 OFFCURVE",
"239 537 QCURVE SMOOTH",
"239 543 LINE SMOOTH",
"239 782 OFFCURVE",
"444 1051 OFFCURVE",
"641 1051 QCURVE SMOOTH",
"827 1051 OFFCURVE"
);
}
);
width = 1193;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 975 OFFCURVE",
"297 885 QCURVE",
"291 885 LINE",
"276 1090 LINE",
"180 1090 LINE",
"180 -483 LINE",
"297 -483 LINE",
"297 -37 LINE SMOOTH",
"297 16 OFFCURVE",
"291 135 OFFCURVE",
"289 188 QCURVE",
"297 188 LINE",
"338 102 OFFCURVE",
"512 -20 OFFCURVE",
"657 -20 QCURVE SMOOTH",
"868 -20 OFFCURVE",
"1112 272 OFFCURVE",
"1112 551 QCURVE SMOOTH",
"1112 829 OFFCURVE",
"876 1110 OFFCURVE",
"667 1110 QCURVE SMOOTH",
"516 1110 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"991 772 OFFCURVE",
"991 553 QCURVE SMOOTH",
"991 330 OFFCURVE",
"811 80 OFFCURVE",
"643 80 QCURVE SMOOTH",
"467 80 OFFCURVE",
"297 311 OFFCURVE",
"297 545 QCURVE SMOOTH",
"297 565 LINE SMOOTH",
"299 780 OFFCURVE",
"471 1008 OFFCURVE",
"651 1008 QCURVE SMOOTH",
"821 1008 OFFCURVE"
);
}
);
width = 1226;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"403 1020 OFFCURVE",
"354 948 QCURVE",
"346 948 LINE",
"321 1098 LINE",
"174 1098 LINE",
"174 -492 LINE",
"354 -492 LINE",
"354 -41 LINE SMOOTH",
"354 -2 OFFCURVE",
"344 104 OFFCURVE",
"342 139 QCURVE",
"354 139 LINE",
"401 74 OFFCURVE",
"567 -20 OFFCURVE",
"694 -20 QCURVE SMOOTH",
"899 -20 OFFCURVE",
"1147 270 OFFCURVE",
"1147 551 QCURVE SMOOTH",
"1147 836 OFFCURVE",
"899 1118 OFFCURVE",
"696 1118 QCURVE SMOOTH",
"563 1118 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"960 741 OFFCURVE",
"960 553 QCURVE SMOOTH",
"960 430 OFFCURVE",
"897 238 OFFCURVE",
"766 129 OFFCURVE",
"668 129 QCURVE SMOOTH",
"487 129 OFFCURVE",
"354 348 OFFCURVE",
"354 551 QCURVE SMOOTH",
"354 586 LINE SMOOTH",
"356 778 OFFCURVE",
"496 967 OFFCURVE",
"663 967 QCURVE SMOOTH",
"815 967 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 9 2 5 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0127 1 4 4 0 97 3 6 2 0 0 40 77 0 5 5 1 97 0 1 1 38 77 0 2 2 36 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 3 3 34 77 7 1 4 4 0 97 6 1 0 0 40 77 0 5 5 1 97 0 1 1 38 77 0 2 2 36 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01223 22 1 0 30 28 22 35 23 35 17 16 15 14 7 5 0 21 1 21 8 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 1259;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"509 1040 OFFCURVE",
"464 973 QCURVE",
"450 973 LINE",
"407 1118 LINE",
"159 1118 LINE",
"159 -492 LINE",
"464 -492 LINE",
"464 -41 LINE SMOOTH",
"464 37 OFFCURVE",
"448 123 QCURVE",
"464 123 LINE",
"509 68 OFFCURVE",
"653 -20 OFFCURVE",
"773 -20 QCURVE SMOOTH",
"962 -20 OFFCURVE",
"1203 274 OFFCURVE",
"1203 561 QCURVE SMOOTH",
"1203 846 OFFCURVE",
"970 1139 OFFCURVE",
"782 1139 QCURVE SMOOTH",
"661 1139 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"892 565 QCURVE SMOOTH",
"892 401 OFFCURVE",
"792 227 OFFCURVE",
"687 227 QCURVE SMOOTH",
"560 227 OFFCURVE",
"464 401 OFFCURVE",
"464 563 QCURVE SMOOTH",
"464 596 LINE SMOOTH",
"466 745 OFFCURVE",
"565 895 OFFCURVE",
"683 895 QCURVE SMOOTH",
"892 895 OFFCURVE"
);
}
);
width = 1296;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"567 1055 OFFCURVE",
"526 989 QCURVE",
"508 989 LINE",
"452 1133 LINE",
"135 1133 LINE",
"135 -492 LINE",
"526 -492 LINE",
"526 -78 LINE SMOOTH",
"526 -18 OFFCURVE",
"518 72 OFFCURVE",
"514 111 QCURVE",
"526 111 LINE",
"563 66 OFFCURVE",
"696 -20 OFFCURVE",
"815 -20 QCURVE SMOOTH",
"934 -20 OFFCURVE",
"1120 113 OFFCURVE",
"1229 377 OFFCURVE",
"1229 569 QCURVE SMOOTH",
"1229 852 OFFCURVE",
"1016 1153 OFFCURVE",
"827 1153 QCURVE SMOOTH",
"708 1153 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"831 723 OFFCURVE",
"831 573 QCURVE SMOOTH",
"831 422 OFFCURVE",
"756 295 OFFCURVE",
"682 295 QCURVE SMOOTH",
"592 295 OFFCURVE",
"526 436 OFFCURVE",
"526 571 QCURVE SMOOTH",
"526 602 LINE SMOOTH",
"528 723 OFFCURVE",
"594 846 OFFCURVE",
"680 846 QCURVE SMOOTH",
"753 846 OFFCURVE"
);
}
);
width = 1316;
}
);
note = p;
unicode = 0070;
},
{
glyphname = q;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1005 1081 LINE",
"960 1081 LINE",
"952 868 LINE",
"948 868 LINE",
"913 965 OFFCURVE",
"728 1102 OFFCURVE",
"583 1102 QCURVE SMOOTH",
"417 1102 OFFCURVE",
"210 948 OFFCURVE",
"114 692 OFFCURVE",
"114 537 QCURVE SMOOTH",
"114 262 OFFCURVE",
"335 -23 OFFCURVE",
"550 -23 QCURVE SMOOTH",
"706 -23 OFFCURVE",
"917 131 OFFCURVE",
"952 250 QCURVE",
"956 250 LINE",
"954 199 OFFCURVE",
"952 55 OFFCURVE",
"952 6 QCURVE SMOOTH",
"952 -475 LINE",
"1005 -475 LINE"
);
},
{
closed = 1;
nodes = (
"169 537 QCURVE SMOOTH",
"169 782 OFFCURVE",
"380 1051 OFFCURVE",
"583 1051 QCURVE SMOOTH",
"769 1051 OFFCURVE",
"952 801 OFFCURVE",
"952 563 QCURVE SMOOTH",
"952 543 LINE SMOOTH",
"952 303 OFFCURVE",
"757 29 OFFCURVE",
"550 29 QCURVE SMOOTH",
"169 29 OFFCURVE"
);
}
);
width = 1193;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1044 1090 LINE",
"950 1090 LINE",
"933 909 LINE",
"927 909 LINE",
"886 991 OFFCURVE",
"712 1110 OFFCURVE",
"573 1110 QCURVE SMOOTH",
"347 1110 OFFCURVE",
"114 799 OFFCURVE",
"114 541 QCURVE SMOOTH",
"114 264 OFFCURVE",
"347 -20 OFFCURVE",
"554 -20 QCURVE SMOOTH",
"698 -20 OFFCURVE",
"886 104 OFFCURVE",
"927 199 QCURVE",
"935 199 LINE",
"931 156 OFFCURVE",
"929 35 OFFCURVE",
"929 -8 QCURVE SMOOTH",
"929 -483 LINE",
"1044 -483 LINE"
);
},
{
closed = 1;
nodes = (
"233 315 OFFCURVE",
"233 541 QCURVE SMOOTH",
"233 760 OFFCURVE",
"409 1010 OFFCURVE",
"585 1010 QCURVE SMOOTH",
"767 1010 OFFCURVE",
"929 778 OFFCURVE",
"929 553 QCURVE SMOOTH",
"929 524 LINE SMOOTH",
"927 309 OFFCURVE",
"761 78 OFFCURVE",
"573 78 QCURVE SMOOTH",
"401 78 OFFCURVE"
);
}
);
width = 1226;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"941 1098 LINE",
"915 948 LINE",
"907 948 LINE",
"857 1020 OFFCURVE",
"694 1118 OFFCURVE",
"565 1118 QCURVE SMOOTH",
"364 1118 OFFCURVE",
"112 829 OFFCURVE",
"112 547 QCURVE SMOOTH",
"112 264 OFFCURVE",
"360 -20 OFFCURVE",
"558 -20 QCURVE SMOOTH",
"690 -20 OFFCURVE",
"855 78 OFFCURVE",
"903 147 QCURVE",
"915 147 LINE",
"909 113 OFFCURVE",
"905 14 OFFCURVE",
"905 -23 QCURVE SMOOTH",
"905 -492 LINE",
"1085 -492 LINE",
"1085 1098 LINE"
);
},
{
closed = 1;
nodes = (
"298 348 OFFCURVE",
"298 543 QCURVE SMOOTH",
"298 737 OFFCURVE",
"442 969 OFFCURVE",
"589 969 QCURVE SMOOTH",
"767 969 OFFCURVE",
"907 754 OFFCURVE",
"907 545 QCURVE SMOOTH",
"907 508 LINE SMOOTH",
"905 315 OFFCURVE",
"761 129 OFFCURVE",
"593 129 QCURVE SMOOTH",
"442 129 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01218 5 2 4 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 5 5 2 97 3 1 2 2 40 77 6 1 4 4 1 97 0 1 1 38 77 0 0 0 36 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 3 3 34 77 0 5 5 2 97 0 2 2 40 77 6 1 4 4 1 97 0 1 1 38 77 0 0 0 36 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\01223 22 30 28 22 34 23 34 20 36 39 16 7 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1259;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1136 1118 LINE",
"878 1118 LINE",
"852 975 LINE",
"844 975 LINE",
"797 1044 OFFCURVE",
"643 1139 OFFCURVE",
"520 1139 QCURVE SMOOTH",
"330 1139 OFFCURVE",
"92 844 OFFCURVE",
"92 557 QCURVE SMOOTH",
"92 272 OFFCURVE",
"325 -20 OFFCURVE",
"514 -20 QCURVE SMOOTH",
"637 -20 OFFCURVE",
"788 76 OFFCURVE",
"831 145 QCURVE",
"844 145 LINE",
"831 61 OFFCURVE",
"831 -23 QCURVE SMOOTH",
"831 -492 LINE",
"1136 -492 LINE"
);
},
{
closed = 1;
nodes = (
"403 553 QCURVE SMOOTH",
"403 717 OFFCURVE",
"510 891 OFFCURVE",
"618 891 QCURVE SMOOTH",
"751 891 OFFCURVE",
"852 717 OFFCURVE",
"852 555 QCURVE SMOOTH",
"852 518 LINE SMOOTH",
"848 369 OFFCURVE",
"749 219 OFFCURVE",
"622 219 QCURVE SMOOTH",
"403 219 OFFCURVE"
);
}
);
width = 1296;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1182 1133 LINE",
"844 1133 LINE",
"815 993 LINE",
"807 993 LINE",
"762 1061 OFFCURVE",
"616 1153 OFFCURVE",
"498 1153 QCURVE SMOOTH",
"315 1153 OFFCURVE",
"86 852 OFFCURVE",
"86 565 QCURVE SMOOTH",
"86 279 OFFCURVE",
"311 -20 OFFCURVE",
"492 -20 QCURVE SMOOTH",
"608 -20 OFFCURVE",
"750 76 OFFCURVE",
"791 143 QCURVE",
"803 143 LINE",
"791 61 OFFCURVE",
"791 -23 QCURVE SMOOTH",
"791 -492 LINE",
"1182 -492 LINE"
);
},
{
closed = 1;
nodes = (
"483 412 OFFCURVE",
"483 559 QCURVE SMOOTH",
"483 850 OFFCURVE",
"645 850 QCURVE SMOOTH",
"750 850 OFFCURVE",
"821 705 OFFCURVE",
"821 571 QCURVE SMOOTH",
"821 524 LINE SMOOTH",
"821 403 OFFCURVE",
"745 283 OFFCURVE",
"651 283 QCURVE SMOOTH",
"565 283 OFFCURVE"
);
}
);
width = 1316;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"272 969 OFFCURVE",
"243 874 QCURVE",
"239 874 LINE",
"235 1081 LINE",
"186 1081 LINE",
"186 0 LINE",
"239 0 LINE",
"239 608 LINE SMOOTH",
"239 809 OFFCURVE",
"399 1047 OFFCURVE",
"569 1047 QCURVE SMOOTH",
"614 1047 OFFCURVE",
"684 1036 OFFCURVE",
"723 1026 QCURVE",
"735 1075 LINE",
"698 1085 OFFCURVE",
"618 1098 OFFCURVE",
"569 1098 QCURVE SMOOTH",
"438 1098 OFFCURVE"
);
}
);
width = 768;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 977 OFFCURVE",
"297 885 QCURVE",
"291 885 LINE",
"278 1090 LINE",
"180 1090 LINE",
"180 0 LINE",
"297 0 LINE",
"297 598 LINE SMOOTH",
"297 780 OFFCURVE",
"471 999 OFFCURVE",
"622 999 QCURVE SMOOTH",
"659 999 OFFCURVE",
"725 991 OFFCURVE",
"758 983 QCURVE",
"774 1090 LINE",
"712 1108 OFFCURVE",
"626 1108 QCURVE SMOOTH",
"504 1108 OFFCURVE"
);
}
);
width = 806;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"401 987 OFFCURVE",
"350 897 QCURVE",
"342 897 LINE",
"321 1098 LINE",
"174 1098 LINE",
"174 0 LINE",
"354 0 LINE",
"354 586 LINE SMOOTH",
"354 696 OFFCURVE",
"442 862 OFFCURVE",
"590 954 OFFCURVE",
"674 954 QCURVE SMOOTH",
"700 954 OFFCURVE",
"766 946 OFFCURVE",
"792 940 QCURVE",
"815 1106 LINE",
"786 1112 OFFCURVE",
"717 1118 OFFCURVE",
"686 1118 QCURVE SMOOTH",
"571 1118 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0123 1 1 0 16 4 2 2 1 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0123 1 3 0 16 4 2 2 1 2 76 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0120 1 1 0 97 3 4 2 0 0 40 77 0 2 2 32 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 3 3 34 77 0 1 1 0 97 4 1 0 0 40 77 0 2 2 32 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 15 values pushed */\0121 0 15 14 13 12 8 6 0 19 1 19 5 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 845;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"499 1016 OFFCURVE",
"450 930 QCURVE",
"435 930 LINE",
"390 1118 LINE",
"159 1118 LINE",
"159 0 LINE",
"464 0 LINE",
"464 569 LINE SMOOTH",
"464 676 OFFCURVE",
"552 799 OFFCURVE",
"696 854 OFFCURVE",
"773 854 QCURVE SMOOTH",
"794 854 OFFCURVE",
"847 848 OFFCURVE",
"864 844 QCURVE",
"886 1130 LINE",
"868 1135 OFFCURVE",
"806 1139 OFFCURVE",
"784 1139 QCURVE SMOOTH",
"671 1139 OFFCURVE"
);
}
);
width = 929;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"553 1036 OFFCURVE",
"506 952 QCURVE",
"487 952 LINE",
"426 1133 LINE",
"135 1133 LINE",
"135 0 LINE",
"526 0 LINE",
"526 557 LINE SMOOTH",
"526 659 OFFCURVE",
"606 756 OFFCURVE",
"721 784 OFFCURVE",
"770 784 QCURVE SMOOTH",
"823 784 OFFCURVE",
"883 776 OFFCURVE",
"903 772 QCURVE",
"938 1141 LINE",
"921 1143 OFFCURVE",
"852 1153 OFFCURVE",
"819 1153 QCURVE SMOOTH",
"723 1153 OFFCURVE"
);
}
);
width = 960;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"734 492 OFFCURVE",
"566 557 OFFCURVE",
"476 586 QCURVE SMOOTH",
"392 612 OFFCURVE",
"253 662 OFFCURVE",
"169 750 OFFCURVE",
"169 834 QCURVE SMOOTH",
"169 942 OFFCURVE",
"339 1051 OFFCURVE",
"487 1051 QCURVE SMOOTH",
"568 1051 OFFCURVE",
"734 1016 OFFCURVE",
"792 989 QCURVE",
"814 1040 LINE",
"749 1067 OFFCURVE",
"583 1102 OFFCURVE",
"487 1102 QCURVE SMOOTH",
"315 1102 OFFCURVE",
"114 958 OFFCURVE",
"114 834 QCURVE SMOOTH",
"114 733 OFFCURVE",
"206 625 OFFCURVE",
"364 565 OFFCURVE",
"458 537 QCURVE SMOOTH",
"548 510 OFFCURVE",
"697 451 OFFCURVE",
"786 354 OFFCURVE",
"786 274 QCURVE SMOOTH",
"786 160 OFFCURVE",
"622 31 OFFCURVE",
"435 31 QCURVE SMOOTH",
"241 31 OFFCURVE",
"79 111 QCURVE",
"79 49 LINE",
"138 23 OFFCURVE",
"323 -20 OFFCURVE",
"435 -20 QCURVE SMOOTH",
"638 -20 OFFCURVE",
"841 137 OFFCURVE",
"841 274 QCURVE SMOOTH",
"841 377 OFFCURVE"
);
}
);
width = 937;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"772 500 OFFCURVE",
"614 573 OFFCURVE",
"518 606 QCURVE SMOOTH",
"424 639 OFFCURVE",
"293 694 OFFCURVE",
"223 770 OFFCURVE",
"223 836 QCURVE SMOOTH",
"223 922 OFFCURVE",
"366 1012 OFFCURVE",
"495 1012 QCURVE SMOOTH",
"575 1012 OFFCURVE",
"735 975 OFFCURVE",
"799 946 QCURVE",
"839 1042 LINE",
"770 1071 OFFCURVE",
"600 1110 OFFCURVE",
"502 1110 QCURVE SMOOTH",
"323 1110 OFFCURVE",
"110 963 OFFCURVE",
"110 831 QCURVE SMOOTH",
"110 735 OFFCURVE",
"196 623 OFFCURVE",
"350 553 OFFCURVE",
"450 518 QCURVE SMOOTH",
"600 467 OFFCURVE",
"749 371 OFFCURVE",
"749 281 QCURVE SMOOTH",
"749 186 OFFCURVE",
"606 78 OFFCURVE",
"446 78 QCURVE SMOOTH",
"350 78 OFFCURVE",
"166 125 OFFCURVE",
"94 162 QCURVE",
"94 49 LINE",
"153 20 OFFCURVE",
"327 -20 OFFCURVE",
"442 -20 QCURVE SMOOTH",
"645 -20 OFFCURVE",
"864 139 OFFCURVE",
"864 289 QCURVE SMOOTH",
"864 385 OFFCURVE"
);
}
);
width = 958;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"811 508 OFFCURVE",
"663 590 OFFCURVE",
"559 629 QCURVE SMOOTH",
"454 668 OFFCURVE",
"329 729 OFFCURVE",
"276 791 OFFCURVE",
"276 838 QCURVE SMOOTH",
"276 899 OFFCURVE",
"393 971 OFFCURVE",
"503 971 QCURVE SMOOTH",
"583 971 OFFCURVE",
"735 930 OFFCURVE",
"804 901 QCURVE",
"866 1044 LINE",
"790 1077 OFFCURVE",
"616 1118 OFFCURVE",
"516 1118 QCURVE SMOOTH",
"331 1118 OFFCURVE",
"104 967 OFFCURVE",
"104 827 QCURVE SMOOTH",
"104 737 OFFCURVE",
"186 623 OFFCURVE",
"337 541 OFFCURVE",
"444 500 QCURVE SMOOTH",
"553 459 OFFCURVE",
"669 393 OFFCURVE",
"714 328 OFFCURVE",
"714 287 QCURVE SMOOTH",
"714 213 OFFCURVE",
"591 125 OFFCURVE",
"454 125 QCURVE SMOOTH",
"358 125 OFFCURVE",
"172 180 OFFCURVE",
"106 213 QCURVE",
"106 49 LINE",
"170 16 OFFCURVE",
"335 -20 OFFCURVE",
"450 -20 QCURVE SMOOTH",
"651 -20 OFFCURVE",
"888 143 OFFCURVE",
"888 303 QCURVE SMOOTH",
"888 391 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\01227 1 3 2 28 7 2 1 3 6 1 0 1 3 76 0 3 3 2 97 0 2 2 40 77 0 1 1 0 97 0 0 0 38 0 78 37 44 37 34 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 980;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"864 557 OFFCURVE",
"725 641 OFFCURVE",
"629 680 QCURVE SMOOTH",
"530 721 OFFCURVE",
"430 770 OFFCURVE",
"395 813 OFFCURVE",
"395 840 QCURVE SMOOTH",
"395 913 OFFCURVE",
"530 913 QCURVE SMOOTH",
"606 913 OFFCURVE",
"754 866 OFFCURVE",
"835 831 QCURVE",
"928 1051 LINE",
"827 1098 OFFCURVE",
"639 1139 OFFCURVE",
"534 1139 QCURVE SMOOTH",
"334 1139 OFFCURVE",
"92 983 OFFCURVE",
"92 827 QCURVE SMOOTH",
"92 733 OFFCURVE",
"158 608 OFFCURVE",
"291 520 OFFCURVE",
"397 475 QCURVE SMOOTH",
"506 430 OFFCURVE",
"608 373 OFFCURVE",
"639 328 OFFCURVE",
"639 299 QCURVE SMOOTH",
"639 256 OFFCURVE",
"561 203 OFFCURVE",
"473 203 QCURVE SMOOTH",
"393 203 OFFCURVE",
"184 256 OFFCURVE",
"94 297 QCURVE",
"94 45 LINE",
"178 10 OFFCURVE",
"346 -20 OFFCURVE",
"463 -20 QCURVE SMOOTH",
"700 -20 OFFCURVE",
"940 162 OFFCURVE",
"940 332 QCURVE SMOOTH",
"940 430 OFFCURVE"
);
}
);
width = 1017;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"913 578 OFFCURVE",
"784 668 OFFCURVE",
"686 709 QCURVE SMOOTH",
"592 745 OFFCURVE",
"494 788 OFFCURVE",
"459 819 OFFCURVE",
"459 842 QCURVE SMOOTH",
"459 889 OFFCURVE",
"555 889 QCURVE SMOOTH",
"606 889 OFFCURVE",
"778 844 OFFCURVE",
"862 805 QCURVE",
"969 1057 LINE",
"862 1104 OFFCURVE",
"666 1153 OFFCURVE",
"553 1153 QCURVE SMOOTH",
"342 1153 OFFCURVE",
"86 985 OFFCURVE",
"86 819 QCURVE SMOOTH",
"86 680 OFFCURVE",
"225 524 OFFCURVE",
"367 467 QCURVE SMOOTH",
"463 428 OFFCURVE",
"567 383 OFFCURVE",
"608 346 OFFCURVE",
"608 322 QCURVE SMOOTH",
"608 264 OFFCURVE",
"481 264 QCURVE SMOOTH",
"418 264 OFFCURVE",
"197 307 OFFCURVE",
"88 356 QCURVE",
"88 43 LINE",
"186 6 OFFCURVE",
"377 -20 OFFCURVE",
"498 -20 QCURVE SMOOTH",
"670 -20 OFFCURVE",
"881 74 OFFCURVE",
"977 242 OFFCURVE",
"977 348 QCURVE SMOOTH",
"977 446 OFFCURVE"
);
}
);
width = 1058;
}
);
note = s;
unicode = 0073;
},
{
glyphname = t;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"239 168 OFFCURVE",
"239 293 QCURVE SMOOTH",
"239 1030 LINE",
"591 1030 LINE",
"591 1081 LINE",
"239 1081 LINE",
"239 1350 LINE",
"196 1350 LINE",
"184 1081 LINE",
"20 1075 LINE",
"20 1030 LINE",
"186 1030 LINE",
"186 287 LINE SMOOTH",
"186 143 OFFCURVE",
"290 -20 OFFCURVE",
"434 -20 QCURVE SMOOTH",
"487 -20 OFFCURVE",
"561 -4 OFFCURVE",
"595 6 QCURVE",
"595 57 LINE",
"561 45 OFFCURVE",
"485 31 OFFCURVE",
"434 31 QCURVE SMOOTH",
"319 31 OFFCURVE"
);
}
);
width = 653;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"302 307 QCURVE SMOOTH",
"302 995 LINE",
"638 995 LINE",
"638 1090 LINE",
"302 1090 LINE",
"302 1350 LINE",
"229 1350 LINE",
"188 1098 LINE",
"26 1061 LINE",
"26 995 LINE",
"188 995 LINE",
"188 303 LINE SMOOTH",
"188 133 OFFCURVE",
"335 -20 OFFCURVE",
"470 -20 QCURVE SMOOTH",
"524 -20 OFFCURVE",
"612 -4 OFFCURVE",
"644 8 QCURVE",
"644 102 LINE",
"616 92 OFFCURVE",
"532 78 OFFCURVE",
"487 78 QCURVE SMOOTH",
"302 78 OFFCURVE"
);
}
);
width = 696;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"368 223 OFFCURVE",
"368 324 QCURVE SMOOTH",
"368 958 LINE",
"685 958 LINE",
"685 1098 LINE",
"368 1098 LINE",
"368 1350 LINE",
"261 1350 LINE",
"190 1116 LINE",
"32 1044 LINE",
"32 958 LINE",
"188 958 LINE",
"188 319 LINE SMOOTH",
"188 186 OFFCURVE",
"278 39 OFFCURVE",
"423 -20 OFFCURVE",
"509 -20 QCURVE SMOOTH",
"558 -20 OFFCURVE",
"665 -2 OFFCURVE",
"694 12 QCURVE",
"694 150 LINE",
"667 139 OFFCURVE",
"581 127 OFFCURVE",
"540 127 QCURVE SMOOTH",
"464 127 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01214 1 2 4 3 1 0 2 4 1 1 0 3 76 0 3 4 3 133 5 1 2 2 4 95 0 4 4 34 77 6 1 0 0 1 97 0 1 1 38 1 78 1 0 21 20 19 18 17 16 13 12 8 6 0 24 1 24 7 8 22 \012CALL[ ]	/* CallFunction */";
};
width = 739;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"498 287 OFFCURVE",
"498 350 QCURVE SMOOTH",
"498 889 LINE",
"811 889 LINE",
"811 1118 LINE",
"498 1118 LINE",
"498 1356 LINE",
"303 1356 LINE",
"215 1120 LINE",
"47 1018 LINE",
"47 889 LINE",
"192 889 LINE",
"192 350 LINE SMOOTH",
"192 205 OFFCURVE",
"285 45 OFFCURVE",
"442 -20 OFFCURVE",
"543 -20 QCURVE SMOOTH",
"629 -20 OFFCURVE",
"774 8 OFFCURVE",
"823 31 QCURVE",
"823 258 LINE",
"776 242 OFFCURVE",
"682 223 OFFCURVE",
"631 223 QCURVE SMOOTH",
"571 223 OFFCURVE"
);
}
);
width = 888;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"583 399 QCURVE SMOOTH",
"583 840 LINE",
"862 840 LINE",
"862 1133 LINE",
"583 1133 LINE",
"583 1360 LINE",
"327 1360 LINE",
"227 1122 LINE",
"53 999 LINE",
"53 840 LINE",
"190 840 LINE",
"190 373 LINE SMOOTH",
"190 219 OFFCURVE",
"282 49 OFFCURVE",
"450 -20 OFFCURVE",
"561 -20 QCURVE SMOOTH",
"671 -20 OFFCURVE",
"815 16 OFFCURVE",
"878 43 QCURVE",
"878 328 LINE",
"831 311 OFFCURVE",
"741 289 OFFCURVE",
"690 289 QCURVE SMOOTH",
"583 289 OFFCURVE"
);
}
);
width = 942;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"931 463 LINE SMOOTH",
"931 242 OFFCURVE",
"712 31 OFFCURVE",
"536 31 QCURVE SMOOTH",
"384 31 OFFCURVE",
"220 201 OFFCURVE",
"220 381 QCURVE SMOOTH",
"220 1081 LINE",
"167 1081 LINE",
"167 373 LINE SMOOTH",
"167 180 OFFCURVE",
"355 -20 OFFCURVE",
"536 -20 QCURVE SMOOTH",
"650 -20 OFFCURVE",
"808 51 OFFCURVE",
"904 164 OFFCURVE",
"929 227 QCURVE",
"933 227 LINE",
"941 0 LINE",
"984 0 LINE",
"984 1081 LINE",
"931 1081 LINE"
);
}
);
width = 1173;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"921 496 LINE SMOOTH",
"921 80 OFFCURVE",
"560 80 QCURVE SMOOTH",
"421 80 OFFCURVE",
"282 229 OFFCURVE",
"282 385 QCURVE SMOOTH",
"282 1090 LINE",
"163 1090 LINE",
"163 377 LINE SMOOTH",
"163 -20 OFFCURVE",
"548 -20 QCURVE SMOOTH",
"687 -20 OFFCURVE",
"874 98 OFFCURVE",
"919 186 QCURVE",
"925 186 LINE",
"941 0 LINE",
"1037 0 LINE",
"1037 1090 LINE",
"921 1090 LINE"
);
}
);
width = 1220;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"911 334 OFFCURVE",
"769 129 OFFCURVE",
"587 129 QCURVE SMOOTH",
"343 129 OFFCURVE",
"343 391 QCURVE SMOOTH",
"343 1098 LINE",
"161 1098 LINE",
"161 379 LINE SMOOTH",
"161 170 OFFCURVE",
"362 -20 OFFCURVE",
"560 -20 QCURVE SMOOTH",
"667 -20 OFFCURVE",
"855 59 OFFCURVE",
"909 145 QCURVE",
"917 145 LINE",
"943 0 LINE",
"1091 0 LINE",
"1091 1098 LINE",
"911 1098 LINE",
"911 526 LINE SMOOTH"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0124 1 4 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0123 1 0 0 34 77 0 4 4 1 97 2 1 1 1 32 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 0 0 34 77 0 1 1 32 77 0 4 4 2 97 0 2 2 38 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 19 36 17 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1265;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"880 592 LINE SMOOTH",
"880 414 OFFCURVE",
"778 223 OFFCURVE",
"638 223 QCURVE SMOOTH",
"544 223 OFFCURVE",
"458 344 OFFCURVE",
"458 465 QCURVE SMOOTH",
"458 1118 LINE",
"153 1118 LINE",
"153 389 LINE SMOOTH",
"153 174 OFFCURVE",
"370 -20 OFFCURVE",
"550 -20 QCURVE SMOOTH",
"655 -20 OFFCURVE",
"841 57 OFFCURVE",
"894 143 QCURVE",
"911 143 LINE",
"952 0 LINE",
"1185 0 LINE",
"1185 1118 LINE",
"880 1118 LINE"
);
}
);
width = 1345;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"846 637 LINE SMOOTH",
"846 467 OFFCURVE",
"770 289 OFFCURVE",
"659 289 QCURVE SMOOTH",
"588 289 OFFCURVE",
"524 403 OFFCURVE",
"524 514 QCURVE SMOOTH",
"524 1133 LINE",
"133 1133 LINE",
"133 395 LINE SMOOTH",
"133 250 OFFCURVE",
"237 66 OFFCURVE",
"418 -20 OFFCURVE",
"528 -20 QCURVE SMOOTH",
"633 -20 OFFCURVE",
"817 55 OFFCURVE",
"870 141 QCURVE",
"893 141 LINE",
"942 0 LINE",
"1237 0 LINE",
"1237 1133 LINE",
"846 1133 LINE"
);
}
);
width = 1372;
}
);
note = u;
unicode = 0075;
},
{
glyphname = v;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"881 1081 LINE",
"825 1081 LINE",
"518 283 LINE SMOOTH",
"492 217 OFFCURVE",
"461 125 OFFCURVE",
"442 74 QCURVE",
"438 74 LINE",
"422 125 OFFCURVE",
"389 217 OFFCURVE",
"362 283 QCURVE SMOOTH",
"55 1081 LINE",
"0 1081 LINE",
"418 0 LINE",
"463 0 LINE"
);
}
);
width = 880;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"961 1090 LINE",
"836 1090 LINE",
"565 367 LINE SMOOTH",
"541 301 OFFCURVE",
"498 168 OFFCURVE",
"483 117 QCURVE",
"475 117 LINE",
"463 168 OFFCURVE",
"420 299 OFFCURVE",
"393 367 QCURVE SMOOTH",
"123 1090 LINE",
"0 1090 LINE",
"418 0 LINE",
"543 0 LINE"
);
}
);
width = 960;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"848 1098 LINE",
"614 451 LINE SMOOTH",
"598 406 OFFCURVE",
"561 297 OFFCURVE",
"528 193 OFFCURVE",
"522 160 QCURVE",
"514 160 LINE",
"508 193 OFFCURVE",
"479 295 OFFCURVE",
"442 406 OFFCURVE",
"426 451 QCURVE SMOOTH",
"193 1098 LINE",
"0 1098 LINE",
"416 0 LINE",
"623 0 LINE",
"1040 1098 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0128 1 0 1 1 76 2 1 1 1 34 77 0 0 0 32 0 78 27 17 16 3 8 25 \012CALL[ ]	/* CallFunction */";
};
width = 1040;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1165 1118 LINE",
"846 1118 LINE",
"631 481 LINE SMOOTH",
"592 362 OFFCURVE",
"586 252 QCURVE",
"578 252 LINE",
"573 301 OFFCURVE",
"553 424 OFFCURVE",
"535 481 QCURVE SMOOTH",
"319 1118 LINE",
"0 1118 LINE",
"426 0 LINE",
"739 0 LINE"
);
}
);
width = 1165;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1251 1133 LINE",
"844 1133 LINE",
"643 461 LINE SMOOTH",
"639 444 OFFCURVE",
"625 381 OFFCURVE",
"625 348 QCURVE",
"618 348 LINE",
"618 381 OFFCURVE",
"602 455 OFFCURVE",
"600 463 QCURVE SMOOTH",
"408 1133 LINE",
"0 1133 LINE",
"432 0 LINE",
"819 0 LINE"
);
}
);
width = 1251;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1369 1079 LINE",
"1316 1079 LINE",
"1113 319 LINE SMOOTH",
"1091 231 OFFCURVE",
"1064 131 OFFCURVE",
"1058 84 QCURVE",
"1054 84 LINE",
"1031 172 OFFCURVE",
"984 322 QCURVE SMOOTH",
"741 1079 LINE",
"698 1079 LINE",
"442 319 LINE SMOOTH",
"411 225 OFFCURVE",
"384 131 OFFCURVE",
"372 84 QCURVE",
"368 84 LINE",
"358 131 OFFCURVE",
"333 225 OFFCURVE",
"306 319 QCURVE SMOOTH",
"91 1079 LINE",
"32 1079 LINE",
"345 -2 LINE",
"390 -2 LINE",
"655 795 LINE SMOOTH",
"685 885 OFFCURVE",
"714 987 QCURVE",
"718 987 LINE",
"732 932 OFFCURVE",
"761 848 OFFCURVE",
"777 795 QCURVE SMOOTH",
"1036 -2 LINE",
"1081 -2 LINE"
);
}
);
width = 1402;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1478 1090 LINE",
"1359 1090 LINE",
"1181 416 LINE SMOOTH",
"1158 326 OFFCURVE",
"1124 184 OFFCURVE",
"1118 135 QCURVE",
"1109 135 LINE",
"1101 188 OFFCURVE",
"1060 328 OFFCURVE",
"1040 401 QCURVE",
"823 1090 LINE",
"704 1090 LINE",
"479 401 LINE SMOOTH",
"450 319 OFFCURVE",
"417 184 OFFCURVE",
"405 135 QCURVE",
"401 135 LINE",
"393 188 OFFCURVE",
"358 326 OFFCURVE",
"333 416 QCURVE SMOOTH",
"149 1090 LINE",
"28 1090 LINE",
"335 0 LINE",
"458 0 LINE",
"690 707 LINE SMOOTH",
"712 774 OFFCURVE",
"745 897 OFFCURVE",
"757 950 QCURVE",
"761 950 LINE",
"773 897 OFFCURVE",
"810 776 OFFCURVE",
"831 709 QCURVE SMOOTH",
"1052 0 LINE",
"1181 0 LINE"
);
}
);
width = 1507;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1402 1100 LINE",
"1249 514 LINE SMOOTH",
"1224 420 OFFCURVE",
"1181 240 OFFCURVE",
"1175 188 QCURVE",
"1167 188 LINE",
"1159 246 OFFCURVE",
"1114 410 OFFCURVE",
"1093 481 QCURVE SMOOTH",
"905 1100 LINE",
"708 1100 LINE",
"514 481 LINE SMOOTH",
"499 436 OFFCURVE",
"471 324 OFFCURVE",
"446 221 OFFCURVE",
"440 186 QCURVE",
"432 186 LINE",
"423 246 OFFCURVE",
"382 426 OFFCURVE",
"360 514 QCURVE SMOOTH",
"208 1100 LINE",
"22 1100 LINE",
"323 2 LINE",
"528 2 LINE",
"724 618 LINE SMOOTH",
"753 705 OFFCURVE",
"790 864 OFFCURVE",
"798 911 QCURVE",
"806 911 LINE",
"815 864 OFFCURVE",
"856 705 OFFCURVE",
"882 621 QCURVE SMOOTH",
"1071 2 LINE",
"1282 2 LINE",
"1587 1100 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\01228 17 5 3 0 2 1 76 4 3 2 2 2 34 77 1 1 0 0 32 0 78 25 26 17 25 16 5 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 1609;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1732 1118 LINE",
"1433 1118 LINE",
"1300 623 LINE SMOOTH",
"1286 569 OFFCURVE",
"1259 424 OFFCURVE",
"1239 291 OFFCURVE",
"1234 256 QCURVE",
"1226 256 LINE",
"1224 295 OFFCURVE",
"1208 426 OFFCURVE",
"1183 553 OFFCURVE",
"1177 582 QCURVE SMOOTH",
"1046 1118 LINE",
"710 1118 LINE",
"573 582 LINE SMOOTH",
"569 565 OFFCURVE",
"555 483 OFFCURVE",
"536 381 OFFCURVE",
"524 285 OFFCURVE",
"522 256 QCURVE",
"514 256 LINE",
"507 295 OFFCURVE",
"489 428 OFFCURVE",
"466 569 OFFCURVE",
"452 623 QCURVE SMOOTH",
"323 1118 LINE",
"20 1118 LINE",
"337 0 LINE",
"665 0 LINE",
"755 387 LINE SMOOTH",
"763 424 OFFCURVE",
"796 563 OFFCURVE",
"833 721 OFFCURVE",
"864 854 OFFCURVE",
"870 885 QCURVE",
"878 885 LINE",
"884 854 OFFCURVE",
"917 721 OFFCURVE",
"954 563 OFFCURVE",
"985 426 OFFCURVE",
"993 391 QCURVE SMOOTH",
"1079 0 LINE",
"1411 0 LINE"
);
}
);
width = 1753;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1839 1133 LINE",
"1462 1133 LINE",
"1361 698 LINE SMOOTH",
"1351 655 OFFCURVE",
"1331 522 OFFCURVE",
"1314 381 OFFCURVE",
"1310 326 QCURVE",
"1304 326 LINE",
"1298 379 OFFCURVE",
"1277 510 OFFCURVE",
"1255 631 OFFCURVE",
"1247 670 QCURVE SMOOTH",
"1150 1133 LINE",
"718 1133 LINE",
"614 676 LINE SMOOTH",
"610 662 OFFCURVE",
"595 580 OFFCURVE",
"577 473 OFFCURVE",
"561 367 OFFCURVE",
"559 326 QCURVE",
"552 326 LINE",
"548 381 OFFCURVE",
"532 516 OFFCURVE",
"511 651 OFFCURVE",
"501 698 QCURVE SMOOTH",
"409 1133 LINE",
"24 1133 LINE",
"333 0 LINE",
"745 0 LINE",
"860 481 LINE",
"872 541 OFFCURVE",
"901 680 OFFCURVE",
"921 803 OFFCURVE",
"925 834 QCURVE",
"931 834 LINE",
"935 803 OFFCURVE",
"954 682 OFFCURVE",
"978 547 OFFCURVE",
"991 496 QCURVE SMOOTH",
"1109 0 LINE",
"1527 0 LINE"
);
}
);
width = 1863;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"116 0 LINE",
"483 518 LINE",
"854 0 LINE",
"919 0 LINE",
"520 557 LINE",
"895 1081 LINE",
"829 1081 LINE",
"483 594 LINE",
"137 1081 LINE",
"69 1081 LINE",
"448 557 LINE",
"53 0 LINE"
);
}
);
width = 980;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"178 0 LINE",
"512 479 LINE",
"848 0 LINE",
"983 0 LINE",
"584 559 LINE",
"960 1090 LINE",
"827 1090 LINE",
"512 639 LINE",
"199 1090 LINE",
"61 1090 LINE",
"442 559 LINE",
"45 0 LINE"
);
}
);
width = 1032;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"841 0 LINE",
"1046 0 LINE",
"646 561 LINE",
"1025 1098 LINE",
"822 1098 LINE",
"542 684 LINE",
"259 1098 LINE",
"54 1098 LINE",
"433 561 LINE",
"36 0 LINE",
"239 0 LINE",
"542 438 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 8 5 2 4 0 1 1 76 2 1 1 1 34 77 3 1 0 0 32 0 78 18 18 18 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1083;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"356 0 LINE",
"592 383 LINE",
"827 0 LINE",
"1173 0 LINE",
"792 571 LINE",
"1157 1118 LINE",
"811 1118 LINE",
"592 762 LINE",
"375 1118 LINE",
"28 1118 LINE",
"389 571 LINE",
"10 0 LINE"
);
}
);
width = 1183;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"454 0 LINE",
"645 344 LINE",
"835 0 LINE",
"1280 0 LINE",
"911 578 LINE",
"1265 1133 LINE",
"821 1133 LINE",
"645 815 LINE",
"473 1133 LINE",
"28 1133 LINE",
"375 578 LINE",
"10 0 LINE"
);
}
);
width = 1290;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"328 -209 LINE SMOOTH",
"277 -340 OFFCURVE",
"176 -446 OFFCURVE",
"99 -446 QCURVE SMOOTH",
"66 -446 OFFCURVE",
"17 -434 OFFCURVE",
"-12 -424 QCURVE",
"-12 -477 LINE",
"43 -498 OFFCURVE",
"99 -498 QCURVE SMOOTH",
"199 -498 OFFCURVE",
"320 -369 OFFCURVE",
"371 -236 QCURVE SMOOTH",
"881 1081 LINE",
"826 1081 LINE",
"541 344 LINE SMOOTH",
"506 252 OFFCURVE",
"459 121 OFFCURVE",
"443 76 QCURVE",
"439 76 LINE",
"422 119 OFFCURVE",
"373 254 OFFCURVE",
"336 352 QCURVE SMOOTH",
"56 1081 LINE",
"0 1081 LINE",
"412 12 LINE"
);
}
);
width = 876;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"356 -180 LINE SMOOTH",
"315 -289 OFFCURVE",
"207 -395 OFFCURVE",
"121 -395 QCURVE SMOOTH",
"57 -395 OFFCURVE",
"4 -377 QCURVE",
"4 -475 LINE",
"33 -483 OFFCURVE",
"94 -496 OFFCURVE",
"135 -496 QCURVE SMOOTH",
"264 -496 OFFCURVE",
"416 -338 OFFCURVE",
"471 -195 QCURVE SMOOTH",
"963 1090 LINE",
"838 1090 LINE",
"584 410 LINE SMOOTH",
"551 319 OFFCURVE",
"502 172 OFFCURVE",
"487 125 QCURVE",
"481 125 LINE",
"467 180 OFFCURVE",
"418 322 OFFCURVE",
"385 412 QCURVE SMOOTH",
"125 1090 LINE",
"0 1090 LINE",
"428 4 LINE"
);
}
);
width = 960;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"352 -238 OFFCURVE",
"238 -344 OFFCURVE",
"143 -344 QCURVE SMOOTH",
"108 -344 OFFCURVE",
"45 -336 OFFCURVE",
"22 -332 QCURVE",
"22 -475 LINE",
"49 -481 OFFCURVE",
"123 -492 OFFCURVE",
"172 -492 QCURVE SMOOTH",
"332 -492 OFFCURVE",
"512 -307 OFFCURVE",
"571 -152 QCURVE SMOOTH",
"1044 1098 LINE",
"850 1098 LINE",
"627 475 LINE SMOOTH",
"598 391 OFFCURVE",
"545 225 OFFCURVE",
"532 174 QCURVE",
"524 174 LINE",
"512 242 OFFCURVE",
"463 389 OFFCURVE",
"432 473 QCURVE SMOOTH",
"195 1098 LINE",
"2 1098 LINE",
"444 -4 LINE",
"387 -150 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01220 6 2 3 0 19 1 2 3 2 76 1 1 0 0 34 77 0 3 3 2 97 0 2 2 36 2 78 37 35 25 17 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 1044;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"426 -47 LINE SMOOTH",
"397 -129 OFFCURVE",
"287 -246 OFFCURVE",
"190 -246 QCURVE SMOOTH",
"156 -246 OFFCURVE",
"90 -238 OFFCURVE",
"70 -233 QCURVE",
"70 -475 LINE",
"98 -481 OFFCURVE",
"172 -492 OFFCURVE",
"225 -492 QCURVE SMOOTH",
"385 -492 OFFCURVE",
"627 -317 OFFCURVE",
"692 -143 QCURVE SMOOTH",
"1165 1118 LINE",
"838 1118 LINE",
"631 489 LINE SMOOTH",
"614 442 OFFCURVE",
"594 348 OFFCURVE",
"588 295 QCURVE",
"582 295 LINE",
"578 348 OFFCURVE",
"561 442 OFFCURVE",
"545 489 QCURVE SMOOTH",
"334 1118 LINE",
"0 1118 LINE",
"444 8 LINE"
);
}
);
width = 1165;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"440 6 LINE SMOOTH",
"412 -68 OFFCURVE",
"320 -180 OFFCURVE",
"223 -180 QCURVE SMOOTH",
"188 -180 OFFCURVE",
"123 -172 OFFCURVE",
"102 -168 QCURVE",
"102 -475 LINE",
"131 -481 OFFCURVE",
"209 -492 OFFCURVE",
"262 -492 QCURVE SMOOTH",
"410 -492 OFFCURVE",
"612 -397 OFFCURVE",
"750 -209 OFFCURVE",
"801 -72 QCURVE SMOOTH",
"1249 1133 LINE",
"850 1133 LINE",
"653 481 LINE SMOOTH",
"647 461 OFFCURVE",
"633 401 OFFCURVE",
"629 360 QCURVE",
"621 360 LINE",
"619 393 OFFCURVE",
"608 463 OFFCURVE",
"602 483 QCURVE SMOOTH",
"410 1133 LINE",
"-2 1133 LINE",
"444 16 LINE"
);
}
);
width = 1249;
}
);
note = y;
unicode = 0079;
},
{
glyphname = z;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"157 51 LINE",
"849 1051 LINE",
"849 1081 LINE",
"138 1081 LINE",
"138 1030 LINE",
"771 1030 LINE",
"83 35 LINE",
"83 0 LINE",
"843 0 LINE",
"843 51 LINE"
);
}
);
width = 933;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"220 94 LINE",
"859 1008 LINE",
"859 1090 LINE",
"126 1090 LINE",
"126 995 LINE",
"720 995 LINE",
"81 76 LINE",
"81 0 LINE",
"863 0 LINE",
"863 94 LINE"
);
}
);
width = 948;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"867 1098 LINE",
"114 1098 LINE",
"114 958 LINE",
"669 958 LINE",
"79 119 LINE",
"79 0 LINE",
"882 0 LINE",
"882 139 LINE",
"286 139 LINE",
"867 963 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0129 1 2 3 4 1 1 0 2 76 0 2 2 3 95 0 3 3 34 77 0 0 0 1 95 0 1 1 32 1 78 17 18 17 16 4 8 26 \012CALL[ ]	/* CallFunction */";
};
width = 962;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"415 233 LINE",
"919 920 LINE",
"919 1118 LINE",
"86 1118 LINE",
"86 885 LINE",
"573 885 LINE",
"55 180 LINE",
"55 0 LINE",
"938 0 LINE",
"938 233 LINE"
);
}
);
width = 999;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"516 299 LINE",
"964 891 LINE",
"964 1133 LINE",
"76 1133 LINE",
"76 834 LINE",
"518 834 LINE",
"49 223 LINE",
"49 0 LINE",
"987 0 LINE",
"987 299 LINE"
);
}
);
width = 1038;
}
);
note = z;
unicode = 007A;
},
{
glyphname = braceleft;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"469 -272 OFFCURVE",
"334 -160 OFFCURVE",
"334 -41 QCURVE SMOOTH",
"334 311 LINE SMOOTH",
"334 416 OFFCURVE",
"262 551 OFFCURVE",
"172 567 QCURVE",
"172 571 LINE",
"262 588 OFFCURVE",
"334 723 OFFCURVE",
"334 827 QCURVE SMOOTH",
"334 1174 LINE SMOOTH",
"334 1298 OFFCURVE",
"469 1411 OFFCURVE",
"614 1411 QCURVE",
"614 1462 LINE",
"446 1462 OFFCURVE",
"278 1319 OFFCURVE",
"278 1186 QCURVE SMOOTH",
"278 836 LINE SMOOTH",
"278 705 OFFCURVE",
"176 594 OFFCURVE",
"53 594 QCURVE",
"53 545 LINE",
"176 545 OFFCURVE",
"278 430 OFFCURVE",
"278 303 QCURVE SMOOTH",
"278 -47 LINE SMOOTH",
"278 -180 OFFCURVE",
"446 -324 OFFCURVE",
"614 -324 QCURVE",
"614 -272 LINE"
);
}
);
width = 690;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"536 -223 OFFCURVE",
"409 -123 OFFCURVE",
"409 -14 QCURVE SMOOTH",
"409 313 LINE SMOOTH",
"409 418 OFFCURVE",
"319 547 OFFCURVE",
"217 565 QCURVE",
"217 573 LINE",
"319 592 OFFCURVE",
"409 723 OFFCURVE",
"409 827 QCURVE SMOOTH",
"409 1147 LINE SMOOTH",
"409 1262 OFFCURVE",
"536 1360 OFFCURVE",
"663 1364 QCURVE",
"663 1462 LINE",
"489 1462 OFFCURVE",
"293 1311 OFFCURVE",
"293 1163 QCURVE SMOOTH",
"293 836 LINE SMOOTH",
"293 719 OFFCURVE",
"176 621 OFFCURVE",
"55 618 QCURVE",
"55 520 LINE",
"176 520 OFFCURVE",
"293 420 OFFCURVE",
"293 303 QCURVE SMOOTH",
"293 -23 LINE SMOOTH",
"293 -172 OFFCURVE",
"485 -324 OFFCURVE",
"663 -324 QCURVE",
"663 -225 LINE"
);
}
);
width = 733;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"485 -86 OFFCURVE",
"485 14 QCURVE SMOOTH",
"485 315 LINE SMOOTH",
"485 526 OFFCURVE",
"262 565 QCURVE",
"262 578 LINE",
"485 616 OFFCURVE",
"485 827 QCURVE SMOOTH",
"485 1122 LINE SMOOTH",
"485 1223 OFFCURVE",
"606 1311 OFFCURVE",
"712 1315 QCURVE",
"712 1462 LINE",
"532 1462 OFFCURVE",
"307 1303 OFFCURVE",
"307 1139 QCURVE SMOOTH",
"307 836 LINE SMOOTH",
"307 733 OFFCURVE",
"178 647 OFFCURVE",
"57 645 QCURVE",
"57 496 LINE",
"178 496 OFFCURVE",
"307 408 OFFCURVE",
"307 303 QCURVE SMOOTH",
"307 2 LINE SMOOTH",
"307 -162 OFFCURVE",
"524 -322 OFFCURVE",
"712 -324 QCURVE",
"712 -176 LINE",
"604 -174 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\01223 1 1 2 1 76 0 2 0 1 5 2 1 105 6 1 5 0 0 5 0 101 0 4 4 3 97 0 3 3 31 4 78 0 0 0 29 0 29 17 21 17 21 17 7 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"644 -96 OFFCURVE",
"550 -43 OFFCURVE",
"550 43 QCURVE SMOOTH",
"550 342 LINE SMOOTH",
"550 528 OFFCURVE",
"317 563 QCURVE",
"317 575 LINE",
"550 610 OFFCURVE",
"550 797 QCURVE SMOOTH",
"550 1096 LINE SMOOTH",
"550 1182 OFFCURVE",
"644 1235 OFFCURVE",
"724 1237 QCURVE",
"724 1462 LINE",
"548 1462 OFFCURVE",
"360 1405 OFFCURVE",
"286 1282 OFFCURVE",
"286 1184 QCURVE SMOOTH",
"286 866 LINE SMOOTH",
"286 770 OFFCURVE",
"155 688 OFFCURVE",
"30 688 QCURVE",
"30 449 LINE",
"155 449 OFFCURVE",
"286 367 OFFCURVE",
"286 270 QCURVE SMOOTH",
"286 -45 LINE SMOOTH",
"286 -143 OFFCURVE",
"360 -266 OFFCURVE",
"548 -324 OFFCURVE",
"724 -324 QCURVE",
"724 -98 LINE"
);
}
);
width = 806;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"782 -66 OFFCURVE",
"692 -53 OFFCURVE",
"630 -8 OFFCURVE",
"630 41 QCURVE SMOOTH",
"630 317 LINE SMOOTH",
"630 434 OFFCURVE",
"507 545 OFFCURVE",
"391 563 QCURVE",
"391 575 LINE",
"503 590 OFFCURVE",
"630 702 OFFCURVE",
"630 827 QCURVE SMOOTH",
"630 1098 LINE SMOOTH",
"630 1149 OFFCURVE",
"692 1192 OFFCURVE",
"780 1204 OFFCURVE",
"821 1204 QCURVE",
"821 1483 LINE",
"608 1483 OFFCURVE",
"387 1409 OFFCURVE",
"307 1260 OFFCURVE",
"307 1143 QCURVE SMOOTH",
"307 889 LINE SMOOTH",
"307 827 OFFCURVE",
"237 752 OFFCURVE",
"124 719 OFFCURVE",
"61 719 QCURVE",
"61 418 LINE",
"122 418 OFFCURVE",
"235 385 OFFCURVE",
"307 309 OFFCURVE",
"307 248 QCURVE SMOOTH",
"307 0 LINE SMOOTH",
"307 -119 OFFCURVE",
"389 -272 OFFCURVE",
"610 -344 OFFCURVE",
"821 -344 QCURVE",
"821 -66 LINE"
);
}
);
width = 886;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = bar;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"569 -514 LINE",
"569 1563 LINE",
"518 1563 LINE",
"518 -514 LINE"
);
}
);
width = 1095;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"603 -504 LINE",
"603 1561 LINE",
"503 1561 LINE",
"503 -504 LINE"
);
}
);
width = 1112;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"489 1556 LINE",
"489 -494 LINE",
"639 -494 LINE",
"639 1556 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01241 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 1 33 77 0 0 0 36 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 1 0 1 133 0 0 0 36 0 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 8 24 \012CALL[ ]	/* CallFunction */";
};
width = 1128;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"673 -465 LINE",
"673 1550 LINE",
"454 1550 LINE",
"454 -465 LINE"
);
}
);
width = 1128;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"655 -446 LINE",
"655 1556 LINE",
"387 1556 LINE",
"387 -446 LINE"
);
}
);
width = 1042;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = braceright;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"409 -180 OFFCURVE",
"409 -47 QCURVE SMOOTH",
"409 303 LINE SMOOTH",
"409 430 OFFCURVE",
"511 545 OFFCURVE",
"634 545 QCURVE",
"634 594 LINE",
"511 594 OFFCURVE",
"409 705 OFFCURVE",
"409 836 QCURVE SMOOTH",
"409 1186 LINE SMOOTH",
"409 1319 OFFCURVE",
"241 1462 OFFCURVE",
"73 1462 QCURVE",
"73 1411 LINE",
"218 1411 OFFCURVE",
"354 1298 OFFCURVE",
"354 1174 QCURVE SMOOTH",
"354 827 LINE SMOOTH",
"354 723 OFFCURVE",
"425 588 OFFCURVE",
"515 571 QCURVE",
"515 567 LINE",
"425 551 OFFCURVE",
"354 416 OFFCURVE",
"354 311 QCURVE SMOOTH",
"354 -41 LINE SMOOTH",
"354 -160 OFFCURVE",
"218 -272 OFFCURVE",
"73 -272 QCURVE",
"73 -324 LINE",
"241 -324 OFFCURVE"
);
}
);
width = 690;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"440 -172 OFFCURVE",
"440 -25 QCURVE SMOOTH",
"440 303 LINE SMOOTH",
"440 420 OFFCURVE",
"556 520 OFFCURVE",
"677 520 QCURVE",
"677 618 LINE",
"556 618 OFFCURVE",
"440 719 OFFCURVE",
"440 836 QCURVE SMOOTH",
"440 1161 LINE SMOOTH",
"440 1311 OFFCURVE",
"247 1462 OFFCURVE",
"69 1462 QCURVE",
"69 1364 LINE",
"196 1362 OFFCURVE",
"323 1262 OFFCURVE",
"323 1149 QCURVE SMOOTH",
"323 827 LINE SMOOTH",
"323 723 OFFCURVE",
"413 592 OFFCURVE",
"515 573 QCURVE",
"515 565 LINE",
"413 547 OFFCURVE",
"323 416 OFFCURVE",
"323 311 QCURVE SMOOTH",
"323 -12 LINE SMOOTH",
"323 -123 OFFCURVE",
"196 -221 OFFCURVE",
"69 -225 QCURVE",
"69 -324 LINE",
"243 -324 OFFCURVE"
);
}
);
width = 733;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"471 -164 OFFCURVE",
"471 0 QCURVE SMOOTH",
"471 305 LINE SMOOTH",
"471 408 OFFCURVE",
"600 494 OFFCURVE",
"720 496 QCURVE",
"720 645 LINE",
"600 645 OFFCURVE",
"471 733 OFFCURVE",
"471 838 QCURVE SMOOTH",
"471 1137 LINE SMOOTH",
"471 1300 OFFCURVE",
"253 1460 OFFCURVE",
"65 1462 QCURVE",
"65 1315 LINE",
"174 1313 OFFCURVE",
"292 1225 OFFCURVE",
"292 1124 QCURVE SMOOTH",
"292 825 LINE SMOOTH",
"292 614 OFFCURVE",
"516 575 QCURVE",
"516 563 LINE",
"292 524 OFFCURVE",
"292 313 QCURVE SMOOTH",
"292 16 LINE SMOOTH",
"292 -84 OFFCURVE",
"171 -172 OFFCURVE",
"65 -176 QCURVE",
"65 -324 LINE",
"245 -324 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\0127 1 4 3 1 76 0 3 0 4 0 3 4 105 0 0 6 1 5 0 5 101 0 1 1 2 97 0 2 2 31 1 78 0 0 0 29 0 29 17 21 17 27 17 7 8 27 \012CALL[ ]	/* CallFunction */";
};
width = 778;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"446 -266 OFFCURVE",
"519 -143 OFFCURVE",
"519 -45 QCURVE SMOOTH",
"519 270 LINE SMOOTH",
"519 367 OFFCURVE",
"650 449 OFFCURVE",
"775 449 QCURVE",
"775 688 LINE",
"650 688 OFFCURVE",
"519 770 OFFCURVE",
"519 866 QCURVE SMOOTH",
"519 1184 LINE SMOOTH",
"519 1282 OFFCURVE",
"446 1405 OFFCURVE",
"257 1462 OFFCURVE",
"81 1462 QCURVE",
"81 1237 LINE",
"161 1235 OFFCURVE",
"255 1182 OFFCURVE",
"255 1096 QCURVE SMOOTH",
"255 797 LINE SMOOTH",
"255 610 OFFCURVE",
"489 575 QCURVE",
"489 563 LINE",
"255 528 OFFCURVE",
"255 342 QCURVE SMOOTH",
"255 43 LINE SMOOTH",
"255 -43 OFFCURVE",
"161 -96 OFFCURVE",
"81 -98 QCURVE",
"81 -324 LINE",
"257 -324 OFFCURVE"
);
}
);
width = 806;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"497 -272 OFFCURVE",
"579 -119 OFFCURVE",
"579 0 QCURVE SMOOTH",
"579 248 LINE SMOOTH",
"579 309 OFFCURVE",
"651 385 OFFCURVE",
"763 418 OFFCURVE",
"825 418 QCURVE",
"825 719 LINE",
"761 719 OFFCURVE",
"649 752 OFFCURVE",
"579 827 OFFCURVE",
"579 889 QCURVE SMOOTH",
"579 1143 LINE SMOOTH",
"579 1260 OFFCURVE",
"499 1409 OFFCURVE",
"278 1483 OFFCURVE",
"65 1483 QCURVE",
"65 1204 LINE",
"106 1204 OFFCURVE",
"194 1192 OFFCURVE",
"255 1149 OFFCURVE",
"255 1098 QCURVE SMOOTH",
"255 827 LINE SMOOTH",
"255 702 OFFCURVE",
"380 590 OFFCURVE",
"495 575 QCURVE",
"495 563 LINE",
"378 545 OFFCURVE",
"255 434 OFFCURVE",
"255 317 QCURVE SMOOTH",
"255 41 LINE SMOOTH",
"255 -8 OFFCURVE",
"194 -53 OFFCURVE",
"106 -66 OFFCURVE",
"65 -66 QCURVE",
"65 -344 LINE",
"274 -344 OFFCURVE"
);
}
);
width = 886;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = asciitilde;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"745 633 OFFCURVE",
"819 633 QCURVE SMOOTH",
"892 633 OFFCURVE",
"1013 692 OFFCURVE",
"1052 733 QCURVE",
"1052 793 LINE",
"991 729 OFFCURVE",
"874 682 OFFCURVE",
"819 682 QCURVE SMOOTH",
"755 682 OFFCURVE",
"659 717 OFFCURVE",
"603 745 QCURVE SMOOTH",
"544 774 OFFCURVE",
"440 813 OFFCURVE",
"354 813 QCURVE SMOOTH",
"286 813 OFFCURVE",
"159 760 OFFCURVE",
"114 715 QCURVE",
"114 651 LINE",
"171 713 OFFCURVE",
"294 764 OFFCURVE",
"354 764 QCURVE SMOOTH",
"425 764 OFFCURVE",
"522 729 OFFCURVE",
"577 700 QCURVE SMOOTH",
"638 670 OFFCURVE"
);
}
);
width = 1167;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"753 610 OFFCURVE",
"819 610 QCURVE SMOOTH",
"892 610 OFFCURVE",
"1015 668 OFFCURVE",
"1060 717 QCURVE",
"1060 823 LINE",
"1005 766 OFFCURVE",
"882 709 OFFCURVE",
"825 709 QCURVE SMOOTH",
"772 709 OFFCURVE",
"675 739 OFFCURVE",
"610 768 QCURVE SMOOTH",
"534 803 OFFCURVE",
"421 836 OFFCURVE",
"352 836 QCURVE SMOOTH",
"282 836 OFFCURVE",
"155 780 OFFCURVE",
"108 731 QCURVE",
"108 618 LINE",
"221 737 OFFCURVE",
"344 737 QCURVE SMOOTH",
"401 737 OFFCURVE",
"499 707 OFFCURVE",
"565 676 QCURVE SMOOTH",
"643 643 OFFCURVE"
);
}
);
width = 1169;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"761 588 OFFCURVE",
"821 588 QCURVE SMOOTH",
"966 588 OFFCURVE",
"1067 698 QCURVE",
"1067 856 LINE",
"1017 805 OFFCURVE",
"890 735 OFFCURVE",
"831 735 QCURVE SMOOTH",
"788 735 OFFCURVE",
"692 758 OFFCURVE",
"618 791 QCURVE SMOOTH",
"524 831 OFFCURVE",
"405 856 OFFCURVE",
"348 856 QCURVE SMOOTH",
"200 856 OFFCURVE",
"102 748 QCURVE",
"102 588 LINE",
"151 639 OFFCURVE",
"278 709 OFFCURVE",
"335 709 QCURVE SMOOTH",
"381 709 OFFCURVE",
"477 686 OFFCURVE",
"551 653 QCURVE SMOOTH",
"643 614 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 49 values pushed */\0127 1 2 1 19 1 3 0 2 76 18 1 1 74 6 1 3 73 0 2 0 3 2 89 0 1 0 0 3 1 0 105 0 2 2 3 97 0 3 2 3 81 36 36 36 34 4 8 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 1171;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"766 553 OFFCURVE",
"825 553 QCURVE SMOOTH",
"979 553 OFFCURVE",
"1081 662 QCURVE",
"1081 893 LINE",
"1030 842 OFFCURVE",
"905 772 OFFCURVE",
"848 772 QCURVE SMOOTH",
"803 772 OFFCURVE",
"696 795 OFFCURVE",
"620 827 QCURVE SMOOTH",
"524 868 OFFCURVE",
"403 891 OFFCURVE",
"344 891 QCURVE SMOOTH",
"190 891 OFFCURVE",
"88 782 QCURVE",
"88 551 LINE",
"139 602 OFFCURVE",
"262 672 OFFCURVE",
"321 672 QCURVE SMOOTH",
"369 672 OFFCURVE",
"473 649 OFFCURVE",
"549 616 QCURVE SMOOTH",
"645 578 OFFCURVE"
);
}
);
width = 1171;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"782 528 OFFCURVE",
"842 528 QCURVE SMOOTH",
"1001 528 OFFCURVE",
"1106 637 QCURVE",
"1106 918 LINE",
"1053 866 OFFCURVE",
"932 797 OFFCURVE",
"874 797 QCURVE SMOOTH",
"827 797 OFFCURVE",
"713 819 OFFCURVE",
"637 852 QCURVE SMOOTH",
"536 893 OFFCURVE",
"416 915 OFFCURVE",
"356 915 QCURVE SMOOTH",
"274 915 OFFCURVE",
"143 860 OFFCURVE",
"92 807 QCURVE",
"92 526 LINE",
"143 578 OFFCURVE",
"266 647 OFFCURVE",
"325 647 QCURVE SMOOTH",
"373 647 OFFCURVE",
"485 625 OFFCURVE",
"561 592 QCURVE SMOOTH",
"661 553 OFFCURVE"
);
}
);
width = 1200;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = guillemotleft;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"364 178 LINE",
"397 201 LINE",
"116 571 LINE",
"397 942 LINE",
"364 967 LINE",
"53 584 LINE",
"53 557 LINE"
);
},
{
closed = 1;
nodes = (
"710 178 LINE",
"743 201 LINE",
"463 571 LINE",
"743 942 LINE",
"710 967 LINE",
"399 584 LINE",
"399 557 LINE"
);
}
);
width = 796;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"395 147 LINE",
"475 197 LINE",
"192 557 LINE",
"475 918 LINE",
"395 967 LINE",
"67 569 LINE",
"67 541 LINE"
);
},
{
closed = 1;
nodes = (
"774 147 LINE",
"851 197 LINE",
"569 557 LINE",
"851 918 LINE",
"774 967 LINE",
"442 569 LINE",
"442 541 LINE"
);
}
);
width = 919;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"267 541 LINE",
"554 891 LINE",
"425 965 LINE",
"81 553 LINE",
"81 526 LINE",
"425 115 LINE",
"554 190 LINE"
);
},
{
closed = 1;
nodes = (
"675 541 LINE",
"962 891 LINE",
"835 965 LINE",
"487 553 LINE",
"487 526 LINE",
"835 115 LINE",
"962 190 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01210 7 3 0 2 50 \012CALL[ ]	/* CallFunction */";
};
width = 1042;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"452 94 LINE",
"671 213 LINE",
"392 561 LINE",
"671 909 LINE",
"452 1028 LINE",
"81 573 LINE",
"81 547 LINE"
);
},
{
closed = 1;
nodes = (
"958 94 LINE",
"1177 213 LINE",
"898 561 LINE",
"1177 909 LINE",
"958 1028 LINE",
"587 573 LINE",
"587 547 LINE"
);
}
);
width = 1259;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"462 80 LINE",
"743 227 LINE",
"470 575 LINE",
"743 922 LINE",
"462 1071 LINE",
"73 588 LINE",
"73 561 LINE"
);
},
{
closed = 1;
nodes = (
"1036 80 LINE",
"1318 227 LINE",
"1044 575 LINE",
"1318 922 LINE",
"1036 1071 LINE",
"648 588 LINE",
"648 561 LINE"
);
}
);
width = 1394;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = guillemotright;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"432 967 LINE",
"399 944 LINE",
"680 573 LINE",
"399 203 LINE",
"432 178 LINE",
"743 561 LINE",
"743 588 LINE"
);
},
{
closed = 1;
nodes = (
"86 967 LINE",
"53 944 LINE",
"334 573 LINE",
"53 203 LINE",
"86 178 LINE",
"397 561 LINE",
"397 588 LINE"
);
}
);
width = 796;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"522 967 LINE",
"442 918 LINE",
"724 557 LINE",
"442 197 LINE",
"522 147 LINE",
"851 545 LINE",
"851 569 LINE"
);
},
{
closed = 1;
nodes = (
"145 967 LINE",
"65 918 LINE",
"350 557 LINE",
"65 197 LINE",
"145 147 LINE",
"475 545 LINE",
"475 569 LINE"
);
}
);
width = 919;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"366 541 LINE",
"79 190 LINE",
"206 115 LINE",
"552 526 LINE",
"552 553 LINE",
"206 965 LINE",
"79 891 LINE"
);
},
{
closed = 1;
nodes = (
"771 541 LINE",
"485 190 LINE",
"611 115 LINE",
"960 526 LINE",
"960 553 LINE",
"611 965 LINE",
"485 891 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01210 7 3 0 2 50 \012CALL[ ]	/* CallFunction */";
};
width = 1042;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"806 1028 LINE",
"587 909 LINE",
"865 561 LINE",
"587 213 LINE",
"806 94 LINE",
"1177 547 LINE",
"1177 573 LINE"
);
},
{
closed = 1;
nodes = (
"300 1028 LINE",
"81 909 LINE",
"360 561 LINE",
"81 213 LINE",
"300 94 LINE",
"671 547 LINE",
"671 573 LINE"
);
}
);
width = 1259;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"933 1071 LINE",
"648 922 LINE",
"923 575 LINE",
"648 227 LINE",
"933 80 LINE",
"1320 561 LINE",
"1320 588 LINE"
);
},
{
closed = 1;
nodes = (
"358 1071 LINE",
"75 922 LINE",
"347 575 LINE",
"75 227 LINE",
"358 80 LINE",
"745 561 LINE",
"745 588 LINE"
);
}
);
width = 1394;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = uni1780;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 1200 LINE",
"250 1200 LINE",
"250 1150 LINE",
"1050 1150 LINE"
);
},
{
closed = 1;
nodes = (
"308 873 OFFCURVE",
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 0 LINE",
"308 0 LINE",
"308 600 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 600 LINE SMOOTH",
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 0 LINE",
"338 0 LINE",
"338 600 LINE SMOOTH",
"338 835 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1070 1200 LINE",
"230 1200 LINE",
"230 1112 LINE",
"1070 1112 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 785 QCURVE SMOOTH",
"912 785 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 600 LINE SMOOTH",
"1100 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"200 923 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 600 LINE SMOOTH",
"388 785 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1200 LINE",
"200 1200 LINE",
"200 1062 LINE",
"1100 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\0120 1 0 3 0 1 3 105 6 1 5 5 4 95 0 4 4 17 77 2 1 0 0 19 0 78 14 14 14 17 14 17 18 34 18 34 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"150 1200 LINE"
);
},
{
closed = 1;
nodes = (
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 570 LINE SMOOTH",
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 570 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 570 LINE SMOOTH",
"438 705 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"100 1250 LINE"
);
},
{
closed = 1;
nodes = (
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 570 LINE SMOOTH",
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 570 LINE SMOOTH",
"488 655 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni1780;
unicode = 1780;
},
{
glyphname = uni1781;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"300 93 QCURVE SMOOTH",
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1000 93 QCURVE SMOOTH",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 480 LINE",
"912 480 LINE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE",
"854 185 QCURVE SMOOTH",
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"447 185 QCURVE SMOOTH",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01222 1 1 5 1 1 0 1 2 76 0 1 5 0 5 1 0 128 0 4 0 5 1 4 5 103 0 3 3 6 97 0 6 6 17 77 0 0 0 2 97 0 2 2 19 2 78 37 33 20 42 36 20 37 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 480 LINE",
"862 480 LINE",
"862 323 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE",
"566 479 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 359 QCURVE SMOOTH",
"1200 510 LINE",
"812 510 LINE",
"812 359 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni1781;
unicode = 1781;
},
{
glyphname = uni1782;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 1200 LINE",
"250 1200 LINE",
"250 1150 LINE",
"1050 1150 LINE"
);
},
{
closed = 1;
nodes = (
"308 873 OFFCURVE",
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 0 LINE",
"308 0 LINE",
"308 65 LINE",
"338 170 OFFCURVE",
"473 300 OFFCURVE",
"576 300 QCURVE SMOOTH",
"630 300 LINE",
"630 350 LINE",
"576 350 LINE SMOOTH",
"367 350 OFFCURVE",
"308 179 QCURVE",
"308 600 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 1200 LINE",
"230 1200 LINE",
"230 1112 LINE",
"1070 1112 LINE"
);
},
{
closed = 1;
nodes = (
"338 835 OFFCURVE",
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 600 LINE SMOOTH",
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 0 LINE",
"338 0 LINE",
"338 86 LINE",
"368 181 OFFCURVE",
"513 292 OFFCURVE",
"596 292 QCURVE SMOOTH",
"650 292 LINE",
"650 380 LINE",
"596 380 LINE SMOOTH",
"407 380 OFFCURVE",
"338 250 QCURVE",
"338 600 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 785 QCURVE SMOOTH",
"912 785 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 600 LINE SMOOTH",
"1100 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"200 923 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 86 LINE",
"408 171 OFFCURVE",
"450 216 QCURVE SMOOTH",
"493 262 OFFCURVE",
"596 262 QCURVE SMOOTH",
"700 262 LINE",
"700 400 LINE",
"573 400 LINE SMOOTH",
"457 400 OFFCURVE",
"388 320 QCURVE",
"388 600 LINE SMOOTH",
"388 785 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1200 LINE",
"200 1200 LINE",
"200 1062 LINE",
"1100 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\0121 1 1 0 10 1 2 1 2 76 0 3 0 5 0 3 5 105 0 0 0 1 2 0 1 105 8 1 7 7 6 95 0 6 6 17 77 4 1 2 2 19 2 78 24 24 24 27 24 27 18 34 18 34 20 33 34 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"150 1200 LINE"
);
},
{
closed = 1;
nodes = (
"438 705 OFFCURVE",
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 570 LINE SMOOTH",
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 570 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 176 LINE",
"444 186 OFFCURVE",
"451 197 QCURVE SMOOTH",
"493 262 OFFCURVE",
"596 262 QCURVE SMOOTH",
"700 262 LINE",
"700 450 LINE",
"573 450 LINE SMOOTH",
"495 450 OFFCURVE",
"438 377 QCURVE",
"438 570 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"100 1250 LINE"
);
},
{
closed = 1;
nodes = (
"488 655 OFFCURVE",
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 570 LINE SMOOTH",
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 76 LINE",
"523 212 OFFCURVE",
"666 212 QCURVE SMOOTH",
"710 212 LINE",
"710 450 LINE",
"663 450 LINE SMOOTH",
"525 450 OFFCURVE",
"488 327 QCURVE",
"488 570 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1782;
unicode = 1782;
},
{
glyphname = uni1783;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1592 50 OFFCURVE",
"1286 50 QCURVE SMOOTH",
"979 50 OFFCURVE",
"979 323 QCURVE SMOOTH",
"979 830 LINE",
"732 1050 LINE",
"784 1150 LINE",
"979 1150 LINE",
"979 1200 LINE",
"761 1200 LINE",
"683 1073 OFFCURVE",
"683 1052 QCURVE SMOOTH",
"683 1024 OFFCURVE",
"743 970 QCURVE SMOOTH",
"921 806 LINE",
"921 323 LINE SMOOTH",
"921 50 OFFCURVE",
"615 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 1048 LINE SMOOTH",
"308 1200 OFFCURVE",
"160 1200 QCURVE SMOOTH",
"89 1200 LINE",
"89 1150 LINE",
"160 1150 LINE SMOOTH",
"250 1150 OFFCURVE",
"250 1048 QCURVE SMOOTH",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"615 0 QCURVE SMOOTH",
"876 0 OFFCURVE",
"950 166 QCURVE",
"1024 0 OFFCURVE",
"1286 0 QCURVE SMOOTH",
"1650 0 OFFCURVE",
"1650 323 QCURVE SMOOTH",
"1650 830 LINE",
"1403 1050 LINE",
"1455 1150 LINE",
"1650 1150 LINE",
"1650 1200 LINE",
"1432 1200 LINE",
"1354 1073 OFFCURVE",
"1354 1052 QCURVE SMOOTH",
"1354 1024 OFFCURVE",
"1414 970 QCURVE SMOOTH",
"1592 806 LINE",
"1592 323 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 1200 OFFCURVE",
"160 1200 QCURVE SMOOTH",
"89 1200 LINE",
"89 1112 LINE",
"160 1112 LINE SMOOTH",
"230 1112 OFFCURVE",
"230 1048 QCURVE SMOOTH",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"617 0 QCURVE SMOOTH",
"859 0 OFFCURVE",
"950 127 QCURVE",
"1041 0 OFFCURVE",
"1283 0 QCURVE SMOOTH",
"1670 0 OFFCURVE",
"1670 323 QCURVE SMOOTH",
"1670 840 LINE",
"1443 1060 LINE",
"1465 1112 LINE",
"1670 1112 LINE",
"1670 1200 LINE",
"1422 1200 LINE",
"1344 1063 OFFCURVE",
"1344 1042 QCURVE SMOOTH",
"1344 1014 OFFCURVE",
"1562 806 QCURVE",
"1562 323 LINE SMOOTH",
"1562 88 OFFCURVE",
"1283 88 QCURVE SMOOTH",
"1004 88 OFFCURVE",
"1004 323 QCURVE SMOOTH",
"1004 840 LINE",
"777 1060 LINE",
"799 1112 LINE",
"1004 1112 LINE",
"1004 1200 LINE",
"756 1200 LINE",
"678 1063 OFFCURVE",
"678 1042 QCURVE SMOOTH",
"678 1014 OFFCURVE",
"896 806 QCURVE",
"896 323 LINE SMOOTH",
"896 88 OFFCURVE",
"617 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 1048 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"625 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 1098 LINE SMOOTH",
"388 1200 OFFCURVE",
"238 1200 QCURVE SMOOTH",
"59 1200 LINE",
"59 1062 LINE",
"200 1062 OFFCURVE",
"200 1015 QCURVE SMOOTH",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"850 0 OFFCURVE",
"956 98 QCURVE",
"1062 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1700 0 OFFCURVE",
"1700 323 QCURVE SMOOTH",
"1700 840 LINE",
"1452 1062 LINE",
"1700 1062 LINE",
"1700 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 323 LINE SMOOTH",
"1512 138 OFFCURVE",
"1281 138 QCURVE SMOOTH",
"1050 138 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 840 LINE",
"852 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"721 1029 OFFCURVE",
"721 1005 QCURVE SMOOTH",
"721 980 OFFCURVE",
"742 955 QCURVE SMOOTH",
"782 905 LINE",
"862 806 LINE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01231 19 13 1 4 2 1 36 1 5 2 2 76 7 4 2 1 1 0 95 8 3 2 0 0 17 77 9 1 2 2 5 97 6 1 5 5 19 5 78 51 49 33 19 34 35 17 26 35 17 25 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"812 188 OFFCURVE",
"625 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 1098 LINE SMOOTH",
"438 1200 OFFCURVE",
"238 1200 QCURVE SMOOTH",
"59 1200 LINE",
"59 1012 LINE",
"150 1012 OFFCURVE",
"150 965 QCURVE SMOOTH",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"850 0 OFFCURVE",
"956 98 QCURVE",
"1062 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1750 0 OFFCURVE",
"1750 323 QCURVE SMOOTH",
"1750 840 LINE",
"1452 1012 LINE",
"1750 1012 LINE",
"1750 1200 LINE",
"1402 1200 LINE",
"1327 1102 LINE",
"1290 1053 LINE SMOOTH",
"1274 1033 OFFCURVE",
"1274 1012 QCURVE SMOOTH",
"1274 984 OFFCURVE",
"1305 955 QCURVE SMOOTH",
"1357 905 LINE",
"1462 806 LINE",
"1462 323 LINE SMOOTH",
"1462 188 OFFCURVE",
"1281 188 QCURVE SMOOTH",
"1100 188 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"802 1012 LINE",
"1100 1012 LINE",
"1100 1200 LINE",
"752 1200 LINE",
"677 1102 LINE",
"640 1053 LINE SMOOTH",
"624 1033 OFFCURVE",
"624 1012 QCURVE SMOOTH",
"624 984 OFFCURVE",
"655 955 QCURVE SMOOTH",
"707 905 LINE",
"812 806 LINE",
"812 323 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"829 0 OFFCURVE",
"954 49 QCURVE",
"1078 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1800 0 OFFCURVE",
"1800 323 QCURVE SMOOTH",
"1800 840 LINE",
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1250 LINE",
"1372 1250 LINE",
"1276 1087 LINE SMOOTH",
"1244 1033 OFFCURVE",
"1244 1012 QCURVE SMOOTH",
"1244 984 OFFCURVE",
"1286 940 QCURVE SMOOTH",
"1412 806 LINE",
"1412 323 LINE SMOOTH",
"1412 238 OFFCURVE",
"1281 238 QCURVE SMOOTH",
"1149 238 OFFCURVE",
"1149 323 QCURVE SMOOTH",
"1149 840 LINE",
"851 1012 LINE",
"1149 1012 LINE",
"1149 1250 LINE",
"721 1250 LINE",
"625 1087 LINE SMOOTH",
"593 1033 OFFCURVE",
"593 1012 QCURVE SMOOTH",
"593 984 OFFCURVE",
"635 940 QCURVE SMOOTH",
"761 806 LINE",
"761 323 LINE SMOOTH",
"761 238 OFFCURVE",
"625 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 1128 LINE SMOOTH",
"488 1250 OFFCURVE",
"338 1250 QCURVE SMOOTH",
"29 1250 LINE",
"29 1012 LINE",
"100 1012 OFFCURVE",
"100 965 QCURVE SMOOTH",
"100 323 LINE SMOOTH"
);
}
);
width = 1900;
}
);
note = uni1783;
unicode = 1783;
},
{
glyphname = uni1784;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"833 1150 QCURVE SMOOTH",
"930 1150 OFFCURVE",
"930 1058 QCURVE SMOOTH",
"930 985 OFFCURVE",
"839 932 QCURVE",
"726 994 OFFCURVE",
"726 1050 QCURVE SMOOTH",
"726 1150 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1050 831 OFFCURVE",
"888 907 QCURVE",
"980 970 OFFCURVE",
"980 1060 QCURVE SMOOTH",
"980 1200 OFFCURVE",
"833 1200 QCURVE SMOOTH",
"676 1200 OFFCURVE",
"676 1050 QCURVE SMOOTH",
"676 973 OFFCURVE",
"786 907 QCURVE",
"704 878 OFFCURVE",
"581 878 QCURVE SMOOTH",
"308 878 OFFCURVE",
"308 989 QCURVE SMOOTH",
"308 1350 LINE",
"250 1350 LINE",
"250 989 LINE SMOOTH",
"250 828 OFFCURVE",
"581 828 QCURVE SMOOTH",
"735 828 OFFCURVE",
"840 879 QCURVE",
"992 804 OFFCURVE",
"992 720 QCURVE SMOOTH",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 568 LINE SMOOTH",
"308 720 OFFCURVE",
"160 720 QCURVE SMOOTH",
"119 720 LINE",
"119 670 LINE",
"160 670 LINE SMOOTH",
"250 670 OFFCURVE",
"250 568 QCURVE SMOOTH",
"250 0 LINE",
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 720 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"833 1112 QCURVE SMOOTH",
"912 1112 OFFCURVE",
"912 1048 QCURVE SMOOTH",
"912 991 OFFCURVE",
"835 949 QCURVE",
"754 1002 OFFCURVE",
"754 1050 QCURVE SMOOTH",
"754 1112 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1070 828 OFFCURVE",
"921 902 QCURVE",
"1000 962 OFFCURVE",
"1000 1050 QCURVE SMOOTH",
"1000 1200 OFFCURVE",
"833 1200 QCURVE SMOOTH",
"666 1200 OFFCURVE",
"666 1050 QCURVE SMOOTH",
"666 979 OFFCURVE",
"754 918 QCURVE",
"680 898 OFFCURVE",
"581 898 QCURVE SMOOTH",
"338 898 OFFCURVE",
"338 989 QCURVE SMOOTH",
"338 1350 LINE",
"230 1350 LINE",
"230 989 LINE SMOOTH",
"230 810 OFFCURVE",
"581 810 QCURVE SMOOTH",
"737 810 OFFCURVE",
"851 862 QCURVE",
"962 795 OFFCURVE",
"962 720 QCURVE SMOOTH",
"962 90 LINE",
"651 474 LINE",
"338 89 LINE",
"338 568 LINE SMOOTH",
"338 720 OFFCURVE",
"160 720 QCURVE SMOOTH",
"119 720 LINE",
"119 632 LINE",
"160 632 LINE SMOOTH",
"230 632 OFFCURVE",
"230 568 QCURVE SMOOTH",
"230 0 LINE",
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 720 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"289 855 QCURVE",
"372 785 OFFCURVE",
"530 785 QCURVE SMOOTH",
"686 785 OFFCURVE",
"828 834 QCURVE",
"864 815 OFFCURVE",
"912 769 OFFCURVE",
"912 720 QCURVE SMOOTH",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 576 LINE SMOOTH",
"388 720 OFFCURVE",
"250 720 QCURVE SMOOTH",
"100 720 LINE",
"100 576 LINE",
"200 576 OFFCURVE",
"200 535 QCURVE SMOOTH",
"200 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 720 LINE SMOOTH",
"1100 867 OFFCURVE",
"975 920 QCURVE SMOOTH",
"953 930 OFFCURVE",
"932 937 QCURVE",
"1000 994 OFFCURVE",
"1000 1056 QCURVE SMOOTH",
"1000 1200 OFFCURVE",
"820 1200 QCURVE SMOOTH",
"630 1200 OFFCURVE",
"630 1056 QCURVE SMOOTH",
"630 1004 OFFCURVE",
"705 953 QCURVE",
"604 923 OFFCURVE",
"530 923 QCURVE SMOOTH",
"460 923 OFFCURVE",
"388 989 OFFCURVE",
"388 1039 QCURVE SMOOTH",
"388 1400 LINE",
"200 1400 LINE",
"200 1039 LINE SMOOTH",
"200 916 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */\01216 8 2 1 2 39 1 7 1 35 34 33 23 4 3 5 3 76 0 0 2 0 133 0 1 0 7 6 1 7 106 0 6 0 5 3 6 5 105 0 2 2 17 77 4 1 3 3 19 3 78 41 33 18 18 24 36 35 17 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 720 LINE SMOOTH",
"1150 867 OFFCURVE",
"1025 920 QCURVE SMOOTH",
"1003 930 OFFCURVE",
"982 937 QCURVE",
"1050 994 OFFCURVE",
"1050 1056 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"820 1200 QCURVE SMOOTH",
"630 1200 OFFCURVE",
"630 1056 QCURVE SMOOTH",
"630 1004 OFFCURVE",
"705 973 QCURVE",
"604 943 OFFCURVE",
"530 943 QCURVE SMOOTH",
"438 943 OFFCURVE",
"438 1039 QCURVE SMOOTH",
"438 1400 LINE",
"150 1400 LINE",
"150 1039 LINE SMOOTH",
"150 785 OFFCURVE",
"530 785 QCURVE SMOOTH",
"686 785 OFFCURVE",
"828 834 QCURVE",
"862 769 OFFCURVE",
"862 720 QCURVE SMOOTH",
"862 263 LINE",
"651 455 LINE",
"438 261 LINE",
"438 526 LINE SMOOTH",
"438 720 OFFCURVE",
"250 720 QCURVE SMOOTH",
"60 720 LINE",
"60 526 LINE",
"150 526 OFFCURVE",
"150 485 QCURVE SMOOTH",
"150 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"469 0 LINE",
"651 180 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 720 LINE SMOOTH",
"1200 917 OFFCURVE",
"1075 970 QCURVE SMOOTH",
"1053 980 OFFCURVE",
"1032 987 QCURVE",
"1100 1044 OFFCURVE",
"1100 1106 QCURVE SMOOTH",
"1100 1250 OFFCURVE",
"865 1250 QCURVE SMOOTH",
"630 1250 OFFCURVE",
"630 1106 QCURVE SMOOTH",
"630 1054 OFFCURVE",
"705 1023 QCURVE",
"604 993 OFFCURVE",
"550 993 QCURVE SMOOTH",
"488 993 OFFCURVE",
"488 1089 QCURVE SMOOTH",
"488 1400 LINE",
"100 1400 LINE",
"100 1089 LINE SMOOTH",
"100 785 OFFCURVE",
"530 785 QCURVE SMOOTH",
"686 785 OFFCURVE",
"778 834 QCURVE",
"812 769 OFFCURVE",
"812 720 QCURVE SMOOTH",
"812 323 LINE",
"651 485 LINE",
"488 321 LINE",
"488 526 LINE SMOOTH",
"488 720 OFFCURVE",
"250 720 QCURVE SMOOTH",
"30 720 LINE",
"30 526 LINE",
"100 526 OFFCURVE",
"100 485 QCURVE SMOOTH",
"100 0 LINE"
);
}
);
width = 1300;
}
);
note = uni1784;
unicode = 1784;
},
{
glyphname = uni1785;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"770 570 OFFCURVE",
"770 700 QCURVE SMOOTH",
"770 850 OFFCURVE",
"912 850 QCURVE SMOOTH",
"992 850 OFFCURVE",
"992 778 QCURVE SMOOTH",
"992 570 LINE",
"912 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 850 LINE",
"162 1048 LINE",
"230 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 778 LINE SMOOTH",
"1050 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"720 700 QCURVE SMOOTH",
"720 520 OFFCURVE",
"912 520 QCURVE SMOOTH",
"992 520 LINE",
"992 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"789 588 OFFCURVE",
"789 700 QCURVE SMOOTH",
"789 812 OFFCURVE",
"912 812 QCURVE SMOOTH",
"962 812 OFFCURVE",
"962 778 QCURVE SMOOTH",
"962 588 LINE",
"912 588 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 778 LINE SMOOTH",
"1070 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"700 700 QCURVE SMOOTH",
"700 500 OFFCURVE",
"912 500 QCURVE SMOOTH",
"962 500 LINE",
"962 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"820 701 QCURVE SMOOTH",
"820 762 OFFCURVE",
"912 762 QCURVE",
"912 640 LINE",
"820 640 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 778 LINE SMOOTH",
"1100 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"702 900 OFFCURVE",
"702 701 QCURVE SMOOTH",
"702 502 OFFCURVE",
"912 502 QCURVE",
"912 323 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */\01221 6 2 0 6 1 76 0 6 0 0 1 6 0 105 8 1 1 0 5 4 1 5 105 0 3 3 2 95 0 2 2 17 77 0 4 4 7 97 0 7 7 19 7 78 0 0 37 35 32 30 28 27 25 23 15 14 13 12 0 4 0 4 17 9 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"800 671 QCURVE SMOOTH",
"800 732 OFFCURVE",
"862 732 QCURVE",
"862 610 LINE",
"800 610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 748 LINE SMOOTH",
"1150 870 OFFCURVE",
"912 870 QCURVE SMOOTH",
"652 870 OFFCURVE",
"652 671 QCURVE SMOOTH",
"652 472 OFFCURVE",
"862 472 QCURVE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"750 691 QCURVE SMOOTH",
"750 752 OFFCURVE",
"812 752 QCURVE",
"812 630 LINE",
"750 630 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 768 LINE SMOOTH",
"1200 890 OFFCURVE",
"1001 890 QCURVE SMOOTH",
"862 890 LINE SMOOTH",
"602 890 OFFCURVE",
"602 691 QCURVE SMOOTH",
"602 492 OFFCURVE",
"812 492 QCURVE",
"812 323 LINE SMOOTH",
"812 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"488 188 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"168 1250 LINE",
"57 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 323 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1785;
unicode = 1785;
},
{
glyphname = uni1786;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"250 300 QCURVE",
"250 41 LINE",
"152 176 OFFCURVE",
"152 244 QCURVE SMOOTH",
"152 300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"770 570 OFFCURVE",
"770 700 QCURVE SMOOTH",
"770 850 OFFCURVE",
"912 850 QCURVE SMOOTH",
"992 850 OFFCURVE",
"992 778 QCURVE SMOOTH",
"992 570 LINE",
"912 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"162 1048 LINE",
"230 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 350 LINE",
"102 350 OFFCURVE",
"102 244 QCURVE SMOOTH",
"102 162 OFFCURVE",
"220 0 QCURVE",
"308 0 LINE",
"308 300 LINE",
"554 300 LINE",
"597 164 OFFCURVE",
"750 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 778 LINE SMOOTH",
"1050 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"720 700 QCURVE SMOOTH",
"720 520 OFFCURVE",
"912 520 QCURVE SMOOTH",
"992 520 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"820 50 QCURVE SMOOTH",
"755 50 OFFCURVE",
"618 231 OFFCURVE",
"596 350 QCURVE",
"308 350 LINE",
"308 850 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"230 282 QCURVE",
"230 91 LINE",
"170 176 OFFCURVE",
"170 244 QCURVE SMOOTH",
"170 282 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"789 588 OFFCURVE",
"789 700 QCURVE SMOOTH",
"789 812 OFFCURVE",
"912 812 QCURVE SMOOTH",
"962 812 OFFCURVE",
"962 778 QCURVE SMOOTH",
"962 588 LINE",
"912 588 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"82 370 OFFCURVE",
"82 244 QCURVE SMOOTH",
"82 162 OFFCURVE",
"200 0 QCURVE",
"338 0 LINE",
"338 282 LINE",
"534 282 LINE",
"577 164 OFFCURVE",
"710 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 778 LINE SMOOTH",
"1070 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"700 700 QCURVE SMOOTH",
"700 500 OFFCURVE",
"912 500 QCURVE SMOOTH",
"962 500 LINE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"820 88 QCURVE SMOOTH",
"775 88 OFFCURVE",
"668 231 OFFCURVE",
"616 370 QCURVE",
"338 370 LINE",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 370 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"820 701 QCURVE SMOOTH",
"820 762 OFFCURVE",
"912 762 QCURVE",
"912 640 LINE",
"820 640 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 281 QCURVE SMOOTH",
"100 162 OFFCURVE",
"200 0 QCURVE",
"388 0 LINE",
"388 262 LINE",
"514 262 LINE",
"557 164 OFFCURVE",
"615 93 QCURVE SMOOTH",
"690 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"950 0 OFFCURVE",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 778 LINE SMOOTH",
"1100 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"702 900 OFFCURVE",
"702 701 QCURVE SMOOTH",
"702 502 OFFCURVE",
"912 502 QCURVE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE",
"845 138 OFFCURVE",
"820 138 QCURVE SMOOTH",
"795 138 OFFCURVE",
"728 231 OFFCURVE",
"678 323 QCURVE SMOOTH",
"636 400 LINE",
"388 400 LINE",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 400 LINE",
"100 400 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */\01221 6 2 0 7 1 76 0 7 0 0 1 7 0 105 12 1 1 0 6 4 1 6 105 13 11 2 4 0 9 5 4 9 103 0 3 3 2 95 0 2 2 17 77 0 5 5 8 97 10 1 8 8 19 8 78 5 5 0 0 5 51 5 51 48 47 46 45 42 40 36 34 32 31 28 26 23 22 15 14 13 12 0 4 0 4 17 14 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"800 671 QCURVE SMOOTH",
"800 732 OFFCURVE",
"862 732 QCURVE",
"862 610 LINE",
"800 610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"50 400 OFFCURVE",
"50 281 QCURVE SMOOTH",
"50 162 OFFCURVE",
"150 0 QCURVE",
"438 0 LINE",
"438 212 LINE",
"514 212 LINE",
"615 93 LINE SMOOTH",
"690 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"990 0 OFFCURVE",
"1150 145 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 748 LINE SMOOTH",
"1150 870 OFFCURVE",
"912 870 QCURVE SMOOTH",
"652 870 OFFCURVE",
"652 671 QCURVE SMOOTH",
"652 472 OFFCURVE",
"862 472 QCURVE",
"862 323 LINE SMOOTH",
"862 231 OFFCURVE",
"845 188 OFFCURVE",
"820 188 QCURVE SMOOTH",
"795 188 OFFCURVE",
"728 231 OFFCURVE",
"678 323 QCURVE SMOOTH",
"636 400 OFFCURVE",
"537 400 QCURVE SMOOTH",
"438 400 LINE",
"438 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 400 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"750 691 QCURVE SMOOTH",
"750 752 OFFCURVE",
"812 752 QCURVE",
"812 630 LINE",
"750 630 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"168 1250 LINE",
"57 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 400 LINE",
"20 400 OFFCURVE",
"20 281 QCURVE SMOOTH",
"20 162 OFFCURVE",
"100 0 QCURVE",
"488 0 LINE",
"488 162 LINE",
"514 162 LINE",
"690 0 OFFCURVE",
"870 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 768 LINE SMOOTH",
"1200 890 OFFCURVE",
"1001 890 QCURVE SMOOTH",
"862 890 LINE SMOOTH",
"602 890 OFFCURVE",
"602 691 QCURVE SMOOTH",
"602 492 OFFCURVE",
"812 492 QCURVE",
"812 323 LINE SMOOTH",
"812 238 OFFCURVE",
"770 238 QCURVE SMOOTH",
"745 238 OFFCURVE",
"606 400 OFFCURVE",
"537 400 QCURVE SMOOTH",
"488 400 LINE",
"488 820 LINE"
);
}
);
width = 1300;
}
);
note = uni1786;
unicode = 1786;
},
{
glyphname = uni1787;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 0 LINE",
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 923 LINE",
"992 923 LINE",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 850 LINE",
"162 1048 LINE",
"230 1150 LINE",
"800 1150 LINE SMOOTH",
"1050 1150 OFFCURVE",
"1050 1280 QCURVE SMOOTH",
"1050 1400 LINE",
"992 1400 LINE",
"992 1280 LINE SMOOTH",
"992 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"210 1200 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 0 LINE",
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 923 LINE",
"962 923 LINE",
"962 90 LINE",
"651 474 LINE",
"338 89 LINE",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"800 1112 LINE SMOOTH",
"1070 1112 OFFCURVE",
"1070 1280 QCURVE SMOOTH",
"1070 1400 LINE",
"962 1400 LINE",
"962 1280 LINE SMOOTH",
"962 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"190 1200 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"800 1062 LINE SMOOTH",
"1100 1062 OFFCURVE",
"1100 1250 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1250 LINE SMOOTH",
"912 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 923 LINE",
"912 923 LINE",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 820 LINE",
"304 916 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01211 8 3 2 1 0 6 1 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 3 3 4 112 0 5 5 3 95 0 3 3 17 77 0 0 0 1 95 2 1 1 1 19 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 3 4 133 0 5 5 3 95 0 3 3 17 77 0 0 0 1 95 2 1 1 1 19 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01234 18 39 18 17 20 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"651 455 LINE",
"438 261 LINE",
"438 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1150 1012 OFFCURVE",
"1150 1250 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1250 LINE SMOOTH",
"862 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 893 LINE",
"862 893 LINE",
"862 263 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"651 485 LINE",
"488 321 LINE",
"488 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1200 1012 OFFCURVE",
"1200 1300 QCURVE SMOOTH",
"1200 1400 LINE",
"812 1400 LINE",
"812 1300 LINE SMOOTH",
"812 1250 OFFCURVE",
"750 1250 QCURVE SMOOTH",
"218 1250 LINE",
"70 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 0 LINE",
"469 0 LINE",
"651 180 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 893 LINE",
"812 893 LINE",
"812 323 LINE"
);
}
);
width = 1300;
}
);
note = uni1787;
unicode = 1787;
},
{
glyphname = uni1788;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1590 50 OFFCURVE",
"1288 50 QCURVE SMOOTH",
"985 50 OFFCURVE",
"985 323 QCURVE SMOOTH",
"985 877 LINE SMOOTH",
"985 1200 OFFCURVE",
"618 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 877 LINE SMOOTH",
"308 1150 OFFCURVE",
"618 1150 QCURVE SMOOTH",
"927 1150 OFFCURVE",
"927 877 QCURVE SMOOTH",
"927 323 LINE SMOOTH",
"927 0 OFFCURVE",
"1288 0 QCURVE SMOOTH",
"1546 0 OFFCURVE",
"1619 166 QCURVE",
"1692 0 OFFCURVE",
"1951 0 QCURVE SMOOTH",
"2312 0 OFFCURVE",
"2312 323 QCURVE SMOOTH",
"2312 830 LINE",
"2065 1050 LINE",
"2117 1150 LINE",
"2312 1150 LINE",
"2312 1200 LINE",
"2094 1200 LINE",
"2016 1073 OFFCURVE",
"2016 1052 QCURVE SMOOTH",
"2016 1024 OFFCURVE",
"2076 970 QCURVE SMOOTH",
"2254 806 LINE",
"2254 323 LINE SMOOTH",
"2254 50 OFFCURVE",
"1951 50 QCURVE SMOOTH",
"1648 50 OFFCURVE",
"1648 323 QCURVE SMOOTH",
"1648 830 LINE",
"1401 1050 LINE",
"1453 1150 LINE",
"1648 1150 LINE",
"1648 1200 LINE",
"1430 1200 LINE",
"1352 1073 OFFCURVE",
"1352 1052 QCURVE SMOOTH",
"1352 1024 OFFCURVE",
"1412 970 QCURVE SMOOTH",
"1590 806 LINE",
"1590 323 LINE SMOOTH"
);
}
);
width = 2562;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1564 88 OFFCURVE",
"1283 88 QCURVE SMOOTH",
"1012 88 OFFCURVE",
"1012 323 QCURVE SMOOTH",
"1012 877 LINE SMOOTH",
"1012 1200 OFFCURVE",
"621 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 877 LINE SMOOTH",
"338 1112 OFFCURVE",
"621 1112 QCURVE SMOOTH",
"904 1112 OFFCURVE",
"904 877 QCURVE SMOOTH",
"904 323 LINE SMOOTH",
"904 0 OFFCURVE",
"1283 0 QCURVE SMOOTH",
"1526 0 OFFCURVE",
"1617 126 QCURVE",
"1706 0 OFFCURVE",
"1943 0 QCURVE SMOOTH",
"2332 0 OFFCURVE",
"2332 323 QCURVE SMOOTH",
"2332 840 LINE",
"2105 1060 LINE",
"2127 1112 LINE",
"2332 1112 LINE",
"2332 1200 LINE",
"2084 1200 LINE",
"2006 1063 OFFCURVE",
"2006 1042 QCURVE SMOOTH",
"2006 1014 OFFCURVE",
"2224 806 QCURVE",
"2224 323 LINE SMOOTH",
"2224 88 OFFCURVE",
"1943 88 QCURVE SMOOTH",
"1672 88 OFFCURVE",
"1672 323 QCURVE SMOOTH",
"1672 840 LINE",
"1445 1060 LINE",
"1467 1112 LINE",
"1672 1112 LINE",
"1672 1200 LINE",
"1424 1200 LINE",
"1346 1063 OFFCURVE",
"1346 1042 QCURVE SMOOTH",
"1346 1014 OFFCURVE",
"1564 806 QCURVE",
"1564 323 LINE SMOOTH"
);
}
);
width = 2562;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 877 LINE SMOOTH",
"388 1062 OFFCURVE",
"625 1062 QCURVE SMOOTH",
"862 1062 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 323 LINE SMOOTH",
"862 0 OFFCURVE",
"1287 0 QCURVE SMOOTH",
"1512 0 OFFCURVE",
"1618 98 QCURVE",
"1724 0 OFFCURVE",
"1943 0 QCURVE SMOOTH",
"2362 0 OFFCURVE",
"2362 323 QCURVE SMOOTH",
"2362 840 LINE",
"2114 1062 LINE",
"2362 1062 LINE",
"2362 1200 LINE",
"2114 1200 LINE",
"2039 1102 LINE",
"2002 1053 LINE SMOOTH",
"1986 1033 OFFCURVE",
"1986 1012 QCURVE SMOOTH",
"1986 984 OFFCURVE",
"2017 955 QCURVE SMOOTH",
"2069 905 LINE",
"2174 806 LINE",
"2174 323 LINE SMOOTH",
"2174 138 OFFCURVE",
"1943 138 QCURVE SMOOTH",
"1712 138 OFFCURVE",
"1712 323 QCURVE SMOOTH",
"1712 840 LINE",
"1514 1062 LINE",
"1762 1062 LINE",
"1762 1200 LINE",
"1514 1200 LINE",
"1439 1102 LINE",
"1402 1053 LINE SMOOTH",
"1383 1029 OFFCURVE",
"1383 1005 QCURVE SMOOTH",
"1383 980 OFFCURVE",
"1404 955 QCURVE SMOOTH",
"1444 905 LINE",
"1524 806 LINE",
"1524 323 LINE SMOOTH",
"1524 138 OFFCURVE",
"1287 138 QCURVE SMOOTH",
"1050 138 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 877 LINE SMOOTH",
"1050 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 85 values pushed */\01246 34 28 16 4 12 5 51 1 9 0 2 76 0 12 14 1 1 0 12 1 105 11 8 2 5 5 2 95 7 4 2 2 2 17 77 6 3 2 0 0 9 97 13 10 2 9 9 19 9 78 0 0 66 64 62 61 59 57 54 52 50 48 45 44 43 42 32 30 27 26 25 24 14 12 9 7 0 4 0 4 17 15 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 2562;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"2124 188 OFFCURVE",
"1943 188 QCURVE SMOOTH",
"1762 188 OFFCURVE",
"1762 323 QCURVE SMOOTH",
"1762 840 LINE",
"1464 1012 LINE",
"1762 1012 LINE",
"1762 1200 LINE",
"1414 1200 LINE",
"1339 1102 LINE",
"1302 1053 LINE SMOOTH",
"1286 1033 OFFCURVE",
"1286 1012 QCURVE SMOOTH",
"1286 984 OFFCURVE",
"1317 955 QCURVE SMOOTH",
"1369 905 LINE",
"1474 806 LINE",
"1474 323 LINE SMOOTH",
"1474 188 OFFCURVE",
"1287 188 QCURVE SMOOTH",
"1100 188 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 877 LINE SMOOTH",
"1100 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 877 LINE SMOOTH",
"438 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 877 QCURVE SMOOTH",
"812 323 LINE SMOOTH",
"812 0 OFFCURVE",
"1287 0 QCURVE SMOOTH",
"1512 0 OFFCURVE",
"1618 98 QCURVE",
"1724 0 OFFCURVE",
"1943 0 QCURVE SMOOTH",
"2412 0 OFFCURVE",
"2412 323 QCURVE SMOOTH",
"2412 840 LINE",
"2114 1012 LINE",
"2412 1012 LINE",
"2412 1200 LINE",
"2064 1200 LINE",
"1989 1102 LINE",
"1952 1053 LINE SMOOTH",
"1936 1033 OFFCURVE",
"1936 1012 QCURVE SMOOTH",
"1936 984 OFFCURVE",
"1967 955 QCURVE SMOOTH",
"2019 905 LINE",
"2124 806 LINE",
"2124 323 LINE SMOOTH"
);
}
);
width = 2562;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1424 238 OFFCURVE",
"1287 238 QCURVE SMOOTH",
"1150 238 OFFCURVE",
"1150 336 QCURVE SMOOTH",
"1150 914 LINE SMOOTH",
"1150 1250 OFFCURVE",
"625 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 914 LINE SMOOTH",
"488 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"762 1012 OFFCURVE",
"762 914 QCURVE SMOOTH",
"762 336 LINE SMOOTH",
"762 0 OFFCURVE",
"1287 0 QCURVE SMOOTH",
"1512 0 OFFCURVE",
"1618 102 QCURVE",
"1724 0 OFFCURVE",
"1943 0 QCURVE SMOOTH",
"2462 0 OFFCURVE",
"2462 336 QCURVE SMOOTH",
"2462 840 LINE",
"2164 1012 LINE",
"2462 1012 LINE",
"2462 1250 LINE",
"2034 1250 LINE",
"1938 1087 LINE SMOOTH",
"1906 1033 OFFCURVE",
"1906 1012 QCURVE SMOOTH",
"1906 984 OFFCURVE",
"1948 940 QCURVE SMOOTH",
"2074 806 LINE",
"2074 336 LINE SMOOTH",
"2074 238 OFFCURVE",
"1943 238 QCURVE SMOOTH",
"1812 238 OFFCURVE",
"1812 336 QCURVE SMOOTH",
"1812 840 LINE",
"1514 1012 LINE",
"1812 1012 LINE",
"1812 1250 LINE",
"1384 1250 LINE",
"1288 1087 LINE SMOOTH",
"1256 1033 OFFCURVE",
"1256 1012 QCURVE SMOOTH",
"1256 984 OFFCURVE",
"1298 940 QCURVE SMOOTH",
"1424 806 LINE",
"1424 336 LINE SMOOTH"
);
}
);
width = 2562;
}
);
note = uni1788;
unicode = 1788;
},
{
glyphname = uni1789;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1642 -260 LINE SMOOTH",
"1642 -450 OFFCURVE",
"1422 -450 QCURVE SMOOTH",
"1231 -450 OFFCURVE",
"857 -200 OFFCURVE",
"600 -200 QCURVE SMOOTH",
"250 -200 LINE",
"250 -250 LINE",
"600 -250 LINE SMOOTH",
"844 -250 OFFCURVE",
"1215 -500 OFFCURVE",
"1422 -500 QCURVE SMOOTH",
"1700 -500 OFFCURVE",
"1700 -260 QCURVE SMOOTH",
"1700 -100 LINE",
"1400 -100 LINE",
"1400 -150 LINE",
"1642 -150 LINE"
);
},
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 923 LINE SMOOTH",
"1050 945 OFFCURVE",
"1049 966 QCURVE",
"1084 1029 OFFCURVE",
"1146 1082 QCURVE SMOOTH",
"1227 1150 OFFCURVE",
"1361 1150 QCURVE SMOOTH",
"1642 1150 OFFCURVE",
"1642 877 QCURVE SMOOTH",
"1642 0 LINE",
"1700 0 LINE",
"1700 877 LINE SMOOTH",
"1700 1200 OFFCURVE",
"1361 1200 QCURVE SMOOTH",
"1163 1200 OFFCURVE",
"1040 1035 QCURVE",
"1006 1200 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1612 -260 LINE SMOOTH",
"1612 -410 OFFCURVE",
"1422 -410 QCURVE SMOOTH",
"1261 -410 OFFCURVE",
"897 -180 OFFCURVE",
"600 -180 QCURVE SMOOTH",
"230 -180 LINE",
"230 -270 LINE",
"600 -270 LINE SMOOTH",
"864 -270 OFFCURVE",
"1215 -500 OFFCURVE",
"1422 -500 QCURVE SMOOTH",
"1720 -500 OFFCURVE",
"1720 -260 QCURVE SMOOTH",
"1720 -100 LINE",
"1400 -100 LINE",
"1400 -190 LINE",
"1612 -190 LINE"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1011 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 937 LINE",
"1095 993 OFFCURVE",
"1144 1041 QCURVE SMOOTH",
"1217 1112 OFFCURVE",
"1331 1112 QCURVE SMOOTH",
"1612 1112 OFFCURVE",
"1612 877 QCURVE SMOOTH",
"1612 0 LINE",
"1720 0 LINE",
"1720 877 LINE SMOOTH",
"1720 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1144 1200 OFFCURVE",
"1039 1070 QCURVE",
"1027 1095 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1562 -260 LINE SMOOTH",
"1562 -380 OFFCURVE",
"1422 -380 QCURVE SMOOTH",
"1281 -380 OFFCURVE",
"1114 -280 QCURVE SMOOTH",
"947 -180 OFFCURVE",
"600 -180 QCURVE SMOOTH",
"200 -180 LINE",
"200 -300 LINE",
"600 -300 LINE SMOOTH",
"864 -300 OFFCURVE",
"1025 -400 QCURVE SMOOTH",
"1185 -500 OFFCURVE",
"1422 -500 QCURVE SMOOTH",
"1750 -500 OFFCURVE",
"1750 -260 QCURVE SMOOTH",
"1750 -100 LINE",
"1400 -100 LINE",
"1400 -220 LINE",
"1562 -220 LINE"
);
},
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 877 LINE SMOOTH",
"1100 969 OFFCURVE",
"1159 1015 QCURVE SMOOTH",
"1217 1062 OFFCURVE",
"1331 1062 QCURVE SMOOTH",
"1445 1062 OFFCURVE",
"1504 1015 QCURVE SMOOTH",
"1562 969 OFFCURVE",
"1562 877 QCURVE SMOOTH",
"1562 0 LINE",
"1750 0 LINE",
"1750 877 LINE SMOOTH",
"1750 1015 OFFCURVE",
"1650 1108 QCURVE SMOOTH",
"1550 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1126 1200 OFFCURVE",
"1025 1119 QCURVE",
"950 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01236 32 2 12 8 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 71 values pushed */\0120 15 12 17 12 15 17 128 0 17 20 1 7 6 17 7 105 0 0 19 1 5 2 0 5 103 0 3 0 2 4 3 2 103 16 14 2 12 12 8 97 10 9 2 8 8 17 77 0 6 6 11 95 18 13 2 11 11 19 77 0 4 4 1 97 0 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 82 values pushed */\0120 15 14 17 14 15 17 128 0 17 20 1 7 6 17 7 105 0 0 19 1 5 2 0 5 103 0 3 0 2 4 3 2 103 0 12 12 8 97 10 9 2 8 8 17 77 16 1 14 14 8 97 10 9 2 8 8 17 77 0 6 6 11 95 18 13 2 11 11 19 77 0 4 4 1 97 0 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 44 values pushed */\01220 20 0 0 74 72 70 69 67 65 63 61 59 57 55 54 50 48 44 43 39 37 35 33 31 29 20 24 20 24 22 21 0 19 0 19 34 33 34 34 17 21 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 1950;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1512 -220 LINE",
"1512 -260 LINE SMOOTH",
"1512 -330 OFFCURVE",
"1422 -330 QCURVE SMOOTH",
"1281 -330 OFFCURVE",
"947 -130 OFFCURVE",
"600 -130 QCURVE SMOOTH",
"150 -130 LINE",
"150 -300 LINE",
"600 -300 LINE SMOOTH",
"864 -300 OFFCURVE",
"1185 -500 OFFCURVE",
"1422 -500 QCURVE SMOOTH",
"1800 -500 OFFCURVE",
"1800 -260 QCURVE SMOOTH",
"1800 -100 LINE",
"1400 -100 LINE",
"1400 -220 LINE"
);
},
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1066 1118 QCURVE SMOOTH",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 881 LINE",
"1172 934 OFFCURVE",
"1199 966 QCURVE SMOOTH",
"1237 1012 OFFCURVE",
"1331 1012 QCURVE SMOOTH",
"1512 1012 OFFCURVE",
"1512 877 QCURVE SMOOTH",
"1512 0 LINE",
"1800 0 LINE",
"1800 877 LINE SMOOTH",
"1800 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1163 1200 OFFCURVE",
"1072 1112 QCURVE",
"1069 1115 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1462 -220 LINE",
"1462 -260 LINE SMOOTH",
"1462 -300 OFFCURVE",
"1392 -300 QCURVE SMOOTH",
"1281 -300 OFFCURVE",
"947 -100 OFFCURVE",
"600 -100 QCURVE SMOOTH",
"100 -100 LINE",
"100 -300 LINE",
"600 -300 LINE SMOOTH",
"864 -300 OFFCURVE",
"1185 -500 OFFCURVE",
"1452 -500 QCURVE SMOOTH",
"1850 -500 OFFCURVE",
"1850 -260 QCURVE SMOOTH",
"1850 -100 LINE",
"1360 -100 LINE",
"1360 -220 LINE"
);
},
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 955 LINE",
"1209 964 OFFCURVE",
"1220 973 QCURVE SMOOTH",
"1267 1012 OFFCURVE",
"1331 1012 QCURVE SMOOTH",
"1462 1012 OFFCURVE",
"1462 877 QCURVE SMOOTH",
"1462 0 LINE",
"1850 0 LINE",
"1850 877 LINE SMOOTH",
"1850 1250 OFFCURVE",
"1431 1250 QCURVE SMOOTH",
"1226 1250 OFFCURVE",
"1124 1169 QCURVE",
"1050 1250 OFFCURVE"
);
}
);
width = 1950;
}
);
note = uni1789;
unicode = 1789;
},
{
glyphname = uni178A;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 970 OFFCURVE",
"1050 1150 QCURVE SMOOTH",
"1050 1400 LINE",
"992 1400 LINE",
"992 1150 LINE SMOOTH",
"992 1020 OFFCURVE",
"800 1020 QCURVE SMOOTH",
"308 1020 LINE",
"308 1250 LINE",
"250 1250 LINE",
"250 970 LINE",
"800 970 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 823 LINE",
"992 823 LINE",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 823 LINE",
"250 823 LINE",
"250 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 962 OFFCURVE",
"1070 1150 QCURVE SMOOTH",
"1070 1400 LINE",
"962 1400 LINE",
"962 1150 LINE SMOOTH",
"962 1050 OFFCURVE",
"800 1050 QCURVE SMOOTH",
"338 1050 LINE",
"338 1250 LINE",
"230 1250 LINE",
"230 962 LINE",
"800 962 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"651 474 LINE",
"338 89 LINE",
"338 823 LINE",
"230 823 LINE",
"230 0 LINE",
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 823 LINE",
"962 823 LINE",
"962 90 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 962 OFFCURVE",
"1100 1150 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1150 LINE SMOOTH",
"912 1100 OFFCURVE",
"800 1100 QCURVE SMOOTH",
"388 1100 LINE",
"388 1250 LINE",
"200 1250 LINE",
"200 962 LINE",
"800 962 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 823 LINE",
"912 823 LINE",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 823 LINE",
"200 823 LINE",
"200 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01221 16 15 14 4 6 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 2 133 0 1 8 1 3 4 1 3 104 0 0 0 17 77 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 0 2 133 0 0 1 1 0 112 0 1 8 1 3 4 1 3 104 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 2 133 0 1 8 1 3 4 1 3 104 0 0 0 17 77 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 0 2 133 0 0 1 1 0 112 0 1 8 1 3 4 1 3 104 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 2 133 0 0 1 0 133 0 1 8 1 3 4 1 3 104 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 2 133 0 1 8 1 3 4 1 3 104 0 0 0 17 77 5 1 4 4 6 95 7 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 2 133 0 0 1 0 133 0 1 8 1 3 4 1 3 104 5 1 4 4 6 95 7 1 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 23 22 20 19 18 17 13 12 0 11 0 10 18 33 17 9 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"910 932 LINE SMOOTH",
"1150 932 OFFCURVE",
"1150 1170 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1170 LINE SMOOTH",
"862 1120 OFFCURVE",
"750 1120 QCURVE SMOOTH",
"438 1120 LINE",
"438 1250 LINE",
"150 1250 LINE",
"150 932 LINE"
);
},
{
closed = 1;
nodes = (
"150 823 LINE",
"150 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 823 LINE",
"862 823 LINE",
"862 263 LINE",
"651 455 LINE",
"438 261 LINE",
"438 823 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"960 932 LINE SMOOTH",
"1200 932 OFFCURVE",
"1200 1220 QCURVE SMOOTH",
"1200 1400 LINE",
"812 1400 LINE",
"812 1220 LINE SMOOTH",
"812 1170 OFFCURVE",
"700 1170 QCURVE SMOOTH",
"488 1170 LINE",
"488 1250 LINE",
"100 1250 LINE",
"100 932 LINE"
);
},
{
closed = 1;
nodes = (
"469 0 LINE",
"651 180 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 823 LINE",
"812 823 LINE",
"812 323 LINE",
"651 485 LINE",
"488 321 LINE",
"488 823 LINE",
"100 823 LINE",
"100 0 LINE"
);
}
);
width = 1300;
}
);
note = uni178A;
unicode = 178A;
},
{
glyphname = uni178B;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"803 1045 LINE",
"855 1150 LINE",
"942 1150 LINE SMOOTH",
"1070 1150 OFFCURVE",
"1070 1260 QCURVE SMOOTH",
"1070 1400 LINE",
"1012 1400 LINE",
"1012 1260 LINE SMOOTH",
"1012 1200 OFFCURVE",
"942 1200 QCURVE SMOOTH",
"832 1200 LINE",
"754 1063 OFFCURVE",
"754 1042 QCURVE SMOOTH",
"754 1014 OFFCURVE",
"814 965 QCURVE SMOOTH",
"992 816 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 1048 LINE SMOOTH",
"308 1200 OFFCURVE",
"160 1200 QCURVE SMOOTH",
"89 1200 LINE",
"89 1150 LINE",
"160 1150 LINE SMOOTH",
"250 1150 OFFCURVE",
"250 1048 QCURVE SMOOTH",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 833 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"843 1060 LINE",
"865 1112 LINE",
"942 1112 LINE SMOOTH",
"1122 1112 OFFCURVE",
"1122 1260 QCURVE SMOOTH",
"1122 1400 LINE",
"1014 1400 LINE",
"1014 1260 LINE SMOOTH",
"1014 1200 OFFCURVE",
"942 1200 QCURVE SMOOTH",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 1048 LINE SMOOTH",
"338 1200 OFFCURVE",
"160 1200 QCURVE SMOOTH",
"89 1200 LINE",
"89 1112 LINE",
"160 1112 LINE SMOOTH",
"230 1112 OFFCURVE",
"230 1048 QCURVE SMOOTH",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 840 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"742 1062 LINE",
"842 1062 LINE SMOOTH",
"1100 1062 OFFCURVE",
"1100 1250 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1250 LINE SMOOTH",
"912 1200 OFFCURVE",
"842 1200 QCURVE SMOOTH",
"742 1200 LINE",
"667 1102 LINE",
"630 1053 LINE SMOOTH",
"614 1033 OFFCURVE",
"614 1012 QCURVE SMOOTH",
"614 984 OFFCURVE",
"645 955 QCURVE",
"912 746 LINE",
"912 323 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 1098 LINE SMOOTH",
"388 1200 OFFCURVE",
"238 1200 QCURVE SMOOTH",
"80 1200 LINE",
"80 1062 LINE",
"200 1062 OFFCURVE",
"200 1015 QCURVE SMOOTH",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01230 13 2 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 4 1 1 4 112 5 1 0 0 1 97 3 1 1 1 17 77 0 2 2 6 97 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 1 4 133 5 1 0 0 1 97 3 1 1 1 17 77 0 2 2 6 97 0 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01235 34 18 41 35 33 18 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"842 1012 LINE",
"942 1012 LINE SMOOTH",
"1150 1012 OFFCURVE",
"1150 1250 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1250 LINE SMOOTH",
"862 1200 OFFCURVE",
"812 1200 QCURVE SMOOTH",
"742 1200 LINE",
"667 1102 LINE",
"630 1053 LINE SMOOTH",
"614 1033 OFFCURVE",
"614 1012 QCURVE SMOOTH",
"614 984 OFFCURVE",
"645 955 QCURVE SMOOTH",
"862 746 LINE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 1098 LINE SMOOTH",
"438 1200 OFFCURVE",
"238 1200 QCURVE SMOOTH",
"50 1200 LINE",
"50 1012 LINE",
"150 1012 OFFCURVE",
"150 965 QCURVE SMOOTH",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"812 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"488 188 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 1128 LINE SMOOTH",
"488 1250 OFFCURVE",
"338 1250 QCURVE SMOOTH",
"29 1250 LINE",
"29 1012 LINE",
"100 1012 OFFCURVE",
"100 965 QCURVE SMOOTH",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1082 1012 LINE SMOOTH",
"1252 1012 OFFCURVE",
"1252 1300 QCURVE SMOOTH",
"1252 1400 LINE",
"924 1400 LINE",
"924 1300 LINE SMOOTH",
"924 1250 OFFCURVE",
"882 1250 QCURVE SMOOTH",
"802 1250 LINE",
"706 1087 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"812 806 QCURVE",
"812 323 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni178B;
unicode = 178B;
},
{
glyphname = uni178C;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 -50 LINE",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE",
"852 50 OFFCURVE",
"530 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 877 LINE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 877 LINE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"530 0 QCURVE SMOOTH",
"836 0 OFFCURVE",
"992 222 QCURVE",
"992 -50 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 923 LINE SMOOTH",
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 877 LINE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 877 LINE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 877 LINE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01239 1 1 6 9 1 9 5 49 1 2 8 9 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 77 0 9 9 10 95 11 1 10 10 19 10 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 0 9 11 1 10 9 10 99 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 77 0 9 9 10 95 11 1 10 10 19 10 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 0 9 11 1 10 9 10 99 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 77 0 9 9 10 95 11 1 10 10 19 10 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 2 1 4 1 2 4 128 0 4 0 5 9 4 5 103 0 9 11 1 10 9 10 99 3 1 1 1 6 97 7 1 6 6 17 77 0 8 8 0 97 0 0 0 19 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 59 0 59 58 57 42 34 37 33 19 34 34 40 36 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1150 -50 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"515 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 443 LINE",
"566 469 LINE SMOOTH",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 923 LINE SMOOTH",
"1150 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"388 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 877 LINE SMOOTH",
"862 707 OFFCURVE",
"556 656 QCURVE SMOOTH",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 185 OFFCURVE",
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -50 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1200 -50 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"605 238 OFFCURVE",
"547 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 443 LINE",
"1200 575 OFFCURVE",
"1200 877 QCURVE SMOOTH",
"1200 953 LINE SMOOTH",
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 953 QCURVE SMOOTH",
"100 893 LINE SMOOTH",
"100 719 OFFCURVE",
"388 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"488 863 OFFCURVE",
"488 897 QCURVE SMOOTH",
"488 953 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 953 QCURVE SMOOTH",
"812 877 LINE SMOOTH",
"812 657 OFFCURVE",
"100 586 QCURVE",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"430 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"812 153 QCURVE",
"812 -50 LINE"
);
}
);
width = 1300;
}
);
note = uni178C;
unicode = 178C;
},
{
glyphname = uni178D;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1197 164 OFFCURVE",
"1350 0 OFFCURVE",
"1420 0 QCURVE SMOOTH",
"1650 0 OFFCURVE",
"1650 323 QCURVE SMOOTH",
"1650 830 LINE",
"1403 1050 LINE",
"1455 1150 LINE",
"1650 1150 LINE",
"1650 1200 LINE",
"1432 1200 LINE",
"1354 1073 OFFCURVE",
"1354 1052 QCURVE SMOOTH",
"1354 1024 OFFCURVE",
"1414 970 QCURVE SMOOTH",
"1592 806 LINE",
"1592 323 LINE SMOOTH",
"1592 50 OFFCURVE",
"1420 50 QCURVE SMOOTH",
"1355 50 OFFCURVE",
"1218 231 OFFCURVE",
"1196 350 QCURVE",
"1050 350 LINE",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 300 LINE",
"1154 300 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1177 164 OFFCURVE",
"1310 0 OFFCURVE",
"1420 0 QCURVE SMOOTH",
"1670 0 OFFCURVE",
"1670 323 QCURVE SMOOTH",
"1670 840 LINE",
"1443 1060 LINE",
"1465 1112 LINE",
"1670 1112 LINE",
"1670 1200 LINE",
"1422 1200 LINE",
"1344 1063 OFFCURVE",
"1344 1042 QCURVE SMOOTH",
"1344 1014 OFFCURVE",
"1562 806 QCURVE",
"1562 323 LINE SMOOTH",
"1562 88 OFFCURVE",
"1420 88 QCURVE SMOOTH",
"1375 88 OFFCURVE",
"1268 231 OFFCURVE",
"1216 370 QCURVE",
"1070 370 LINE",
"1070 923 LINE SMOOTH",
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 282 LINE",
"1134 282 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 262 LINE",
"1114 262 LINE",
"1157 164 OFFCURVE",
"1215 93 QCURVE SMOOTH",
"1290 0 OFFCURVE",
"1420 0 QCURVE SMOOTH",
"1550 0 OFFCURVE",
"1700 185 OFFCURVE",
"1700 323 QCURVE SMOOTH",
"1700 840 LINE",
"1452 1062 LINE",
"1700 1062 LINE",
"1700 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 323 LINE SMOOTH",
"1512 231 OFFCURVE",
"1445 138 OFFCURVE",
"1420 138 QCURVE SMOOTH",
"1395 138 OFFCURVE",
"1328 231 OFFCURVE",
"1278 323 QCURVE SMOOTH",
"1236 400 LINE",
"1100 400 LINE",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01212 1 7 2 40 28 2 13 11 48 1 0 1 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 11 7 13 7 11 13 128 0 4 13 1 13 4 1 128 0 13 15 1 1 0 13 1 105 12 10 2 7 7 2 97 6 3 2 2 2 17 77 5 1 0 0 8 97 14 9 2 8 8 19 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 64 values pushed */\0120 11 10 13 10 11 13 128 0 4 13 1 13 4 1 128 0 13 15 1 1 0 13 1 105 0 7 7 2 97 6 3 2 2 2 17 77 12 1 10 10 2 97 6 3 2 2 2 17 77 5 1 0 0 8 97 14 9 2 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\0120 0 70 68 66 65 63 61 59 57 55 53 51 50 45 43 39 38 37 36 25 23 20 19 15 13 11 9 0 4 0 4 17 16 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1165 93 QCURVE SMOOTH",
"1240 0 OFFCURVE",
"1420 0 QCURVE SMOOTH",
"1550 0 OFFCURVE",
"1750 185 OFFCURVE",
"1750 323 QCURVE SMOOTH",
"1750 840 LINE",
"1452 1012 LINE",
"1750 1012 LINE",
"1750 1200 LINE",
"1402 1200 LINE",
"1327 1102 LINE",
"1290 1053 LINE SMOOTH",
"1274 1033 OFFCURVE",
"1274 1012 QCURVE SMOOTH",
"1274 984 OFFCURVE",
"1305 955 QCURVE SMOOTH",
"1357 905 LINE",
"1462 806 LINE",
"1462 323 LINE SMOOTH",
"1462 231 OFFCURVE",
"1445 188 OFFCURVE",
"1420 188 QCURVE SMOOTH",
"1395 188 OFFCURVE",
"1328 231 OFFCURVE",
"1278 323 QCURVE SMOOTH",
"1236 400 LINE",
"1150 400 LINE",
"1150 923 LINE SMOOTH",
"1150 1036 OFFCURVE",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 112 LINE",
"1157 102 OFFCURVE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1420 0 QCURVE SMOOTH",
"1800 0 OFFCURVE",
"1800 323 QCURVE SMOOTH",
"1800 840 LINE",
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1250 LINE",
"1372 1250 LINE",
"1276 1087 LINE SMOOTH",
"1244 1033 OFFCURVE",
"1244 1012 QCURVE SMOOTH",
"1244 984 OFFCURVE",
"1286 940 QCURVE SMOOTH",
"1412 806 LINE",
"1412 323 LINE SMOOTH",
"1412 238 OFFCURVE",
"1370 238 QCURVE SMOOTH",
"1328 238 OFFCURVE",
"1278 323 QCURVE SMOOTH",
"1236 400 LINE",
"1200 400 LINE",
"1200 973 LINE SMOOTH",
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 59 LINE",
"1277 0 OFFCURVE"
);
}
);
width = 1900;
}
);
note = uni178D;
unicode = 178D;
},
{
glyphname = uni178E;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1270 374 LINE",
"973 58 LINE",
"973 877 LINE SMOOTH",
"973 1200 OFFCURVE",
"612 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 877 LINE SMOOTH",
"308 1150 OFFCURVE",
"612 1150 QCURVE SMOOTH",
"915 1150 OFFCURVE",
"915 877 QCURVE SMOOTH",
"915 0 LINE",
"988 0 LINE",
"1270 299 LINE",
"1552 0 LINE",
"1623 0 LINE",
"1623 877 LINE SMOOTH",
"1623 1150 OFFCURVE",
"1927 1150 QCURVE SMOOTH",
"2230 1150 OFFCURVE",
"2230 877 QCURVE SMOOTH",
"2230 0 LINE",
"2288 0 LINE",
"2288 877 LINE SMOOTH",
"2288 1200 OFFCURVE",
"1927 1200 QCURVE SMOOTH",
"1565 1200 OFFCURVE",
"1565 877 QCURVE SMOOTH",
"1565 59 LINE"
);
}
);
width = 2538;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1270 423 LINE",
"998 89 LINE",
"998 877 LINE SMOOTH",
"998 1200 OFFCURVE",
"614 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 877 LINE SMOOTH",
"338 1112 OFFCURVE",
"614 1112 QCURVE SMOOTH",
"890 1112 OFFCURVE",
"890 877 QCURVE SMOOTH",
"890 0 LINE",
"1039 0 LINE",
"1270 285 LINE",
"1501 0 LINE",
"1648 0 LINE",
"1648 877 LINE SMOOTH",
"1648 1112 OFFCURVE",
"1924 1112 QCURVE SMOOTH",
"2200 1112 OFFCURVE",
"2200 877 QCURVE SMOOTH",
"2200 0 LINE",
"2308 0 LINE",
"2308 877 LINE SMOOTH",
"2308 1200 OFFCURVE",
"1924 1200 QCURVE SMOOTH",
"1540 1200 OFFCURVE",
"1540 877 QCURVE SMOOTH",
"1540 90 LINE"
);
}
);
width = 2538;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1919 1200 QCURVE SMOOTH",
"1500 1200 OFFCURVE",
"1500 877 QCURVE SMOOTH",
"1500 167 LINE",
"1270 377 LINE",
"1038 166 LINE",
"1038 877 LINE SMOOTH",
"1038 1200 OFFCURVE",
"619 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 877 LINE SMOOTH",
"388 1062 OFFCURVE",
"619 1062 QCURVE SMOOTH",
"850 1062 OFFCURVE",
"850 877 QCURVE SMOOTH",
"850 0 LINE",
"1069 0 LINE",
"1270 182 LINE",
"1470 0 LINE",
"1688 0 LINE",
"1688 877 LINE SMOOTH",
"1688 1062 OFFCURVE",
"1919 1062 QCURVE SMOOTH",
"2150 1062 OFFCURVE",
"2150 877 QCURVE SMOOTH",
"2150 0 LINE",
"2338 0 LINE",
"2338 877 LINE SMOOTH",
"2338 1200 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */\01236 1 1 7 37 35 15 3 0 1 2 76 0 7 11 1 1 0 7 1 105 6 1 3 3 9 97 10 1 9 9 17 77 0 0 0 2 95 8 5 4 3 2 2 19 2 78 0 0 41 39 33 31 28 26 24 23 21 19 17 16 14 13 11 9 7 6 0 4 0 4 17 12 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 2538;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1088 261 LINE",
"1088 877 LINE SMOOTH",
"1088 1200 OFFCURVE",
"619 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 877 LINE SMOOTH",
"438 1012 OFFCURVE",
"619 1012 QCURVE SMOOTH",
"800 1012 OFFCURVE",
"800 877 QCURVE SMOOTH",
"800 0 LINE",
"1069 0 LINE",
"1270 182 LINE",
"1470 0 LINE",
"1738 0 LINE",
"1738 877 LINE SMOOTH",
"1738 1012 OFFCURVE",
"1919 1012 QCURVE SMOOTH",
"2100 1012 OFFCURVE",
"2100 877 QCURVE SMOOTH",
"2100 0 LINE",
"2388 0 LINE",
"2388 877 LINE SMOOTH",
"2388 1200 OFFCURVE",
"1919 1200 QCURVE SMOOTH",
"1450 1200 OFFCURVE",
"1450 877 QCURVE SMOOTH",
"1450 263 LINE",
"1270 427 LINE"
);
}
);
width = 2538;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1270 454 LINE",
"1138 321 LINE",
"1138 877 LINE SMOOTH",
"1138 1250 OFFCURVE",
"619 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 877 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 877 LINE SMOOTH",
"488 1012 OFFCURVE",
"619 1012 QCURVE SMOOTH",
"750 1012 OFFCURVE",
"750 877 QCURVE SMOOTH",
"750 0 LINE",
"1119 0 LINE",
"1270 149 LINE",
"1420 0 LINE",
"1788 0 LINE",
"1788 877 LINE SMOOTH",
"1788 1012 OFFCURVE",
"1919 1012 QCURVE SMOOTH",
"2050 1012 OFFCURVE",
"2050 877 QCURVE SMOOTH",
"2050 0 LINE",
"2438 0 LINE",
"2438 877 LINE SMOOTH",
"2438 1250 OFFCURVE",
"1919 1250 QCURVE SMOOTH",
"1400 1250 OFFCURVE",
"1400 877 QCURVE SMOOTH",
"1400 323 LINE"
);
}
);
width = 2538;
}
);
note = uni178E;
unicode = 178E;
},
{
glyphname = uni178F;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 600 LINE SMOOTH",
"308 873 OFFCURVE",
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1050 1200 LINE",
"250 1200 LINE",
"250 1150 LINE",
"1050 1150 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 1200 LINE",
"230 1200 LINE",
"230 1112 LINE",
"1070 1112 LINE"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 600 LINE SMOOTH",
"338 835 OFFCURVE",
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 600 LINE SMOOTH",
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 923 QCURVE SMOOTH",
"200 923 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 600 LINE SMOOTH",
"388 785 OFFCURVE",
"650 785 QCURVE SMOOTH",
"912 785 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 600 LINE SMOOTH",
"1100 923 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1200 LINE",
"200 1200 LINE",
"200 1062 LINE",
"1100 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 68 values pushed */\0120 6 0 3 4 6 3 105 0 4 9 1 1 0 4 1 105 10 1 8 8 7 95 0 7 7 17 77 0 0 0 2 97 5 1 2 2 19 2 78 24 24 0 0 24 27 24 27 26 25 23 21 18 16 14 13 11 9 7 6 0 4 0 4 17 11 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"150 1200 LINE"
);
},
{
closed = 1;
nodes = (
"438 705 OFFCURVE",
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 570 LINE SMOOTH",
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 570 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"530 310 OFFCURVE",
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"100 1250 LINE"
);
},
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"488 655 OFFCURVE",
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 570 LINE SMOOTH",
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 570 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni178F;
unicode = 178F;
},
{
glyphname = uni1790;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"770 570 OFFCURVE",
"770 700 QCURVE SMOOTH",
"770 850 OFFCURVE",
"912 850 QCURVE SMOOTH",
"992 850 OFFCURVE",
"992 778 QCURVE SMOOTH",
"992 570 LINE",
"912 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1050 1150 OFFCURVE",
"1050 1280 QCURVE SMOOTH",
"1050 1400 LINE",
"992 1400 LINE",
"992 1280 LINE SMOOTH",
"992 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 778 LINE SMOOTH",
"1050 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"720 700 QCURVE SMOOTH",
"720 520 OFFCURVE",
"912 520 QCURVE SMOOTH",
"992 520 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 850 LINE",
"162 1048 LINE",
"230 1150 LINE",
"800 1150 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"789 588 OFFCURVE",
"789 700 QCURVE SMOOTH",
"789 812 OFFCURVE",
"912 812 QCURVE SMOOTH",
"962 812 OFFCURVE",
"962 778 QCURVE SMOOTH",
"962 588 LINE",
"912 588 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1070 1112 OFFCURVE",
"1070 1280 QCURVE SMOOTH",
"1070 1400 LINE",
"962 1400 LINE",
"962 1280 LINE SMOOTH",
"962 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 778 LINE SMOOTH",
"1070 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"700 700 QCURVE SMOOTH",
"700 500 OFFCURVE",
"912 500 QCURVE SMOOTH",
"962 500 LINE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"800 1112 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"820 701 QCURVE SMOOTH",
"820 762 OFFCURVE",
"912 762 QCURVE",
"912 640 LINE",
"820 640 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 778 LINE SMOOTH",
"1100 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"702 900 OFFCURVE",
"702 701 QCURVE SMOOTH",
"702 502 OFFCURVE",
"912 502 QCURVE",
"912 323 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"800 1062 LINE SMOOTH",
"1100 1062 OFFCURVE",
"1100 1250 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1250 LINE SMOOTH",
"912 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01227 6 2 0 7 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 3 2 2 3 112 0 7 0 0 1 7 0 105 9 1 1 0 6 5 1 6 105 0 4 4 2 95 0 2 2 17 77 0 5 5 8 97 0 8 8 19 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 3 2 3 133 0 7 0 0 1 7 0 105 9 1 1 0 6 5 1 6 105 0 4 4 2 95 0 2 2 17 77 0 5 5 8 97 0 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 43 41 38 36 34 33 31 29 21 19 17 16 14 12 0 4 0 4 17 10 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"800 671 QCURVE SMOOTH",
"800 732 OFFCURVE",
"862 732 QCURVE",
"862 610 LINE",
"800 610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1150 1012 OFFCURVE",
"1150 1250 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1250 LINE SMOOTH",
"862 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 748 LINE SMOOTH",
"1150 870 OFFCURVE",
"912 870 QCURVE SMOOTH",
"652 870 OFFCURVE",
"652 671 QCURVE SMOOTH",
"652 472 OFFCURVE",
"862 472 QCURVE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 820 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"750 671 QCURVE SMOOTH",
"750 732 OFFCURVE",
"812 732 QCURVE",
"812 610 LINE",
"750 610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1200 1012 OFFCURVE",
"1200 1300 QCURVE SMOOTH",
"1200 1400 LINE",
"812 1400 LINE",
"812 1300 LINE SMOOTH",
"812 1250 OFFCURVE",
"750 1250 QCURVE SMOOTH",
"218 1250 LINE",
"70 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 748 LINE SMOOTH",
"1200 870 OFFCURVE",
"1001 870 QCURVE SMOOTH",
"862 870 LINE SMOOTH",
"602 870 OFFCURVE",
"602 671 QCURVE SMOOTH",
"602 472 OFFCURVE",
"812 472 QCURVE",
"812 323 LINE SMOOTH",
"812 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"488 188 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 820 LINE"
);
}
);
width = 1300;
}
);
note = uni1790;
unicode = 1790;
},
{
glyphname = uni1791;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"994 610 QCURVE SMOOTH",
"994 570 OFFCURVE",
"942 570 QCURVE",
"942 599 LINE SMOOTH",
"942 650 OFFCURVE",
"968 650 QCURVE SMOOTH",
"994 650 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"308 570 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE",
"1050 877 LINE",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 520 OFFCURVE",
"830 520 QCURVE SMOOTH",
"884 520 LINE",
"884 323 LINE SMOOTH",
"884 50 OFFCURVE",
"621 50 QCURVE SMOOTH",
"358 50 OFFCURVE",
"358 323 QCURVE SMOOTH",
"358 480 LINE",
"300 480 LINE",
"300 323 LINE SMOOTH",
"300 0 OFFCURVE",
"621 0 QCURVE SMOOTH",
"942 0 OFFCURVE",
"942 323 QCURVE SMOOTH",
"942 520 LINE",
"1050 520 OFFCURVE",
"1050 610 QCURVE SMOOTH",
"1050 700 OFFCURVE",
"962 700 QCURVE SMOOTH",
"884 700 OFFCURVE",
"884 600 QCURVE SMOOTH",
"884 570 LINE",
"827 570 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1004 609 QCURVE SMOOTH",
"1004 572 OFFCURVE",
"977 572 QCURVE SMOOTH",
"940 572 OFFCURVE",
"940 609 QCURVE SMOOTH",
"940 646 OFFCURVE",
"972 646 QCURVE SMOOTH",
"1004 646 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"338 668 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE",
"1070 877 LINE",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 594 OFFCURVE",
"734 525 QCURVE SMOOTH",
"854 508 LINE",
"854 323 LINE SMOOTH",
"854 88 OFFCURVE",
"621 88 QCURVE SMOOTH",
"388 88 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 480 LINE",
"280 480 LINE",
"280 323 LINE SMOOTH",
"280 0 OFFCURVE",
"621 0 QCURVE SMOOTH",
"962 0 OFFCURVE",
"962 323 QCURVE SMOOTH",
"962 489 LINE",
"977 489 LINE SMOOTH",
"1070 489 OFFCURVE",
"1070 610 QCURVE SMOOTH",
"1070 720 OFFCURVE",
"962 720 QCURVE SMOOTH",
"854 720 OFFCURVE",
"854 610 QCURVE SMOOTH",
"854 597 LINE",
"744 612 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1064 487 QCURVE SMOOTH",
"1100 523 OFFCURVE",
"1100 575 QCURVE SMOOTH",
"1100 627 OFFCURVE",
"1027 700 OFFCURVE",
"975 700 QCURVE SMOOTH",
"923 700 OFFCURVE",
"887 664 QCURVE SMOOTH",
"867 644 OFFCURVE",
"858 620 QCURVE",
"744 636 LINE SMOOTH",
"388 687 OFFCURVE",
"388 877 QCURVE SMOOTH",
"388 969 OFFCURVE",
"446 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"853 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 897 QCURVE SMOOTH",
"912 847 LINE",
"1100 847 LINE",
"1100 897 LINE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 575 OFFCURVE",
"734 499 QCURVE SMOOTH",
"850 482 LINE",
"850 323 LINE SMOOTH",
"850 138 OFFCURVE",
"644 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 480 LINE",
"250 480 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1038 0 OFFCURVE",
"1038 323 QCURVE SMOOTH",
"1038 467 LINE",
"1052 475 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 64 values pushed */\01238 13 2 1 6 0 1 2 1 2 76 0 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 17 77 0 2 2 0 98 0 0 0 19 0 78 41 36 20 40 34 18 34 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1114 467 QCURVE SMOOTH",
"1150 503 OFFCURVE",
"1150 555 QCURVE SMOOTH",
"1150 637 OFFCURVE",
"1077 730 OFFCURVE",
"975 730 QCURVE SMOOTH",
"873 730 OFFCURVE",
"837 694 QCURVE SMOOTH",
"817 674 OFFCURVE",
"808 650 QCURVE",
"438 727 OFFCURVE",
"438 877 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 897 QCURVE SMOOTH",
"862 847 LINE",
"1150 847 LINE",
"1150 897 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 555 OFFCURVE",
"800 462 QCURVE",
"800 323 LINE SMOOTH",
"800 188 OFFCURVE",
"644 188 QCURVE SMOOTH",
"488 188 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 460 LINE",
"200 460 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1088 0 OFFCURVE",
"1088 323 QCURVE SMOOTH",
"1088 447 LINE",
"1102 455 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1164 486 QCURVE SMOOTH",
"1200 524 OFFCURVE",
"1200 578 QCURVE SMOOTH",
"1200 664 OFFCURVE",
"1127 760 OFFCURVE",
"975 760 QCURVE SMOOTH",
"823 760 OFFCURVE",
"787 723 QCURVE SMOOTH",
"767 702 OFFCURVE",
"758 677 QCURVE",
"488 757 OFFCURVE",
"488 914 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 934 QCURVE SMOOTH",
"812 882 LINE",
"1200 882 LINE",
"1200 934 LINE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 578 OFFCURVE",
"750 481 QCURVE",
"750 336 LINE SMOOTH",
"750 238 OFFCURVE",
"644 238 QCURVE SMOOTH",
"538 238 OFFCURVE",
"538 336 QCURVE SMOOTH",
"538 459 LINE",
"150 459 LINE",
"150 336 LINE SMOOTH",
"150 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1138 0 OFFCURVE",
"1138 336 QCURVE SMOOTH",
"1138 466 LINE",
"1152 474 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni1791;
unicode = 1791;
},
{
glyphname = uni1792;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"770 570 OFFCURVE",
"770 700 QCURVE SMOOTH",
"770 850 OFFCURVE",
"912 850 QCURVE SMOOTH",
"992 850 OFFCURVE",
"992 778 QCURVE SMOOTH",
"992 570 LINE",
"912 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 778 LINE SMOOTH",
"1050 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"720 700 QCURVE SMOOTH",
"720 520 OFFCURVE",
"912 520 QCURVE SMOOTH",
"992 520 LINE",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 850 LINE",
"162 1048 LINE",
"230 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"789 588 OFFCURVE",
"789 700 QCURVE SMOOTH",
"789 812 OFFCURVE",
"912 812 QCURVE SMOOTH",
"962 812 OFFCURVE",
"962 778 QCURVE SMOOTH",
"962 588 LINE",
"912 588 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 778 LINE SMOOTH",
"1070 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"700 700 QCURVE SMOOTH",
"700 500 OFFCURVE",
"912 500 QCURVE SMOOTH",
"962 500 LINE",
"962 90 LINE",
"651 474 LINE",
"338 89 LINE",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"820 701 QCURVE SMOOTH",
"820 762 OFFCURVE",
"912 762 QCURVE",
"912 640 LINE",
"820 640 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"912 900 QCURVE SMOOTH",
"702 900 OFFCURVE",
"702 701 QCURVE SMOOTH",
"702 502 OFFCURVE",
"912 502 QCURVE",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 778 LINE SMOOTH",
"1100 900 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */\01226 11 2 0 7 29 28 27 8 4 2 6 2 76 0 7 0 0 1 7 0 105 8 1 1 0 6 2 1 6 105 0 5 5 4 95 0 4 4 17 77 3 1 2 2 19 2 78 0 0 35 33 31 30 20 19 18 17 10 9 7 6 0 4 0 4 17 9 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"651 455 LINE",
"438 261 LINE",
"438 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 748 LINE SMOOTH",
"1150 870 OFFCURVE",
"912 870 QCURVE SMOOTH",
"652 870 OFFCURVE",
"652 671 QCURVE SMOOTH",
"652 472 OFFCURVE",
"862 472 QCURVE",
"862 263 LINE"
);
},
{
closed = 1;
nodes = (
"800 610 OFFCURVE",
"800 671 QCURVE SMOOTH",
"800 732 OFFCURVE",
"862 732 QCURVE",
"862 610 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"750 691 QCURVE SMOOTH",
"750 752 OFFCURVE",
"812 752 QCURVE",
"812 630 LINE",
"750 630 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"651 455 LINE",
"488 321 LINE",
"488 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"168 1250 LINE",
"57 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 0 LINE",
"469 0 LINE",
"651 150 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 768 LINE SMOOTH",
"1200 890 OFFCURVE",
"1001 890 QCURVE SMOOTH",
"862 890 LINE SMOOTH",
"602 890 OFFCURVE",
"602 691 QCURVE SMOOTH",
"602 492 OFFCURVE",
"812 492 QCURVE",
"812 323 LINE"
);
}
);
width = 1300;
}
);
note = uni1792;
unicode = 1792;
},
{
glyphname = uni1793;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 775 OFFCURVE",
"862 775 QCURVE",
"862 721 LINE",
"1050 721 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 651 OFFCURVE",
"735 547 QCURVE SMOOTH",
"992 491 OFFCURVE",
"992 363 QCURVE SMOOTH",
"992 273 LINE SMOOTH",
"992 50 OFFCURVE",
"820 50 QCURVE SMOOTH",
"725 50 OFFCURVE",
"638 211 OFFCURVE",
"516 300 OFFCURVE",
"308 300 QCURVE",
"308 503 LINE",
"250 504 LINE",
"250 0 LINE",
"308 0 LINE",
"308 250 LINE",
"474 250 OFFCURVE",
"587 194 OFFCURVE",
"690 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 283 QCURVE SMOOTH",
"1050 363 LINE SMOOTH",
"1050 530 OFFCURVE",
"748 595 QCURVE SMOOTH",
"308 689 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 813 OFFCURVE",
"862 813 QCURVE",
"862 719 LINE",
"1070 719 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 627 OFFCURVE",
"734 527 QCURVE SMOOTH",
"962 481 OFFCURVE",
"962 363 QCURVE SMOOTH",
"962 273 LINE SMOOTH",
"962 88 OFFCURVE",
"820 88 QCURVE SMOOTH",
"765 88 OFFCURVE",
"678 211 OFFCURVE",
"546 330 OFFCURVE",
"338 330 QCURVE",
"338 503 LINE",
"230 504 LINE",
"230 0 LINE",
"338 0 LINE",
"338 242 LINE",
"464 242 OFFCURVE",
"557 194 OFFCURVE",
"690 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 283 QCURVE SMOOTH",
"1070 363 LINE SMOOTH",
"1070 546 OFFCURVE",
"749 614 QCURVE SMOOTH",
"338 699 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"912 363 QCURVE SMOOTH",
"912 273 LINE SMOOTH",
"912 201 OFFCURVE",
"845 138 OFFCURVE",
"820 138 QCURVE SMOOTH",
"795 138 OFFCURVE",
"728 231 OFFCURVE",
"566 350 OFFCURVE",
"388 350 QCURVE",
"388 503 LINE",
"200 504 LINE",
"200 0 LINE",
"388 0 LINE",
"388 212 LINE",
"464 212 OFFCURVE",
"557 164 OFFCURVE",
"615 93 QCURVE SMOOTH",
"690 0 OFFCURVE",
"820 0 QCURVE SMOOTH",
"950 0 OFFCURVE",
"1100 155 OFFCURVE",
"1100 283 QCURVE SMOOTH",
"1100 363 LINE SMOOTH",
"1100 586 OFFCURVE",
"744 636 QCURVE SMOOTH",
"388 687 OFFCURVE",
"388 877 QCURVE SMOOTH",
"388 969 OFFCURVE",
"446 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"853 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 897 QCURVE SMOOTH",
"912 863 OFFCURVE",
"812 863 QCURVE",
"812 719 LINE",
"962 719 LINE SMOOTH",
"1100 719 OFFCURVE",
"1100 863 QCURVE SMOOTH",
"1100 897 LINE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 575 OFFCURVE",
"734 499 QCURVE SMOOTH",
"912 473 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */\0120 2 0 1 7 2 1 103 0 8 0 5 9 8 5 105 0 3 3 0 97 0 0 0 17 77 0 7 7 4 97 6 1 4 4 19 77 0 9 9 4 97 6 1 4 4 19 4 78 48 46 17 17 17 19 42 36 17 37 37 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"862 363 QCURVE SMOOTH",
"862 273 LINE SMOOTH",
"862 188 OFFCURVE",
"800 188 QCURVE SMOOTH",
"755 188 OFFCURVE",
"566 350 OFFCURVE",
"438 350 QCURVE",
"438 503 LINE",
"150 503 LINE",
"150 0 LINE",
"438 0 LINE",
"438 162 LINE",
"464 162 OFFCURVE",
"690 0 OFFCURVE",
"800 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 283 QCURVE SMOOTH",
"1150 363 LINE SMOOTH",
"1150 590 OFFCURVE",
"778 666 QCURVE SMOOTH",
"438 731 OFFCURVE",
"438 877 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 917 QCURVE SMOOTH",
"862 883 OFFCURVE",
"782 883 QCURVE",
"782 739 LINE",
"962 739 LINE SMOOTH",
"1150 739 OFFCURVE",
"1150 883 QCURVE SMOOTH",
"1150 917 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 605 OFFCURVE",
"734 489 QCURVE SMOOTH",
"862 463 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"812 512 OFFCURVE",
"812 378 QCURVE SMOOTH",
"812 284 LINE SMOOTH",
"812 238 OFFCURVE",
"774 238 QCURVE SMOOTH",
"735 238 OFFCURVE",
"596 385 OFFCURVE",
"488 385 QCURVE",
"488 504 LINE",
"100 504 LINE",
"100 0 LINE",
"488 0 LINE",
"488 169 LINE",
"514 169 OFFCURVE",
"690 0 OFFCURVE",
"890 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 295 QCURVE SMOOTH",
"1200 378 LINE SMOOTH",
"1200 615 OFFCURVE",
"844 688 QCURVE SMOOTH",
"488 761 OFFCURVE",
"488 914 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 955 QCURVE SMOOTH",
"812 920 OFFCURVE",
"752 920 QCURVE",
"752 770 LINE",
"1012 770 LINE SMOOTH",
"1200 770 OFFCURVE",
"1200 914 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 630 OFFCURVE",
"723 527 QCURVE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1793;
unicode = 1793;
},
{
glyphname = uni1794;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 840 LINE",
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 323 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\01231 19 13 1 4 2 1 1 76 4 1 1 1 0 95 3 1 0 0 17 77 0 2 2 5 97 0 5 5 19 5 78 35 17 26 35 17 25 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 323 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 323 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 323 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1794;
unicode = 1794;
},
{
glyphname = uni1795;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"770 570 OFFCURVE",
"770 700 QCURVE SMOOTH",
"770 850 OFFCURVE",
"912 850 QCURVE SMOOTH",
"992 850 OFFCURVE",
"992 778 QCURVE SMOOTH",
"992 570 LINE",
"912 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"162 1048 LINE",
"230 1150 LINE",
"800 1150 LINE SMOOTH",
"1050 1150 OFFCURVE",
"1050 1280 QCURVE SMOOTH",
"1050 1400 LINE",
"992 1400 LINE",
"992 1280 LINE SMOOTH",
"992 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 0 LINE",
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 778 LINE SMOOTH",
"1050 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"720 700 QCURVE SMOOTH",
"720 520 OFFCURVE",
"912 520 QCURVE SMOOTH",
"992 520 LINE",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 850 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"789 588 OFFCURVE",
"789 700 QCURVE SMOOTH",
"789 812 OFFCURVE",
"912 812 QCURVE SMOOTH",
"962 812 OFFCURVE",
"962 778 QCURVE SMOOTH",
"962 588 LINE",
"912 588 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1070 1112 OFFCURVE",
"1070 1280 QCURVE SMOOTH",
"1070 1400 LINE",
"962 1400 LINE",
"962 1280 LINE SMOOTH",
"962 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 0 LINE",
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 778 LINE SMOOTH",
"1070 900 OFFCURVE",
"912 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"700 700 QCURVE SMOOTH",
"700 500 OFFCURVE",
"912 500 QCURVE SMOOTH",
"962 500 LINE",
"962 90 LINE",
"651 474 LINE",
"338 89 LINE",
"338 870 LINE",
"202 1058 LINE",
"230 1112 LINE",
"800 1112 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"820 701 QCURVE SMOOTH",
"820 762 OFFCURVE",
"912 762 QCURVE",
"912 640 LINE",
"820 640 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"912 900 QCURVE SMOOTH",
"702 900 OFFCURVE",
"702 701 QCURVE SMOOTH",
"702 502 OFFCURVE",
"912 502 QCURVE",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"800 1062 LINE SMOOTH",
"1100 1062 OFFCURVE",
"1100 1250 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1250 LINE SMOOTH",
"912 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 778 LINE SMOOTH",
"1100 900 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01232 11 2 0 8 35 34 33 8 4 2 7 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 5 4 4 5 112 0 8 0 0 1 8 0 105 9 1 1 0 7 2 1 7 105 0 6 6 4 95 0 4 4 17 77 3 1 2 2 19 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 5 4 5 133 0 8 0 0 1 8 0 105 9 1 1 0 7 2 1 7 105 0 6 6 4 95 0 4 4 17 77 3 1 2 2 19 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 41 39 37 36 26 24 22 21 19 17 10 9 7 6 0 4 0 4 17 10 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"800 671 QCURVE SMOOTH",
"800 732 OFFCURVE",
"862 732 QCURVE",
"862 610 LINE",
"800 610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"651 455 LINE",
"438 261 LINE",
"438 820 LINE",
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1150 1012 OFFCURVE",
"1150 1250 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1250 LINE SMOOTH",
"862 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 748 LINE SMOOTH",
"1150 870 OFFCURVE",
"912 870 QCURVE SMOOTH",
"652 870 OFFCURVE",
"652 671 QCURVE SMOOTH",
"652 472 OFFCURVE",
"862 472 QCURVE",
"862 263 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"750 691 QCURVE SMOOTH",
"750 752 OFFCURVE",
"812 752 QCURVE",
"812 630 LINE",
"750 630 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"930 1012 LINE SMOOTH",
"1200 1012 OFFCURVE",
"1200 1300 QCURVE SMOOTH",
"1200 1400 LINE",
"812 1400 LINE",
"812 1300 LINE SMOOTH",
"812 1250 OFFCURVE",
"750 1250 QCURVE SMOOTH",
"218 1250 LINE",
"70 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 0 LINE",
"469 0 LINE",
"651 150 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 768 LINE SMOOTH",
"1200 890 OFFCURVE",
"1001 890 QCURVE SMOOTH",
"862 890 LINE SMOOTH",
"602 890 OFFCURVE",
"602 691 QCURVE SMOOTH",
"602 492 OFFCURVE",
"812 492 QCURVE",
"812 323 LINE",
"651 455 LINE",
"488 321 LINE",
"488 820 LINE"
);
}
);
width = 1300;
}
);
note = uni1795;
unicode = 1795;
},
{
glyphname = uni1796;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 923 LINE SMOOTH",
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */\01212 1 5 2 1 76 0 6 5 8 5 6 8 128 0 8 10 1 1 0 8 1 105 7 1 5 5 2 97 3 1 2 2 17 77 0 0 0 4 97 9 1 4 4 19 4 78 0 0 39 37 35 34 32 30 28 26 24 22 20 19 15 13 11 9 0 4 0 4 17 11 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 923 LINE SMOOTH",
"1150 1036 OFFCURVE",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 973 LINE SMOOTH",
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1796;
unicode = 1796;
},
{
glyphname = uni1797;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 477 OFFCURVE",
"340 297 OFFCURVE",
"340 174 QCURVE SMOOTH",
"340 50 OFFCURVE",
"266 50 QCURVE SMOOTH",
"181 50 OFFCURVE",
"147 234 QCURVE",
"90 223 LINE",
"130 0 OFFCURVE",
"266 0 QCURVE SMOOTH",
"398 0 OFFCURVE",
"398 174 QCURVE SMOOTH",
"398 318 OFFCURVE",
"308 480 OFFCURVE",
"308 600 QCURVE SMOOTH",
"308 873 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1050 1200 LINE",
"250 1200 LINE",
"250 1150 LINE",
"1050 1150 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 600 LINE SMOOTH",
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 507 OFFCURVE",
"320 297 OFFCURVE",
"320 204 QCURVE SMOOTH",
"320 104 OFFCURVE",
"266 104 QCURVE SMOOTH",
"201 104 OFFCURVE",
"157 254 QCURVE",
"70 223 LINE",
"110 0 OFFCURVE",
"266 0 QCURVE SMOOTH",
"428 0 OFFCURVE",
"428 204 QCURVE SMOOTH",
"428 348 OFFCURVE",
"338 540 OFFCURVE",
"338 600 QCURVE SMOOTH",
"338 835 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1070 1200 LINE",
"230 1200 LINE",
"230 1112 LINE",
"1070 1112 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 785 QCURVE SMOOTH",
"912 785 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 600 LINE SMOOTH",
"1100 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"200 923 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 507 OFFCURVE",
"270 267 OFFCURVE",
"270 224 QCURVE SMOOTH",
"270 174 OFFCURVE",
"236 174 QCURVE SMOOTH",
"181 174 OFFCURVE",
"147 264 QCURVE",
"40 223 LINE",
"80 0 OFFCURVE",
"236 0 QCURVE SMOOTH",
"458 0 OFFCURVE",
"458 224 QCURVE SMOOTH",
"458 348 OFFCURVE",
"388 540 OFFCURVE",
"388 600 QCURVE SMOOTH",
"388 785 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1200 LINE",
"200 1200 LINE",
"200 1062 LINE",
"1100 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\0128 7 2 1 4 1 76 0 2 0 4 1 2 4 105 7 1 6 6 5 95 0 5 5 17 77 0 1 1 0 97 3 1 0 0 19 0 78 26 26 26 29 26 29 18 34 18 37 35 36 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"150 1200 LINE"
);
},
{
closed = 1;
nodes = (
"438 705 OFFCURVE",
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 570 LINE SMOOTH",
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 600 QCURVE SMOOTH",
"150 507 OFFCURVE",
"220 267 OFFCURVE",
"220 224 QCURVE SMOOTH",
"220 194 OFFCURVE",
"186 194 QCURVE SMOOTH",
"151 194 OFFCURVE",
"147 264 QCURVE",
"30 223 LINE",
"70 0 OFFCURVE",
"236 0 QCURVE SMOOTH",
"508 0 OFFCURVE",
"508 224 QCURVE SMOOTH",
"508 348 OFFCURVE",
"438 540 OFFCURVE",
"438 600 QCURVE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"100 1250 LINE"
);
},
{
closed = 1;
nodes = (
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 570 LINE SMOOTH",
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 487 OFFCURVE",
"190 307 OFFCURVE",
"190 264 QCURVE SMOOTH",
"190 234 OFFCURVE",
"166 234 QCURVE SMOOTH",
"141 234 OFFCURVE",
"137 304 QCURVE",
"20 263 LINE",
"60 0 OFFCURVE",
"306 0 QCURVE SMOOTH",
"558 0 OFFCURVE",
"558 224 QCURVE SMOOTH",
"558 348 OFFCURVE",
"488 520 OFFCURVE",
"488 570 QCURVE SMOOTH",
"488 655 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni1797;
unicode = 1797;
},
{
glyphname = uni1798;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 625 LINE",
"308 625 LINE"
);
},
{
closed = 1;
nodes = (
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 575 LINE",
"992 575 LINE",
"992 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 840 LINE",
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 644 LINE",
"338 644 LINE"
);
},
{
closed = 1;
nodes = (
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 556 LINE",
"962 556 LINE",
"962 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 669 LINE",
"388 669 LINE",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE"
);
},
{
closed = 1;
nodes = (
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 531 LINE",
"912 531 LINE",
"912 323 LINE SMOOTH",
"912 138 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 51 values pushed */\01221 18 6 0 4 3 2 1 76 0 3 0 6 7 3 6 103 5 1 2 2 1 95 4 1 1 1 17 77 0 7 7 0 97 0 0 0 19 0 78 34 18 17 25 18 17 26 34 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 694 LINE",
"438 694 LINE"
);
},
{
closed = 1;
nodes = (
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 506 LINE",
"862 506 LINE",
"862 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 719 LINE",
"488 719 LINE"
);
},
{
closed = 1;
nodes = (
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 481 LINE",
"812 481 LINE",
"812 323 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni1798;
unicode = 1798;
},
{
glyphname = uni1799;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"640 0 QCURVE SMOOTH",
"926 0 OFFCURVE",
"1000 166 QCURVE",
"1074 0 OFFCURVE",
"1336 0 QCURVE SMOOTH",
"1700 0 OFFCURVE",
"1700 323 QCURVE SMOOTH",
"1700 830 LINE",
"1453 1050 LINE",
"1505 1150 LINE",
"1700 1150 LINE",
"1700 1200 LINE",
"1482 1200 LINE",
"1404 1073 OFFCURVE",
"1404 1052 QCURVE SMOOTH",
"1404 1024 OFFCURVE",
"1464 970 QCURVE SMOOTH",
"1642 806 LINE",
"1642 323 LINE SMOOTH",
"1642 50 OFFCURVE",
"1336 50 QCURVE SMOOTH",
"1029 50 OFFCURVE",
"1029 323 QCURVE SMOOTH",
"1029 830 LINE",
"782 1050 LINE",
"834 1150 LINE",
"1029 1150 LINE",
"1029 1200 LINE",
"811 1200 LINE",
"733 1073 OFFCURVE",
"733 1052 QCURVE SMOOTH",
"733 1024 OFFCURVE",
"793 970 QCURVE SMOOTH",
"971 806 LINE",
"971 323 LINE SMOOTH",
"971 50 OFFCURVE",
"640 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 1048 LINE SMOOTH",
"308 1150 OFFCURVE",
"398 1150 QCURVE SMOOTH",
"469 1150 LINE",
"469 1200 LINE",
"398 1200 LINE SMOOTH",
"250 1200 OFFCURVE",
"250 1048 QCURVE SMOOTH",
"250 323 LINE SMOOTH"
);
}
);
width = 1950;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"642 0 QCURVE SMOOTH",
"909 0 OFFCURVE",
"1000 127 QCURVE",
"1091 0 OFFCURVE",
"1333 0 QCURVE SMOOTH",
"1720 0 OFFCURVE",
"1720 323 QCURVE SMOOTH",
"1720 840 LINE",
"1493 1060 LINE",
"1515 1112 LINE",
"1720 1112 LINE",
"1720 1200 LINE",
"1472 1200 LINE",
"1394 1063 OFFCURVE",
"1394 1042 QCURVE SMOOTH",
"1394 1014 OFFCURVE",
"1612 806 QCURVE",
"1612 323 LINE SMOOTH",
"1612 88 OFFCURVE",
"1333 88 QCURVE SMOOTH",
"1054 88 OFFCURVE",
"1054 323 QCURVE SMOOTH",
"1054 840 LINE",
"827 1060 LINE",
"849 1112 LINE",
"1054 1112 LINE",
"1054 1200 LINE",
"806 1200 LINE",
"728 1063 OFFCURVE",
"728 1042 QCURVE SMOOTH",
"728 1014 OFFCURVE",
"946 806 QCURVE",
"946 323 LINE SMOOTH",
"946 88 OFFCURVE",
"642 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 1048 LINE SMOOTH",
"338 1112 OFFCURVE",
"408 1112 QCURVE SMOOTH",
"479 1112 LINE",
"479 1200 LINE",
"408 1200 LINE SMOOTH",
"230 1200 OFFCURVE",
"230 1048 QCURVE SMOOTH",
"230 323 LINE SMOOTH"
);
}
);
width = 1950;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1000 93 QCURVE",
"1003 95 OFFCURVE",
"1006 98 QCURVE",
"1009 95 OFFCURVE",
"1012 93 QCURVE",
"1112 0 OFFCURVE",
"1331 0 QCURVE SMOOTH",
"1550 0 OFFCURVE",
"1750 185 OFFCURVE",
"1750 323 QCURVE SMOOTH",
"1750 840 LINE",
"1502 1062 LINE",
"1750 1062 LINE",
"1750 1200 LINE",
"1502 1200 LINE",
"1427 1102 LINE",
"1390 1053 LINE SMOOTH",
"1374 1033 OFFCURVE",
"1374 1012 QCURVE SMOOTH",
"1374 984 OFFCURVE",
"1405 955 QCURVE SMOOTH",
"1457 905 LINE",
"1562 806 LINE",
"1562 323 LINE SMOOTH",
"1562 231 OFFCURVE",
"1504 185 QCURVE SMOOTH",
"1445 138 OFFCURVE",
"1331 138 QCURVE SMOOTH",
"1217 138 OFFCURVE",
"1159 185 QCURVE SMOOTH",
"1100 231 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"902 1062 LINE",
"1150 1062 LINE",
"1150 1200 LINE",
"902 1200 LINE",
"827 1102 LINE",
"790 1053 LINE SMOOTH",
"771 1029 OFFCURVE",
"771 1005 QCURVE SMOOTH",
"771 980 OFFCURVE",
"792 955 QCURVE SMOOTH",
"832 905 LINE",
"912 806 LINE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE",
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 1015 LINE SMOOTH",
"388 1062 OFFCURVE",
"529 1062 QCURVE",
"529 1200 LINE",
"350 1200 LINE SMOOTH",
"200 1200 OFFCURVE",
"200 1098 QCURVE SMOOTH",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01249 37 27 15 4 2 1 55 1 8 2 2 76 7 4 2 1 1 0 95 6 3 2 0 0 17 77 5 1 2 2 8 97 9 1 8 8 19 8 78 62 60 36 17 28 37 17 27 36 17 34 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1950;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1006 98 QCURVE",
"1112 0 OFFCURVE",
"1331 0 QCURVE SMOOTH",
"1800 0 OFFCURVE",
"1800 323 QCURVE SMOOTH",
"1800 840 LINE",
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 323 LINE SMOOTH",
"1512 188 OFFCURVE",
"1331 188 QCURVE SMOOTH",
"1150 188 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 323 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 965 LINE SMOOTH",
"438 1012 OFFCURVE",
"559 1012 QCURVE",
"559 1200 LINE",
"300 1200 LINE SMOOTH",
"150 1200 OFFCURVE",
"150 1098 QCURVE SMOOTH",
"150 323 LINE SMOOTH"
);
}
);
width = 1950;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 1012 OFFCURVE",
"559 1012 QCURVE",
"559 1250 LINE",
"250 1250 LINE SMOOTH",
"100 1250 OFFCURVE",
"100 1128 QCURVE SMOOTH",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"879 0 OFFCURVE",
"1004 49 QCURVE",
"1128 0 OFFCURVE",
"1331 0 QCURVE SMOOTH",
"1850 0 OFFCURVE",
"1850 323 QCURVE SMOOTH",
"1850 840 LINE",
"1552 1012 LINE",
"1850 1012 LINE",
"1850 1250 LINE",
"1422 1250 LINE",
"1326 1087 LINE SMOOTH",
"1294 1033 OFFCURVE",
"1294 1012 QCURVE SMOOTH",
"1294 984 OFFCURVE",
"1336 940 QCURVE SMOOTH",
"1462 806 LINE",
"1462 323 LINE SMOOTH",
"1462 238 OFFCURVE",
"1331 238 QCURVE SMOOTH",
"1199 238 OFFCURVE",
"1199 323 QCURVE SMOOTH",
"1199 840 LINE",
"901 1012 LINE",
"1199 1012 LINE",
"1199 1250 LINE",
"771 1250 LINE",
"675 1087 LINE SMOOTH",
"643 1033 OFFCURVE",
"643 1012 QCURVE SMOOTH",
"643 984 OFFCURVE",
"685 940 QCURVE SMOOTH",
"811 806 LINE",
"811 323 LINE SMOOTH",
"811 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 965 LINE SMOOTH"
);
}
);
width = 1950;
}
);
note = uni1799;
unicode = 1799;
},
{
glyphname = uni179A;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"200 50 QCURVE SMOOTH",
"100 50 OFFCURVE",
"100 249 QCURVE SMOOTH",
"100 370 OFFCURVE",
"200 370 QCURVE SMOOTH",
"280 370 LINE",
"280 122 LINE SMOOTH",
"280 50 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 418 LINE",
"200 418 LINE SMOOTH",
"50 418 OFFCURVE",
"50 249 QCURVE SMOOTH",
"50 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"338 0 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"200 88 QCURVE SMOOTH",
"128 88 OFFCURVE",
"128 249 QCURVE SMOOTH",
"128 340 OFFCURVE",
"200 340 QCURVE SMOOTH",
"250 340 LINE",
"250 122 LINE SMOOTH",
"250 88 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 428 LINE",
"200 428 LINE SMOOTH",
"40 428 OFFCURVE",
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"358 0 OFFCURVE",
"358 122 QCURVE SMOOTH",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"158 249 QCURVE SMOOTH",
"158 310 OFFCURVE",
"200 310 QCURVE",
"200 138 LINE",
"158 138 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"294 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 122 QCURVE SMOOTH",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 448 LINE",
"40 448 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\01218 6 2 5 3 1 76 7 1 5 0 0 1 5 0 105 0 3 3 2 95 0 2 2 17 77 6 1 1 1 4 97 0 4 4 19 4 78 5 5 0 0 5 25 5 25 23 20 17 16 15 14 0 4 0 4 17 8 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"210 229 QCURVE SMOOTH",
"210 148 OFFCURVE",
"184 148 QCURVE SMOOTH",
"158 148 OFFCURVE",
"158 249 QCURVE SMOOTH",
"158 310 OFFCURVE",
"184 310 QCURVE SMOOTH",
"210 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"40 448 OFFCURVE",
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"344 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 122 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 448 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"190 229 QCURVE SMOOTH",
"190 148 OFFCURVE",
"164 148 QCURVE SMOOTH",
"138 148 OFFCURVE",
"138 249 QCURVE SMOOTH",
"138 310 OFFCURVE",
"164 310 QCURVE SMOOTH",
"190 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"20 448 OFFCURVE",
"20 249 QCURVE SMOOTH",
"20 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"394 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 122 QCURVE SMOOTH",
"488 840 LINE",
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"170 1250 LINE",
"39 1057 LINE SMOOTH",
"20 1029 OFFCURVE",
"20 1005 QCURVE SMOOTH",
"20 980 OFFCURVE",
"40 946 QCURVE SMOOTH",
"100 843 LINE",
"100 448 LINE"
);
}
);
width = 588;
}
);
note = uni179A;
unicode = 179A;
},
{
glyphname = uni179B;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1403 1050 LINE",
"1455 1150 LINE",
"1650 1150 LINE",
"1650 1200 LINE",
"1432 1200 LINE",
"1354 1073 OFFCURVE",
"1354 1052 QCURVE SMOOTH",
"1354 1024 OFFCURVE",
"1414 970 QCURVE SMOOTH",
"1592 806 LINE",
"1592 323 LINE SMOOTH",
"1592 50 OFFCURVE",
"1281 50 QCURVE SMOOTH",
"985 50 OFFCURVE",
"985 323 QCURVE SMOOTH",
"985 877 LINE SMOOTH",
"985 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 877 LINE SMOOTH",
"308 1150 OFFCURVE",
"625 1150 QCURVE SMOOTH",
"927 1150 OFFCURVE",
"927 877 QCURVE SMOOTH",
"927 323 LINE SMOOTH",
"927 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1650 0 OFFCURVE",
"1650 323 QCURVE SMOOTH",
"1650 830 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1443 1060 LINE",
"1465 1112 LINE",
"1670 1112 LINE",
"1670 1200 LINE",
"1422 1200 LINE",
"1344 1063 OFFCURVE",
"1344 1042 QCURVE SMOOTH",
"1344 1014 OFFCURVE",
"1562 806 QCURVE",
"1562 323 LINE SMOOTH",
"1562 88 OFFCURVE",
"1281 88 QCURVE SMOOTH",
"1010 88 OFFCURVE",
"1010 323 QCURVE SMOOTH",
"1010 877 LINE SMOOTH",
"1010 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 877 LINE SMOOTH",
"338 1112 OFFCURVE",
"625 1112 QCURVE SMOOTH",
"902 1112 OFFCURVE",
"902 877 QCURVE SMOOTH",
"902 323 LINE SMOOTH",
"902 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1670 0 OFFCURVE",
"1670 323 QCURVE SMOOTH",
"1670 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1281 138 QCURVE SMOOTH",
"1050 138 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 877 LINE SMOOTH",
"1050 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 877 LINE SMOOTH",
"388 1062 OFFCURVE",
"625 1062 QCURVE SMOOTH",
"862 1062 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 323 LINE SMOOTH",
"862 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1700 0 OFFCURVE",
"1700 323 QCURVE SMOOTH",
"1700 840 LINE",
"1452 1062 LINE",
"1700 1062 LINE",
"1700 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 323 LINE SMOOTH",
"1512 138 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */\01218 6 2 6 3 1 76 0 6 10 1 1 0 6 1 105 5 1 3 3 2 97 8 1 2 2 17 77 9 1 0 0 4 97 7 1 4 4 19 4 78 0 0 44 42 39 37 34 32 30 29 27 25 22 20 17 16 15 14 0 4 0 4 17 11 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1452 1012 LINE",
"1750 1012 LINE",
"1750 1200 LINE",
"1402 1200 LINE",
"1327 1102 LINE",
"1290 1053 LINE SMOOTH",
"1274 1033 OFFCURVE",
"1274 1012 QCURVE SMOOTH",
"1274 984 OFFCURVE",
"1305 955 QCURVE SMOOTH",
"1357 905 LINE",
"1462 806 LINE",
"1462 323 LINE SMOOTH",
"1462 188 OFFCURVE",
"1281 188 QCURVE SMOOTH",
"1100 188 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 877 LINE SMOOTH",
"1100 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 877 LINE SMOOTH",
"438 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 877 QCURVE SMOOTH",
"812 323 LINE SMOOTH",
"812 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1750 0 OFFCURVE",
"1750 323 QCURVE SMOOTH",
"1750 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1250 LINE",
"1372 1250 LINE",
"1276 1087 LINE SMOOTH",
"1244 1033 OFFCURVE",
"1244 1012 QCURVE SMOOTH",
"1244 984 OFFCURVE",
"1286 940 QCURVE SMOOTH",
"1412 806 LINE",
"1412 336 LINE SMOOTH",
"1412 238 OFFCURVE",
"1281 238 QCURVE SMOOTH",
"1150 238 OFFCURVE",
"1150 336 QCURVE SMOOTH",
"1150 914 LINE SMOOTH",
"1150 1250 OFFCURVE",
"625 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 914 LINE SMOOTH",
"488 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"762 1012 OFFCURVE",
"762 914 QCURVE SMOOTH",
"762 336 LINE SMOOTH",
"762 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1800 0 OFFCURVE",
"1800 336 QCURVE SMOOTH",
"1800 840 LINE"
);
}
);
width = 1900;
}
);
note = uni179B;
unicode = 179B;
},
{
glyphname = uni179C;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"200 50 QCURVE SMOOTH",
"100 50 OFFCURVE",
"100 249 QCURVE SMOOTH",
"100 370 OFFCURVE",
"200 370 QCURVE SMOOTH",
"280 370 LINE",
"280 122 LINE SMOOTH",
"280 50 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 418 LINE",
"200 418 LINE SMOOTH",
"50 418 OFFCURVE",
"50 249 QCURVE SMOOTH",
"50 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"338 0 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 833 LINE",
"91 1045 LINE",
"143 1150 LINE",
"230 1150 LINE SMOOTH",
"358 1150 OFFCURVE",
"358 1260 QCURVE SMOOTH",
"358 1400 LINE",
"300 1400 LINE",
"300 1260 LINE SMOOTH",
"300 1200 OFFCURVE",
"230 1200 QCURVE SMOOTH",
"120 1200 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"200 88 QCURVE SMOOTH",
"128 88 OFFCURVE",
"128 249 QCURVE SMOOTH",
"128 340 OFFCURVE",
"200 340 QCURVE SMOOTH",
"250 340 LINE",
"250 122 LINE SMOOTH",
"250 88 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 428 LINE",
"200 428 LINE SMOOTH",
"40 428 OFFCURVE",
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"358 0 OFFCURVE",
"358 122 QCURVE SMOOTH",
"358 840 LINE",
"131 1060 LINE",
"153 1112 LINE",
"230 1112 LINE SMOOTH",
"410 1112 OFFCURVE",
"410 1260 QCURVE SMOOTH",
"410 1400 LINE",
"302 1400 LINE",
"302 1260 LINE SMOOTH",
"302 1200 OFFCURVE",
"230 1200 QCURVE SMOOTH",
"110 1200 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"158 249 QCURVE SMOOTH",
"158 310 OFFCURVE",
"200 310 QCURVE",
"200 138 LINE",
"158 138 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"294 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 122 QCURVE SMOOTH",
"388 840 LINE",
"140 1062 LINE",
"240 1062 LINE SMOOTH",
"500 1062 OFFCURVE",
"500 1250 QCURVE SMOOTH",
"500 1400 LINE",
"312 1400 LINE",
"312 1250 LINE SMOOTH",
"312 1200 OFFCURVE",
"240 1200 QCURVE SMOOTH",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 448 LINE",
"40 448 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01224 6 2 6 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 3 2 2 3 112 8 1 6 0 0 1 6 0 105 0 4 4 2 97 0 2 2 17 77 7 1 1 1 5 97 0 5 5 19 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 3 2 3 133 8 1 6 0 0 1 6 0 105 0 4 4 2 97 0 2 2 17 77 7 1 1 1 5 97 0 5 5 19 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\0125 5 0 0 5 31 5 31 29 26 23 21 19 18 16 14 0 4 0 4 17 9 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"210 229 QCURVE SMOOTH",
"210 148 OFFCURVE",
"184 148 QCURVE SMOOTH",
"158 148 OFFCURVE",
"158 249 QCURVE SMOOTH",
"158 310 OFFCURVE",
"184 310 QCURVE SMOOTH",
"210 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"40 448 OFFCURVE",
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"344 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 122 QCURVE SMOOTH",
"438 840 LINE",
"190 1012 LINE",
"340 1012 LINE SMOOTH",
"550 1012 OFFCURVE",
"550 1250 QCURVE SMOOTH",
"550 1400 LINE",
"262 1400 LINE",
"262 1250 LINE SMOOTH",
"262 1200 OFFCURVE",
"220 1200 QCURVE SMOOTH",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"150 806 QCURVE",
"150 448 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"190 229 QCURVE SMOOTH",
"190 148 OFFCURVE",
"164 148 QCURVE SMOOTH",
"138 148 OFFCURVE",
"138 249 QCURVE SMOOTH",
"138 310 OFFCURVE",
"164 310 QCURVE SMOOTH",
"190 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"20 448 OFFCURVE",
"20 249 QCURVE SMOOTH",
"20 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"394 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 122 QCURVE SMOOTH",
"488 840 LINE",
"240 1012 LINE",
"420 1012 LINE SMOOTH",
"590 1012 OFFCURVE",
"590 1300 QCURVE SMOOTH",
"590 1400 LINE",
"262 1400 LINE",
"262 1300 LINE SMOOTH",
"262 1250 OFFCURVE",
"220 1250 QCURVE SMOOTH",
"140 1250 LINE",
"44 1087 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"100 806 QCURVE",
"100 448 LINE"
);
}
);
width = 588;
}
);
note = uni179C;
unicode = 179C;
},
{
glyphname = uni179D;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 1200 LINE",
"250 1200 LINE",
"250 1150 LINE",
"1050 1150 LINE"
);
},
{
closed = 1;
nodes = (
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 0 LINE",
"308 0 LINE",
"308 65 LINE",
"338 170 OFFCURVE",
"473 300 OFFCURVE",
"576 300 QCURVE SMOOTH",
"630 300 LINE",
"630 350 LINE",
"576 350 LINE SMOOTH",
"367 350 OFFCURVE",
"308 179 QCURVE",
"308 600 LINE SMOOTH",
"308 873 OFFCURVE",
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 350 LINE",
"740 350 LINE",
"740 300 LINE",
"992 300 LINE",
"992 0 LINE",
"1050 0 LINE",
"1050 300 LINE",
"1200 300 LINE",
"1200 350 LINE",
"1050 350 LINE",
"1050 600 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 1200 LINE",
"230 1200 LINE",
"230 1112 LINE",
"1070 1112 LINE"
);
},
{
closed = 1;
nodes = (
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 0 LINE",
"338 0 LINE",
"338 86 LINE",
"368 181 OFFCURVE",
"513 292 OFFCURVE",
"596 292 QCURVE SMOOTH",
"650 292 LINE",
"650 380 LINE",
"596 380 LINE SMOOTH",
"407 380 OFFCURVE",
"338 250 QCURVE",
"338 600 LINE SMOOTH",
"338 835 OFFCURVE",
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 380 LINE",
"740 380 LINE",
"740 292 LINE",
"962 292 LINE",
"962 0 LINE",
"1070 0 LINE",
"1070 292 LINE",
"1200 292 LINE",
"1200 380 LINE",
"1070 380 LINE",
"1070 600 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1000 831 QCURVE SMOOTH",
"900 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"400 923 OFFCURVE",
"300 831 QCURVE SMOOTH",
"200 738 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 86 LINE",
"408 171 OFFCURVE",
"450 216 QCURVE SMOOTH",
"493 262 OFFCURVE",
"596 262 QCURVE SMOOTH",
"700 262 LINE",
"700 400 LINE",
"573 400 LINE SMOOTH",
"457 400 OFFCURVE",
"388 320 QCURVE",
"388 600 LINE SMOOTH",
"388 692 OFFCURVE",
"447 739 QCURVE SMOOTH",
"505 785 OFFCURVE",
"650 785 QCURVE SMOOTH",
"795 785 OFFCURVE",
"854 739 QCURVE SMOOTH",
"912 692 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 400 LINE",
"740 400 LINE",
"740 262 LINE",
"912 262 LINE",
"912 0 LINE",
"1100 0 LINE",
"1100 262 LINE",
"1200 262 LINE",
"1200 400 LINE",
"1100 400 LINE",
"1100 600 LINE SMOOTH",
"1100 738 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1200 LINE",
"200 1200 LINE",
"200 1062 LINE",
"1100 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */\01220 1 1 0 29 1 2 1 2 76 0 9 0 5 0 9 5 105 6 4 2 0 7 3 2 1 2 0 1 103 12 1 11 11 10 95 0 10 10 17 77 8 1 2 2 19 2 78 40 40 40 43 40 43 42 41 37 35 20 33 37 36 17 17 17 17 17 13 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"150 1200 LINE"
);
},
{
closed = 1;
nodes = (
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 570 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 176 LINE",
"444 186 OFFCURVE",
"451 197 QCURVE SMOOTH",
"493 262 OFFCURVE",
"596 262 QCURVE SMOOTH",
"700 262 LINE",
"700 450 LINE",
"573 450 LINE SMOOTH",
"495 450 OFFCURVE",
"438 377 QCURVE",
"438 570 LINE SMOOTH",
"438 705 OFFCURVE",
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 450 LINE",
"740 450 LINE",
"740 262 LINE",
"862 262 LINE",
"862 0 LINE",
"1150 0 LINE",
"1150 262 LINE",
"1200 262 LINE",
"1200 450 LINE",
"1150 450 LINE",
"1150 570 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"100 1250 LINE"
);
},
{
closed = 1;
nodes = (
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 76 LINE",
"523 212 OFFCURVE",
"666 212 QCURVE SMOOTH",
"710 212 LINE",
"710 450 LINE",
"663 450 LINE SMOOTH",
"525 450 OFFCURVE",
"488 327 QCURVE",
"488 570 LINE SMOOTH",
"488 655 OFFCURVE",
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 450 LINE",
"740 450 LINE",
"740 212 LINE",
"812 212 LINE",
"812 0 LINE",
"1200 0 LINE",
"1200 212 LINE",
"1270 212 LINE",
"1270 450 LINE",
"1200 450 LINE",
"1200 570 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni179D;
unicode = 179D;
},
{
glyphname = uni179E;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 575 LINE",
"1200 575 LINE",
"1200 625 LINE",
"1050 625 LINE",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 625 LINE",
"740 625 LINE",
"740 575 LINE",
"992 575 LINE",
"992 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 556 LINE",
"1200 556 LINE",
"1200 644 LINE",
"1070 644 LINE",
"1070 840 LINE",
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 644 LINE",
"740 644 LINE",
"740 556 LINE",
"962 556 LINE",
"962 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"912 531 LINE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE",
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 531 LINE",
"1200 531 LINE",
"1200 669 LINE",
"1100 669 LINE",
"1100 840 LINE",
"852 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 669 LINE",
"740 669 LINE",
"740 531 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01238 26 14 2 4 0 2 1 76 3 1 0 9 1 4 8 0 4 103 7 1 2 2 1 95 6 1 1 1 17 77 0 8 8 5 97 0 5 5 19 5 78 47 46 36 17 27 35 17 18 17 25 16 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 719 LINE",
"740 719 LINE",
"740 531 LINE",
"862 531 LINE",
"862 323 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 531 LINE",
"1200 531 LINE",
"1200 719 LINE",
"1150 719 LINE",
"1150 840 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 744 LINE",
"690 744 LINE",
"690 506 LINE",
"812 506 LINE",
"812 323 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 506 LINE",
"1270 506 LINE",
"1270 744 LINE",
"1200 744 LINE",
"1200 840 LINE"
);
}
);
width = 1300;
}
);
note = uni179E;
unicode = 179E;
},
{
glyphname = uni179F;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"425 1150 LINE",
"810 1150 LINE",
"810 1200 LINE",
"402 1200 LINE",
"314 1063 OFFCURVE",
"314 1042 QCURVE SMOOTH",
"314 1019 OFFCURVE",
"480 865 QCURVE",
"250 810 OFFCURVE",
"250 557 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 557 LINE SMOOTH",
"308 830 OFFCURVE",
"625 830 QCURVE SMOOTH",
"927 830 OFFCURVE",
"927 557 QCURVE SMOOTH",
"927 323 LINE SMOOTH",
"927 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1650 0 OFFCURVE",
"1650 323 QCURVE SMOOTH",
"1650 830 LINE",
"1403 1050 LINE",
"1455 1150 LINE",
"1650 1150 LINE",
"1650 1200 LINE",
"1432 1200 LINE",
"1354 1073 OFFCURVE",
"1354 1052 QCURVE SMOOTH",
"1354 1024 OFFCURVE",
"1414 970 QCURVE SMOOTH",
"1592 806 LINE",
"1592 323 LINE SMOOTH",
"1592 50 OFFCURVE",
"1281 50 QCURVE SMOOTH",
"985 50 OFFCURVE",
"985 323 QCURVE SMOOTH",
"985 557 LINE SMOOTH",
"985 880 OFFCURVE",
"625 880 QCURVE SMOOTH",
"581 880 OFFCURVE",
"542 876 QCURVE",
"363 1050 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"425 1112 LINE",
"810 1112 LINE",
"810 1200 LINE",
"382 1200 LINE",
"304 1063 OFFCURVE",
"304 1042 QCURVE SMOOTH",
"304 1018 OFFCURVE",
"463 863 QCURVE",
"230 805 OFFCURVE",
"230 557 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 557 LINE SMOOTH",
"338 792 OFFCURVE",
"625 792 QCURVE SMOOTH",
"902 792 OFFCURVE",
"902 557 QCURVE SMOOTH",
"902 323 LINE SMOOTH",
"902 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1670 0 OFFCURVE",
"1670 323 QCURVE SMOOTH",
"1670 840 LINE",
"1443 1060 LINE",
"1465 1112 LINE",
"1670 1112 LINE",
"1670 1200 LINE",
"1422 1200 LINE",
"1344 1063 OFFCURVE",
"1344 1042 QCURVE SMOOTH",
"1344 1014 OFFCURVE",
"1562 806 QCURVE",
"1562 323 LINE SMOOTH",
"1562 88 OFFCURVE",
"1281 88 QCURVE SMOOTH",
"1010 88 OFFCURVE",
"1010 323 QCURVE SMOOTH",
"1010 557 LINE SMOOTH",
"1010 880 OFFCURVE",
"625 880 QCURVE SMOOTH",
"607 880 OFFCURVE",
"589 879 QCURVE",
"403 1060 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1281 138 QCURVE SMOOTH",
"1050 138 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"625 923 QCURVE SMOOTH",
"563 923 OFFCURVE",
"510 916 QCURVE",
"380 1062 LINE",
"950 1062 LINE",
"950 1200 LINE",
"380 1200 LINE",
"305 1102 LINE",
"268 1053 LINE SMOOTH",
"249 1029 OFFCURVE",
"249 1005 QCURVE SMOOTH",
"249 980 OFFCURVE",
"270 955 QCURVE SMOOTH",
"310 905 LINE",
"344 863 LINE",
"319 849 OFFCURVE",
"300 831 QCURVE SMOOTH",
"200 738 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 600 LINE SMOOTH",
"388 785 OFFCURVE",
"625 785 QCURVE SMOOTH",
"862 785 OFFCURVE",
"862 600 QCURVE SMOOTH",
"862 323 LINE SMOOTH",
"862 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1700 0 OFFCURVE",
"1700 323 QCURVE SMOOTH",
"1700 840 LINE",
"1452 1062 LINE",
"1700 1062 LINE",
"1700 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 323 LINE SMOOTH",
"1512 138 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 80 values pushed */\01240 18 6 3 5 10 1 76 0 10 0 5 6 10 5 105 0 6 12 1 1 0 6 1 105 9 1 3 3 2 95 8 1 2 2 17 77 11 1 0 0 4 97 7 1 4 4 19 4 78 0 0 60 58 55 53 51 50 49 48 34 32 30 29 27 25 22 20 17 16 15 14 0 4 0 4 17 13 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 587 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 587 LINE SMOOTH",
"438 722 OFFCURVE",
"625 722 QCURVE SMOOTH",
"812 722 OFFCURVE",
"812 587 QCURVE SMOOTH",
"812 323 LINE SMOOTH",
"812 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1750 0 OFFCURVE",
"1750 323 QCURVE SMOOTH",
"1750 840 LINE",
"1452 1012 LINE",
"1750 1012 LINE",
"1750 1200 LINE",
"1402 1200 LINE",
"1327 1102 LINE",
"1290 1053 LINE SMOOTH",
"1274 1033 OFFCURVE",
"1274 1012 QCURVE SMOOTH",
"1274 984 OFFCURVE",
"1305 955 QCURVE SMOOTH",
"1357 905 LINE",
"1462 806 LINE",
"1462 323 LINE SMOOTH",
"1462 188 OFFCURVE",
"1281 188 QCURVE SMOOTH",
"1100 188 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 587 LINE SMOOTH",
"1100 910 OFFCURVE",
"625 910 QCURVE SMOOTH",
"553 910 OFFCURVE",
"493 903 QCURVE",
"380 1012 LINE",
"900 1012 LINE",
"900 1200 LINE",
"330 1200 LINE",
"255 1102 LINE",
"218 1053 LINE SMOOTH",
"199 1029 OFFCURVE",
"199 1005 QCURVE SMOOTH",
"199 980 OFFCURVE",
"220 955 QCURVE SMOOTH",
"303 849 LINE",
"150 770 OFFCURVE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"910 1012 LINE",
"910 1250 LINE",
"330 1250 LINE",
"207 1057 LINE SMOOTH",
"189 1029 OFFCURVE",
"189 1005 QCURVE SMOOTH",
"189 980 OFFCURVE",
"210 955 QCURVE SMOOTH",
"276 871 LINE",
"100 789 OFFCURVE",
"100 594 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 594 LINE SMOOTH",
"488 692 OFFCURVE",
"625 692 QCURVE SMOOTH",
"762 692 OFFCURVE",
"762 594 QCURVE SMOOTH",
"762 336 LINE SMOOTH",
"762 0 OFFCURVE",
"1281 0 QCURVE SMOOTH",
"1800 0 OFFCURVE",
"1800 336 QCURVE SMOOTH",
"1800 840 LINE",
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1250 LINE",
"1372 1250 LINE",
"1276 1087 LINE SMOOTH",
"1244 1033 OFFCURVE",
"1244 1012 QCURVE SMOOTH",
"1244 984 OFFCURVE",
"1286 940 QCURVE SMOOTH",
"1412 806 LINE",
"1412 336 LINE SMOOTH",
"1412 238 OFFCURVE",
"1281 238 QCURVE SMOOTH",
"1150 238 OFFCURVE",
"1150 336 QCURVE SMOOTH",
"1150 594 LINE SMOOTH",
"1150 930 OFFCURVE",
"625 930 QCURVE SMOOTH",
"549 930 OFFCURVE",
"484 923 QCURVE",
"400 1012 LINE"
);
}
);
width = 1900;
}
);
note = uni179F;
unicode = 179F;
},
{
glyphname = uni17A0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"618 0 QCURVE SMOOTH",
"985 0 OFFCURVE",
"985 323 QCURVE SMOOTH",
"985 877 LINE SMOOTH",
"985 1150 OFFCURVE",
"1289 1150 QCURVE SMOOTH",
"1592 1150 OFFCURVE",
"1592 877 QCURVE SMOOTH",
"1592 0 LINE",
"1650 0 LINE",
"1650 877 LINE SMOOTH",
"1650 1200 OFFCURVE",
"1289 1200 QCURVE SMOOTH",
"927 1200 OFFCURVE",
"927 877 QCURVE SMOOTH",
"927 323 LINE SMOOTH",
"927 50 OFFCURVE",
"618 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 830 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"620 0 QCURVE SMOOTH",
"1010 0 OFFCURVE",
"1010 323 QCURVE SMOOTH",
"1010 877 LINE SMOOTH",
"1010 1112 OFFCURVE",
"1286 1112 QCURVE SMOOTH",
"1562 1112 OFFCURVE",
"1562 877 QCURVE SMOOTH",
"1562 0 LINE",
"1670 0 LINE",
"1670 877 LINE SMOOTH",
"1670 1200 OFFCURVE",
"1286 1200 QCURVE SMOOTH",
"902 1200 OFFCURVE",
"902 877 QCURVE SMOOTH",
"902 323 LINE SMOOTH",
"902 88 OFFCURVE",
"620 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1700 877 LINE SMOOTH",
"1700 1038 OFFCURVE",
"1488 1200 OFFCURVE",
"1275 1200 QCURVE SMOOTH",
"1062 1200 OFFCURVE",
"862 1015 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 323 LINE SMOOTH",
"862 231 OFFCURVE",
"804 184 QCURVE SMOOTH",
"745 138 OFFCURVE",
"625 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"447 184 QCURVE SMOOTH",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"300 92 QCURVE SMOOTH",
"400 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"850 0 OFFCURVE",
"950 92 QCURVE SMOOTH",
"1050 185 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 877 LINE SMOOTH",
"1050 969 OFFCURVE",
"1167 1062 OFFCURVE",
"1281 1062 QCURVE SMOOTH",
"1395 1062 OFFCURVE",
"1512 969 OFFCURVE",
"1512 877 QCURVE SMOOTH",
"1512 0 LINE",
"1700 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\01229 17 2 4 0 1 76 3 1 0 0 2 97 5 1 2 2 17 77 0 4 4 1 97 7 6 2 1 1 19 1 78 0 0 0 46 0 46 38 37 17 28 38 35 8 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 877 LINE SMOOTH",
"1100 1012 OFFCURVE",
"1281 1012 QCURVE SMOOTH",
"1462 1012 OFFCURVE",
"1462 877 QCURVE SMOOTH",
"1462 0 LINE",
"1750 0 LINE",
"1750 877 LINE SMOOTH",
"1750 1200 OFFCURVE",
"1281 1200 QCURVE SMOOTH",
"812 1200 OFFCURVE",
"812 877 QCURVE SMOOTH",
"812 323 LINE SMOOTH",
"812 188 OFFCURVE",
"625 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 336 LINE SMOOTH",
"100 0 OFFCURVE",
"625 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 336 QCURVE SMOOTH",
"1150 914 LINE SMOOTH",
"1150 1012 OFFCURVE",
"1281 1012 QCURVE SMOOTH",
"1412 1012 OFFCURVE",
"1412 914 QCURVE SMOOTH",
"1412 0 LINE",
"1800 0 LINE",
"1800 914 LINE SMOOTH",
"1800 1250 OFFCURVE",
"1281 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"762 914 QCURVE SMOOTH",
"762 336 LINE SMOOTH",
"762 238 OFFCURVE",
"625 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 336 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 1900;
}
);
note = uni17A0;
unicode = 17A0;
},
{
glyphname = uni17A1;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"308 570 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE",
"1050 877 LINE",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 520 OFFCURVE",
"830 520 QCURVE SMOOTH",
"884 520 LINE",
"884 323 LINE SMOOTH",
"884 50 OFFCURVE",
"621 50 QCURVE SMOOTH",
"358 50 OFFCURVE",
"358 323 QCURVE SMOOTH",
"358 480 LINE",
"300 480 LINE",
"300 323 LINE SMOOTH",
"300 0 OFFCURVE",
"621 0 QCURVE SMOOTH",
"942 0 OFFCURVE",
"942 323 QCURVE SMOOTH",
"942 520 LINE",
"1050 520 OFFCURVE",
"1050 610 QCURVE SMOOTH",
"1050 700 OFFCURVE",
"962 700 QCURVE SMOOTH",
"884 700 OFFCURVE",
"884 600 QCURVE SMOOTH",
"884 570 LINE",
"827 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"994 610 QCURVE SMOOTH",
"994 570 OFFCURVE",
"942 570 QCURVE",
"942 599 LINE SMOOTH",
"942 650 OFFCURVE",
"968 650 QCURVE SMOOTH",
"994 650 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1403 1050 LINE",
"1455 1150 LINE",
"1650 1150 LINE",
"1650 1200 LINE",
"1432 1200 LINE",
"1354 1073 OFFCURVE",
"1354 1052 QCURVE SMOOTH",
"1354 1024 OFFCURVE",
"1414 970 QCURVE SMOOTH",
"1592 806 LINE",
"1592 -408 LINE",
"1322 -194 LINE",
"1050 -409 LINE",
"1050 -175 LINE SMOOTH",
"1050 -60 OFFCURVE",
"922 -60 QCURVE SMOOTH",
"862 -60 LINE",
"862 -114 LINE",
"922 -114 LINE SMOOTH",
"992 -114 OFFCURVE",
"992 -175 QCURVE SMOOTH",
"992 -470 LINE",
"1061 -470 LINE",
"1322 -266 LINE",
"1582 -470 LINE",
"1650 -470 LINE",
"1650 830 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 668 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE",
"1070 877 LINE",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 594 OFFCURVE",
"734 525 QCURVE SMOOTH",
"854 508 LINE",
"854 323 LINE SMOOTH",
"854 88 OFFCURVE",
"621 88 QCURVE SMOOTH",
"388 88 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 480 LINE",
"280 480 LINE",
"280 323 LINE SMOOTH",
"280 0 OFFCURVE",
"621 0 QCURVE SMOOTH",
"962 0 OFFCURVE",
"962 323 QCURVE SMOOTH",
"962 489 LINE",
"977 489 LINE SMOOTH",
"1070 489 OFFCURVE",
"1070 610 QCURVE SMOOTH",
"1070 720 OFFCURVE",
"962 720 QCURVE SMOOTH",
"854 720 OFFCURVE",
"854 610 QCURVE SMOOTH",
"854 597 LINE",
"744 612 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1004 609 QCURVE SMOOTH",
"1004 572 OFFCURVE",
"977 572 QCURVE SMOOTH",
"940 572 OFFCURVE",
"940 609 QCURVE SMOOTH",
"940 646 OFFCURVE",
"972 646 QCURVE SMOOTH",
"1004 646 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1443 1060 LINE",
"1465 1112 LINE",
"1670 1112 LINE",
"1670 1200 LINE",
"1422 1200 LINE",
"1344 1063 OFFCURVE",
"1344 1042 QCURVE SMOOTH",
"1344 1014 OFFCURVE",
"1562 806 QCURVE",
"1562 -358 LINE",
"1276 -128 LINE",
"988 -359 LINE",
"988 -194 LINE SMOOTH",
"988 -70 OFFCURVE",
"810 -70 QCURVE SMOOTH",
"750 -70 LINE",
"750 -164 LINE",
"810 -164 LINE SMOOTH",
"880 -164 OFFCURVE",
"880 -235 QCURVE SMOOTH",
"880 -490 LINE",
"969 -490 LINE",
"1276 -240 LINE",
"1582 -490 LINE",
"1670 -490 LINE",
"1670 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1064 487 QCURVE SMOOTH",
"1100 523 OFFCURVE",
"1100 575 QCURVE SMOOTH",
"1100 627 OFFCURVE",
"1027 700 OFFCURVE",
"975 700 QCURVE SMOOTH",
"923 700 OFFCURVE",
"887 664 QCURVE SMOOTH",
"867 644 OFFCURVE",
"858 620 QCURVE",
"744 636 LINE SMOOTH",
"388 687 OFFCURVE",
"388 877 QCURVE SMOOTH",
"388 969 OFFCURVE",
"446 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"853 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 897 QCURVE SMOOTH",
"912 847 LINE",
"1100 847 LINE",
"1100 897 LINE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 575 OFFCURVE",
"734 499 QCURVE SMOOTH",
"850 482 LINE",
"850 323 LINE SMOOTH",
"850 138 OFFCURVE",
"644 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 480 LINE",
"250 480 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1038 0 OFFCURVE",
"1038 323 QCURVE SMOOTH",
"1038 467 LINE",
"1052 475 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1038 -324 LINE",
"1038 -194 LINE SMOOTH",
"1038 -50 OFFCURVE",
"900 -50 QCURVE SMOOTH",
"750 -50 LINE",
"750 -194 LINE",
"850 -194 OFFCURVE",
"850 -235 QCURVE SMOOTH",
"850 -490 LINE",
"1069 -490 LINE",
"1276 -303 LINE",
"1482 -490 LINE",
"1700 -490 LINE",
"1700 840 LINE",
"1452 1062 LINE",
"1700 1062 LINE",
"1700 1200 LINE",
"1452 1200 LINE",
"1377 1102 LINE",
"1340 1053 LINE SMOOTH",
"1324 1033 OFFCURVE",
"1324 1012 QCURVE SMOOTH",
"1324 984 OFFCURVE",
"1355 955 QCURVE SMOOTH",
"1407 905 LINE",
"1512 806 LINE",
"1512 -323 LINE",
"1276 -108 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01262 50 2 6 4 38 13 2 1 6 0 1 2 1 76 1 11 12 75 65 49 3 9 11 5 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 59 values pushed */\0120 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 1 2 5 1 2 126 0 12 0 11 9 12 11 105 8 1 5 5 3 97 7 1 3 3 17 77 0 2 2 0 98 0 0 0 19 77 10 1 9 9 20 9 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 4 5 6 5 4 6 128 0 6 1 5 6 1 126 0 1 2 5 1 2 126 8 1 5 5 3 97 7 1 3 3 17 77 0 2 2 0 98 0 0 0 19 77 0 11 11 12 95 0 12 12 18 77 10 1 9 9 20 9 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01273 71 70 69 67 66 64 63 17 31 41 36 20 40 34 18 34 13 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1114 467 QCURVE SMOOTH",
"1150 503 OFFCURVE",
"1150 555 QCURVE SMOOTH",
"1150 637 OFFCURVE",
"1077 730 OFFCURVE",
"975 730 QCURVE SMOOTH",
"873 730 OFFCURVE",
"837 694 QCURVE SMOOTH",
"817 674 OFFCURVE",
"808 650 QCURVE",
"438 727 OFFCURVE",
"438 877 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 897 QCURVE SMOOTH",
"862 847 LINE",
"1150 847 LINE",
"1150 897 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 555 OFFCURVE",
"800 462 QCURVE",
"800 323 LINE SMOOTH",
"800 188 OFFCURVE",
"644 188 QCURVE SMOOTH",
"488 188 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 460 LINE",
"200 460 LINE",
"200 323 LINE SMOOTH",
"200 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1088 0 OFFCURVE",
"1088 323 QCURVE SMOOTH",
"1088 447 LINE",
"1102 455 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1088 -279 LINE",
"1088 -194 LINE SMOOTH",
"1088 -50 OFFCURVE",
"900 -50 QCURVE SMOOTH",
"700 -50 LINE",
"700 -194 LINE",
"800 -194 OFFCURVE",
"800 -235 QCURVE SMOOTH",
"800 -490 LINE",
"1069 -490 LINE",
"1276 -303 LINE",
"1482 -490 LINE",
"1750 -490 LINE",
"1750 840 LINE",
"1452 1012 LINE",
"1750 1012 LINE",
"1750 1200 LINE",
"1402 1200 LINE",
"1327 1102 LINE",
"1290 1053 LINE SMOOTH",
"1274 1033 OFFCURVE",
"1274 1012 QCURVE SMOOTH",
"1274 984 OFFCURVE",
"1305 955 QCURVE SMOOTH",
"1357 905 LINE",
"1462 806 LINE",
"1462 -277 LINE",
"1276 -108 LINE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1164 486 QCURVE SMOOTH",
"1200 524 OFFCURVE",
"1200 578 QCURVE SMOOTH",
"1200 664 OFFCURVE",
"1127 760 OFFCURVE",
"975 760 QCURVE SMOOTH",
"823 760 OFFCURVE",
"787 723 QCURVE SMOOTH",
"767 702 OFFCURVE",
"758 677 QCURVE",
"488 757 OFFCURVE",
"488 914 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 934 QCURVE SMOOTH",
"812 882 LINE",
"1200 882 LINE",
"1200 934 LINE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 578 OFFCURVE",
"750 481 QCURVE",
"750 336 LINE SMOOTH",
"750 238 OFFCURVE",
"644 238 QCURVE SMOOTH",
"538 238 OFFCURVE",
"538 336 QCURVE SMOOTH",
"538 459 LINE",
"150 459 LINE",
"150 336 LINE SMOOTH",
"150 0 OFFCURVE",
"644 0 QCURVE SMOOTH",
"1138 0 OFFCURVE",
"1138 336 QCURVE SMOOTH",
"1138 466 LINE",
"1152 474 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1502 1012 LINE",
"1800 1012 LINE",
"1800 1250 LINE",
"1372 1250 LINE",
"1276 1087 LINE SMOOTH",
"1244 1033 OFFCURVE",
"1244 1012 QCURVE SMOOTH",
"1244 984 OFFCURVE",
"1286 940 QCURVE SMOOTH",
"1412 806 LINE",
"1412 -247 LINE",
"1276 -138 LINE",
"1138 -249 LINE",
"1138 -194 LINE SMOOTH",
"1138 -50 OFFCURVE",
"950 -50 QCURVE SMOOTH",
"700 -50 LINE",
"700 -194 LINE",
"750 -194 OFFCURVE",
"750 -235 QCURVE SMOOTH",
"750 -490 LINE",
"1119 -490 LINE",
"1276 -363 LINE",
"1432 -490 LINE",
"1800 -490 LINE",
"1800 840 LINE"
);
}
);
width = 1900;
}
);
note = uni17A1;
unicode = 17A1;
},
{
glyphname = uni17A2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"992 575 LINE",
"992 135 LINE SMOOTH",
"992 50 OFFCURVE",
"877 50 QCURVE SMOOTH",
"791 50 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1050 0 OFFCURVE",
"1050 135 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 625 LINE",
"308 625 LINE",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 135 LINE SMOOTH",
"250 50 OFFCURVE",
"145 50 QCURVE SMOOTH",
"59 50 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"308 0 OFFCURVE",
"308 135 QCURVE SMOOTH",
"308 575 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 644 LINE",
"338 644 LINE",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 135 LINE SMOOTH",
"230 88 OFFCURVE",
"145 88 QCURVE SMOOTH",
"59 88 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"338 0 OFFCURVE",
"338 135 QCURVE SMOOTH",
"338 556 LINE",
"962 556 LINE",
"962 135 LINE SMOOTH",
"962 88 OFFCURVE",
"877 88 QCURVE SMOOTH",
"791 88 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1070 0 OFFCURVE",
"1070 135 QCURVE SMOOTH",
"1070 840 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 669 LINE",
"388 669 LINE",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 185 LINE SMOOTH",
"200 138 OFFCURVE",
"59 138 QCURVE",
"59 0 LINE",
"238 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 102 QCURVE SMOOTH",
"388 531 LINE",
"912 531 LINE",
"912 185 LINE SMOOTH",
"912 138 OFFCURVE",
"771 138 QCURVE",
"771 0 LINE",
"950 0 LINE SMOOTH",
"1100 0 OFFCURVE",
"1100 102 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01232 29 17 0 4 7 6 1 76 0 7 0 2 1 7 2 103 9 1 6 6 5 95 8 1 5 5 17 77 4 1 1 1 0 95 3 1 0 0 19 0 78 43 42 25 18 17 26 17 34 18 17 34 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 235 LINE SMOOTH",
"150 188 OFFCURVE",
"39 188 QCURVE",
"39 0 LINE",
"238 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 102 QCURVE SMOOTH",
"438 506 LINE",
"862 506 LINE",
"862 235 LINE SMOOTH",
"862 188 OFFCURVE",
"751 188 QCURVE",
"751 0 LINE",
"950 0 LINE SMOOTH",
"1150 0 OFFCURVE",
"1150 102 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 694 LINE",
"438 694 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 719 LINE",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 285 LINE SMOOTH",
"100 238 OFFCURVE",
"20 238 QCURVE",
"20 0 LINE",
"288 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 102 QCURVE SMOOTH",
"488 481 LINE",
"812 481 LINE",
"812 285 LINE SMOOTH",
"812 238 OFFCURVE",
"721 238 QCURVE",
"721 0 LINE",
"1000 0 LINE SMOOTH",
"1200 0 OFFCURVE",
"1200 102 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 719 LINE"
);
}
);
width = 1300;
}
);
note = uni17A2;
unicode = 17A2;
},
{
glyphname = uni17A3;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"992 575 LINE",
"992 135 LINE SMOOTH",
"992 50 OFFCURVE",
"877 50 QCURVE SMOOTH",
"791 50 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1050 0 OFFCURVE",
"1050 135 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 625 LINE",
"308 625 LINE",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 135 LINE SMOOTH",
"250 50 OFFCURVE",
"145 50 QCURVE SMOOTH",
"59 50 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"308 0 OFFCURVE",
"308 135 QCURVE SMOOTH",
"308 575 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 644 LINE",
"338 644 LINE",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 135 LINE SMOOTH",
"230 88 OFFCURVE",
"145 88 QCURVE SMOOTH",
"59 88 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"338 0 OFFCURVE",
"338 135 QCURVE SMOOTH",
"338 556 LINE",
"962 556 LINE",
"962 135 LINE SMOOTH",
"962 88 OFFCURVE",
"877 88 QCURVE SMOOTH",
"791 88 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1070 0 OFFCURVE",
"1070 135 QCURVE SMOOTH",
"1070 840 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 669 LINE",
"388 669 LINE",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 185 LINE SMOOTH",
"200 138 OFFCURVE",
"59 138 QCURVE",
"59 0 LINE",
"238 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 102 QCURVE SMOOTH",
"388 531 LINE",
"912 531 LINE",
"912 185 LINE SMOOTH",
"912 138 OFFCURVE",
"771 138 QCURVE",
"771 0 LINE",
"950 0 LINE SMOOTH",
"1100 0 OFFCURVE",
"1100 102 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\01232 29 17 0 4 7 6 1 76 0 7 0 2 1 7 2 103 9 1 6 6 5 95 8 1 5 5 17 77 4 1 1 1 0 95 3 1 0 0 19 0 78 43 42 25 18 17 26 17 34 18 17 34 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 235 LINE SMOOTH",
"150 188 OFFCURVE",
"39 188 QCURVE",
"39 0 LINE",
"238 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 102 QCURVE SMOOTH",
"438 506 LINE",
"862 506 LINE",
"862 235 LINE SMOOTH",
"862 188 OFFCURVE",
"751 188 QCURVE",
"751 0 LINE",
"950 0 LINE SMOOTH",
"1150 0 OFFCURVE",
"1150 102 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 694 LINE",
"438 694 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 719 LINE",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 285 LINE SMOOTH",
"100 238 OFFCURVE",
"20 238 QCURVE",
"20 0 LINE",
"288 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 102 QCURVE SMOOTH",
"488 481 LINE",
"812 481 LINE",
"812 285 LINE SMOOTH",
"812 238 OFFCURVE",
"721 238 QCURVE",
"721 0 LINE",
"1000 0 LINE SMOOTH",
"1200 0 OFFCURVE",
"1200 102 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 719 LINE"
);
}
);
width = 1300;
}
);
note = uni17A3;
unicode = 17A3;
},
{
glyphname = uni17A4;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1380 1150 LINE SMOOTH",
"1592 1150 OFFCURVE",
"1592 937 QCURVE SMOOTH",
"1592 0 LINE",
"1650 0 LINE",
"1650 937 LINE SMOOTH",
"1650 1200 OFFCURVE",
"1380 1200 QCURVE SMOOTH",
"1100 1200 LINE",
"1100 1150 LINE"
);
},
{
closed = 1;
nodes = (
"992 575 LINE",
"992 135 LINE SMOOTH",
"992 50 OFFCURVE",
"877 50 QCURVE SMOOTH",
"791 50 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1050 0 OFFCURVE",
"1050 135 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 625 LINE",
"308 625 LINE",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 135 LINE SMOOTH",
"250 50 OFFCURVE",
"145 50 QCURVE SMOOTH",
"59 50 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"308 0 OFFCURVE",
"308 135 QCURVE SMOOTH",
"308 575 LINE"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1380 1112 LINE SMOOTH",
"1562 1112 OFFCURVE",
"1562 937 QCURVE SMOOTH",
"1562 0 LINE",
"1670 0 LINE",
"1670 937 LINE SMOOTH",
"1670 1200 OFFCURVE",
"1380 1200 QCURVE SMOOTH",
"1150 1200 LINE",
"1150 1112 LINE"
);
},
{
closed = 1;
nodes = (
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 644 LINE",
"338 644 LINE",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 135 LINE SMOOTH",
"230 88 OFFCURVE",
"145 88 QCURVE SMOOTH",
"59 88 LINE",
"59 0 LINE",
"145 0 LINE SMOOTH",
"338 0 OFFCURVE",
"338 135 QCURVE SMOOTH",
"338 556 LINE",
"962 556 LINE",
"962 135 LINE SMOOTH",
"962 88 OFFCURVE",
"877 88 QCURVE SMOOTH",
"791 88 LINE",
"791 0 LINE",
"877 0 LINE SMOOTH",
"1070 0 OFFCURVE",
"1070 135 QCURVE SMOOTH",
"1070 840 LINE"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1380 1062 LINE SMOOTH",
"1455 1062 OFFCURVE",
"1512 1009 OFFCURVE",
"1512 937 QCURVE SMOOTH",
"1512 0 LINE",
"1700 0 LINE",
"1700 937 LINE SMOOTH",
"1700 1068 OFFCURVE",
"1548 1200 OFFCURVE",
"1380 1200 QCURVE SMOOTH",
"1150 1200 LINE",
"1150 1062 LINE"
);
},
{
closed = 1;
nodes = (
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 669 LINE",
"388 669 LINE",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 185 LINE SMOOTH",
"200 138 OFFCURVE",
"59 138 QCURVE",
"59 0 LINE",
"238 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 102 QCURVE SMOOTH",
"388 531 LINE",
"912 531 LINE",
"912 185 LINE SMOOTH",
"912 138 OFFCURVE",
"771 138 QCURVE",
"771 0 LINE",
"950 0 LINE SMOOTH",
"1100 0 OFFCURVE",
"1100 102 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */\01244 41 29 12 4 10 2 1 76 0 10 0 5 4 10 5 103 12 9 2 2 2 0 95 11 8 2 0 0 17 77 7 1 4 4 1 95 6 3 2 1 1 19 1 78 55 54 53 52 43 42 40 39 26 17 34 18 17 35 35 19 32 13 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1405 1012 OFFCURVE",
"1462 959 OFFCURVE",
"1462 887 QCURVE SMOOTH",
"1462 0 LINE",
"1750 0 LINE",
"1750 937 LINE SMOOTH",
"1750 1068 OFFCURVE",
"1548 1200 OFFCURVE",
"1380 1200 QCURVE SMOOTH",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 694 LINE",
"438 694 LINE",
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 235 LINE SMOOTH",
"150 188 OFFCURVE",
"39 188 QCURVE",
"39 0 LINE",
"238 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 102 QCURVE SMOOTH",
"438 506 LINE",
"862 506 LINE",
"862 235 LINE SMOOTH",
"862 188 OFFCURVE",
"751 188 QCURVE",
"751 0 LINE",
"950 0 LINE SMOOTH",
"1150 0 OFFCURVE",
"1150 102 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1330 1012 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 719 LINE",
"488 719 LINE",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 285 LINE SMOOTH",
"100 238 OFFCURVE",
"20 238 QCURVE",
"20 0 LINE",
"288 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 102 QCURVE SMOOTH",
"488 481 LINE",
"812 481 LINE",
"812 285 LINE SMOOTH",
"812 238 OFFCURVE",
"721 238 QCURVE",
"721 0 LINE",
"1000 0 LINE SMOOTH",
"1200 0 OFFCURVE",
"1200 102 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1280 1012 LINE SMOOTH",
"1355 1012 OFFCURVE",
"1412 959 OFFCURVE",
"1412 887 QCURVE SMOOTH",
"1412 0 LINE",
"1800 0 LINE",
"1800 937 LINE SMOOTH",
"1800 1068 OFFCURVE",
"1548 1250 OFFCURVE",
"1380 1250 QCURVE SMOOTH",
"772 1250 LINE"
);
}
);
width = 1900;
}
);
note = uni17A4;
unicode = 17A4;
},
{
glyphname = uni17A5;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 600 LINE SMOOTH",
"308 873 OFFCURVE",
"650 873 QCURVE SMOOTH",
"992 873 OFFCURVE",
"992 600 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 600 LINE SMOOTH",
"1050 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"250 923 OFFCURVE",
"250 600 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"308 850 LINE",
"162 1048 LINE",
"230 1150 LINE",
"800 1150 LINE SMOOTH",
"1050 1150 OFFCURVE",
"1050 1280 QCURVE SMOOTH",
"1050 1400 LINE",
"992 1400 LINE",
"992 1280 LINE SMOOTH",
"992 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"210 1200 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 600 LINE SMOOTH",
"338 835 OFFCURVE",
"650 835 QCURVE SMOOTH",
"962 835 OFFCURVE",
"962 600 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 600 LINE SMOOTH",
"1070 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"230 923 OFFCURVE",
"230 600 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"149 1079 OFFCURVE",
"149 1055 QCURVE SMOOTH",
"149 1030 OFFCURVE",
"280 836 QCURVE",
"366 900 LINE",
"252 1058 LINE",
"280 1112 LINE",
"800 1112 LINE SMOOTH",
"1070 1112 OFFCURVE",
"1070 1280 QCURVE SMOOTH",
"1070 1400 LINE",
"962 1400 LINE",
"962 1280 LINE SMOOTH",
"962 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"240 1200 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"800 1062 LINE SMOOTH",
"1100 1062 OFFCURVE",
"1100 1250 QCURVE SMOOTH",
"1100 1400 LINE",
"912 1400 LINE",
"912 1250 LINE SMOOTH",
"912 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"178 814 LINE",
"314 904 LINE"
);
},
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 600 LINE SMOOTH",
"388 692 OFFCURVE",
"447 739 QCURVE SMOOTH",
"505 785 OFFCURVE",
"650 785 QCURVE SMOOTH",
"795 785 OFFCURVE",
"854 739 QCURVE SMOOTH",
"912 692 OFFCURVE",
"912 600 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 600 LINE SMOOTH",
"1100 738 OFFCURVE",
"1000 831 QCURVE SMOOTH",
"900 923 OFFCURVE",
"650 923 QCURVE SMOOTH",
"400 923 OFFCURVE",
"300 831 QCURVE SMOOTH",
"200 738 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01221 1 7 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 1 0 0 1 112 0 5 0 7 8 5 7 105 0 8 10 1 4 3 8 4 105 0 2 2 0 95 0 0 0 17 77 0 3 3 6 97 9 1 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 1 0 1 133 0 5 0 7 8 5 7 105 0 8 10 1 4 3 8 4 105 0 2 2 0 95 0 0 0 17 77 0 3 3 6 97 9 1 6 6 19 6 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 23 values pushed */\01222 22 53 51 49 48 44 42 38 37 33 31 22 26 22 26 24 34 18 38 11 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 705 OFFCURVE",
"650 705 QCURVE SMOOTH",
"862 705 OFFCURVE",
"862 570 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 570 LINE SMOOTH",
"1150 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"150 893 OFFCURVE",
"150 570 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 570 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"530 310 OFFCURVE",
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE"
);
},
{
closed = 1;
nodes = (
"1150 1012 OFFCURVE",
"1150 1250 QCURVE SMOOTH",
"1150 1400 LINE",
"862 1400 LINE",
"862 1250 LINE SMOOTH",
"862 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"178 814 LINE",
"354 904 LINE",
"287 942 OFFCURVE",
"287 974 QCURVE SMOOTH",
"287 982 OFFCURVE",
"292 987 QCURVE SMOOTH",
"313 1012 LINE",
"930 1012 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1200 1012 OFFCURVE",
"1200 1300 QCURVE SMOOTH",
"1200 1400 LINE",
"812 1400 LINE",
"812 1300 LINE SMOOTH",
"812 1250 OFFCURVE",
"750 1250 QCURVE SMOOTH",
"188 1250 LINE",
"85 1057 LINE SMOOTH",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"172 822 QCURVE",
"178 814 LINE",
"354 904 LINE",
"287 942 OFFCURVE",
"287 974 QCURVE SMOOTH",
"287 982 OFFCURVE",
"292 987 QCURVE SMOOTH",
"313 1012 LINE",
"980 1012 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"488 655 OFFCURVE",
"650 655 QCURVE SMOOTH",
"812 655 OFFCURVE",
"812 570 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 570 LINE SMOOTH",
"1200 893 OFFCURVE",
"650 893 QCURVE SMOOTH",
"100 893 OFFCURVE",
"100 570 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 570 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17A5;
unicode = 17A5;
},
{
glyphname = uni17A6;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1316 -470 QCURVE SMOOTH",
"1650 -470 OFFCURVE",
"1650 -250 QCURVE SMOOTH",
"1650 1250 LINE SMOOTH",
"1650 1600 OFFCURVE",
"1312 1600 QCURVE SMOOTH",
"1147 1600 OFFCURVE",
"1050 1472 QCURVE",
"1050 1900 LINE",
"992 1900 LINE",
"992 1400 LINE",
"1050 1400 LINE",
"1132 1550 OFFCURVE",
"1312 1550 QCURVE SMOOTH",
"1592 1550 OFFCURVE",
"1592 1250 QCURVE SMOOTH",
"1592 -250 LINE SMOOTH",
"1592 -420 OFFCURVE",
"1316 -420 QCURVE SMOOTH",
"1050 -420 OFFCURVE",
"1050 -273 QCURVE SMOOTH",
"1050 -60 OFFCURVE",
"650 -60 QCURVE SMOOTH",
"250 -60 OFFCURVE",
"250 -273 QCURVE SMOOTH",
"250 -336 LINE SMOOTH",
"250 -470 OFFCURVE",
"421 -470 QCURVE SMOOTH",
"464 -470 LINE",
"464 -420 LINE",
"421 -420 LINE SMOOTH",
"308 -420 OFFCURVE",
"308 -336 QCURVE SMOOTH",
"308 -273 LINE SMOOTH",
"308 -110 OFFCURVE",
"650 -110 QCURVE SMOOTH",
"992 -110 OFFCURVE",
"992 -273 QCURVE SMOOTH",
"992 -470 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 877 LINE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 877 LINE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1316 -500 QCURVE SMOOTH",
"1670 -500 OFFCURVE",
"1670 -260 QCURVE SMOOTH",
"1670 1250 LINE SMOOTH",
"1670 1610 OFFCURVE",
"1312 1610 QCURVE SMOOTH",
"1177 1610 OFFCURVE",
"1070 1532 QCURVE",
"1070 1900 LINE",
"962 1900 LINE",
"962 1400 LINE",
"1052 1400 LINE",
"1112 1522 OFFCURVE",
"1312 1522 QCURVE SMOOTH",
"1562 1522 OFFCURVE",
"1562 1250 QCURVE SMOOTH",
"1562 -260 LINE SMOOTH",
"1562 -412 OFFCURVE",
"1316 -412 QCURVE SMOOTH",
"1070 -412 OFFCURVE",
"1070 -283 QCURVE SMOOTH",
"1070 -50 OFFCURVE",
"650 -50 QCURVE SMOOTH",
"230 -50 OFFCURVE",
"230 -283 QCURVE SMOOTH",
"230 -366 LINE SMOOTH",
"230 -500 OFFCURVE",
"421 -500 QCURVE SMOOTH",
"464 -500 LINE",
"464 -400 LINE",
"421 -400 LINE SMOOTH",
"338 -400 OFFCURVE",
"338 -366 QCURVE SMOOTH",
"338 -283 LINE SMOOTH",
"338 -138 OFFCURVE",
"650 -138 QCURVE SMOOTH",
"962 -138 OFFCURVE",
"962 -283 QCURVE SMOOTH",
"962 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 877 LINE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 877 LINE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
}
);
width = 1900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1312 -500 QCURVE SMOOTH",
"1700 -500 OFFCURVE",
"1700 -260 QCURVE SMOOTH",
"1700 1250 LINE SMOOTH",
"1700 1610 OFFCURVE",
"1312 1610 QCURVE SMOOTH",
"1207 1610 OFFCURVE",
"1112 1552 QCURVE",
"1112 1900 LINE",
"924 1900 LINE",
"924 1400 LINE",
"1052 1400 LINE",
"1112 1480 OFFCURVE",
"1312 1480 QCURVE SMOOTH",
"1512 1480 OFFCURVE",
"1512 1250 QCURVE SMOOTH",
"1512 -260 LINE SMOOTH",
"1512 -360 OFFCURVE",
"1312 -360 QCURVE SMOOTH",
"1050 -360 OFFCURVE",
"1050 -283 QCURVE SMOOTH",
"1050 -184 OFFCURVE",
"961 -116 QCURVE SMOOTH",
"872 -50 OFFCURVE",
"650 -50 QCURVE SMOOTH",
"428 -50 OFFCURVE",
"339 -116 QCURVE SMOOTH",
"250 -184 OFFCURVE",
"250 -283 QCURVE SMOOTH",
"250 -426 LINE SMOOTH",
"250 -500 OFFCURVE",
"383 -500 QCURVE SMOOTH",
"524 -500 LINE",
"524 -400 LINE",
"417 -400 OFFCURVE",
"417 -366 QCURVE SMOOTH",
"417 -283 LINE SMOOTH",
"417 -217 OFFCURVE",
"470 -183 QCURVE SMOOTH",
"521 -150 OFFCURVE",
"650 -150 QCURVE SMOOTH",
"779 -150 OFFCURVE",
"831 -183 QCURVE SMOOTH",
"883 -217 OFFCURVE",
"883 -283 QCURVE SMOOTH",
"883 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 877 LINE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"625 1062 QCURVE SMOOTH",
"745 1062 OFFCURVE",
"804 1016 QCURVE SMOOTH",
"862 969 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 0 LINE",
"1050 0 LINE",
"1050 877 LINE SMOOTH",
"1050 1015 OFFCURVE",
"950 1108 QCURVE SMOOTH",
"850 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01237 1 5 8 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 77 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 12 7 6 103 0 15 17 1 11 10 15 11 105 0 3 0 0 4 3 0 105 0 14 14 12 97 0 12 12 17 77 0 10 10 13 97 16 1 13 13 19 77 0 4 4 2 97 9 1 2 2 20 77 0 1 1 2 97 9 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 79 values pushed */\0120 8 0 5 6 8 5 105 0 7 0 6 12 7 6 103 0 15 17 1 11 10 15 11 105 0 14 14 12 97 0 12 12 17 77 0 10 10 13 97 16 1 13 13 19 77 0 0 0 3 97 0 3 3 18 77 0 4 4 2 97 9 1 2 2 20 77 0 1 1 2 97 9 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01246 46 77 75 73 72 68 66 62 61 57 55 46 50 46 50 48 47 45 43 34 17 17 35 36 37 33 21 35 18 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1312 -500 QCURVE SMOOTH",
"1750 -500 OFFCURVE",
"1750 -260 QCURVE SMOOTH",
"1750 1250 LINE SMOOTH",
"1750 1610 OFFCURVE",
"1392 1610 QCURVE SMOOTH",
"1237 1610 OFFCURVE",
"1162 1552 QCURVE",
"1162 1900 LINE",
"874 1900 LINE",
"874 1350 LINE",
"1102 1350 LINE",
"1162 1430 OFFCURVE",
"1312 1430 QCURVE SMOOTH",
"1462 1430 OFFCURVE",
"1462 1250 QCURVE SMOOTH",
"1462 -260 LINE SMOOTH",
"1462 -330 OFFCURVE",
"1312 -330 QCURVE SMOOTH",
"1100 -330 OFFCURVE",
"1100 -283 QCURVE SMOOTH",
"1100 -184 OFFCURVE",
"872 -50 OFFCURVE",
"650 -50 QCURVE SMOOTH",
"428 -50 OFFCURVE",
"200 -184 OFFCURVE",
"200 -283 QCURVE SMOOTH",
"200 -426 LINE SMOOTH",
"200 -500 OFFCURVE",
"383 -500 QCURVE SMOOTH",
"574 -500 LINE",
"574 -370 LINE",
"467 -370 OFFCURVE",
"467 -336 QCURVE SMOOTH",
"467 -283 LINE SMOOTH",
"467 -217 OFFCURVE",
"521 -180 OFFCURVE",
"650 -180 QCURVE SMOOTH",
"779 -180 OFFCURVE",
"833 -217 OFFCURVE",
"833 -283 QCURVE SMOOTH",
"833 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 877 LINE SMOOTH",
"1100 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 877 LINE SMOOTH",
"438 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 877 QCURVE SMOOTH",
"812 0 LINE",
"1100 0 LINE"
);
}
);
width = 1900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1312 -500 QCURVE SMOOTH",
"1800 -500 OFFCURVE",
"1800 -260 QCURVE SMOOTH",
"1800 1250 LINE SMOOTH",
"1800 1660 OFFCURVE",
"1442 1660 QCURVE SMOOTH",
"1287 1660 OFFCURVE",
"1212 1602 QCURVE",
"1212 1900 LINE",
"824 1900 LINE",
"824 1350 LINE",
"1102 1350 LINE",
"1162 1430 OFFCURVE",
"1312 1430 QCURVE SMOOTH",
"1412 1430 OFFCURVE",
"1412 1250 QCURVE SMOOTH",
"1412 -260 LINE SMOOTH",
"1412 -330 OFFCURVE",
"1312 -330 QCURVE SMOOTH",
"1150 -330 OFFCURVE",
"1150 -283 QCURVE SMOOTH",
"1150 -184 OFFCURVE",
"922 -50 OFFCURVE",
"625 -50 QCURVE SMOOTH",
"328 -50 OFFCURVE",
"100 -184 OFFCURVE",
"100 -283 QCURVE SMOOTH",
"100 -426 LINE SMOOTH",
"100 -500 OFFCURVE",
"283 -500 QCURVE SMOOTH",
"574 -500 LINE",
"574 -370 LINE",
"467 -370 OFFCURVE",
"467 -336 QCURVE SMOOTH",
"467 -283 LINE SMOOTH",
"467 -217 OFFCURVE",
"521 -180 OFFCURVE",
"615 -180 QCURVE SMOOTH",
"709 -180 OFFCURVE",
"763 -217 OFFCURVE",
"763 -283 QCURVE SMOOTH",
"763 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 877 LINE SMOOTH",
"488 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"762 1012 OFFCURVE",
"762 877 QCURVE SMOOTH",
"762 0 LINE",
"1150 0 LINE",
"1150 877 LINE SMOOTH",
"1150 1250 OFFCURVE",
"625 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 877 QCURVE SMOOTH",
"100 127 LINE SMOOTH"
);
}
);
width = 1900;
}
);
note = uni17A6;
unicode = 17A6;
},
{
glyphname = uni17A7;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"530 0 QCURVE SMOOTH",
"836 0 OFFCURVE",
"992 222 QCURVE",
"992 -50 LINE",
"1050 -50 LINE",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE",
"852 50 OFFCURVE",
"530 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0121 1 5 2 42 30 2 4 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01236 17 19 41 37 33 20 39 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1200 -100 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17A7;
unicode = 17A7;
},
{
glyphname = uni17A8;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 1480 LINE",
"250 1480 LINE",
"250 1430 LINE",
"1050 1430 LINE"
);
},
{
closed = 1;
nodes = (
"530 0 QCURVE SMOOTH",
"836 0 OFFCURVE",
"992 222 QCURVE",
"992 -50 LINE",
"1050 -50 LINE",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE",
"852 50 OFFCURVE",
"530 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 1480 LINE",
"230 1480 LINE",
"230 1392 LINE",
"1070 1392 LINE"
);
},
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 1500 LINE",
"200 1500 LINE",
"200 1362 LINE",
"1100 1362 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0121 1 5 2 42 30 2 4 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 8 10 1 9 3 8 9 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01249 49 49 52 49 52 19 36 17 19 41 37 33 20 39 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 1312 LINE",
"1150 1312 LINE",
"1150 1500 LINE",
"150 1500 LINE"
);
},
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1362 LINE",
"1200 1362 LINE",
"1200 1600 LINE",
"100 1600 LINE"
);
},
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1200 -100 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17A8;
unicode = 17A8;
},
{
glyphname = uni17A9;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1250 480 LINE",
"1192 480 LINE",
"1192 -50 LINE",
"1250 -50 LINE"
);
},
{
closed = 1;
nodes = (
"530 0 QCURVE SMOOTH",
"836 0 OFFCURVE",
"992 222 QCURVE",
"992 -50 LINE",
"1050 -50 LINE",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE",
"852 50 OFFCURVE",
"530 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1300 480 LINE",
"1192 480 LINE",
"1192 -50 LINE",
"1300 -50 LINE"
);
},
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1400 480 LINE",
"1212 480 LINE",
"1212 -50 LINE",
"1400 -50 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0121 1 5 2 42 30 2 4 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 8 1 5 5 6 95 10 9 2 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 8 1 5 10 9 2 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 8 1 5 5 6 95 10 9 2 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 8 1 5 10 9 2 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 8 1 5 5 6 95 10 9 2 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 39 values pushed */\0120 1 0 2 5 1 2 103 8 1 5 10 9 2 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01249 49 49 52 49 52 19 36 17 19 41 37 33 20 39 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1212 -100 LINE",
"1400 -100 LINE",
"1400 480 LINE",
"1212 480 LINE"
);
},
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1212 -100 LINE",
"1400 -100 LINE",
"1400 480 LINE",
"1212 480 LINE"
);
},
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17A9;
unicode = 17A9;
},
{
glyphname = uni17AA;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"530 0 QCURVE SMOOTH",
"836 0 OFFCURVE",
"992 222 QCURVE",
"992 -50 LINE",
"1050 -50 LINE",
"1050 480 LINE",
"992 480 LINE",
"992 323 LINE",
"852 50 OFFCURVE",
"530 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 509 LINE",
"566 552 LINE SMOOTH",
"1050 632 OFFCURVE",
"1050 877 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 719 OFFCURVE",
"438 719 QCURVE",
"438 773 LINE",
"308 773 OFFCURVE",
"308 877 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 877 QCURVE SMOOTH",
"992 673 OFFCURVE",
"556 601 QCURVE SMOOTH",
"250 551 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"139 1349 OFFCURVE",
"139 1325 QCURVE SMOOTH",
"139 1300 OFFCURVE",
"280 1106 QCURVE",
"338 1120 LINE",
"192 1318 LINE",
"260 1420 LINE",
"800 1420 LINE SMOOTH",
"1050 1420 OFFCURVE",
"1050 1550 QCURVE SMOOTH",
"1050 1670 LINE",
"992 1670 LINE",
"992 1550 LINE SMOOTH",
"992 1470 OFFCURVE",
"800 1470 QCURVE SMOOTH",
"240 1470 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"149 1349 OFFCURVE",
"149 1325 QCURVE SMOOTH",
"149 1300 OFFCURVE",
"280 1106 QCURVE",
"366 1170 LINE",
"252 1328 LINE",
"280 1382 LINE",
"800 1382 LINE SMOOTH",
"1070 1382 OFFCURVE",
"1070 1550 QCURVE SMOOTH",
"1070 1670 LINE",
"962 1670 LINE",
"962 1550 LINE SMOOTH",
"962 1470 OFFCURVE",
"800 1470 QCURVE SMOOTH",
"240 1470 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"304 1216 LINE SMOOTH",
"237 1292 OFFCURVE",
"237 1324 QCURVE SMOOTH",
"237 1332 OFFCURVE",
"242 1337 QCURVE SMOOTH",
"263 1362 LINE",
"800 1362 LINE SMOOTH",
"1100 1362 OFFCURVE",
"1100 1550 QCURVE SMOOTH",
"1100 1700 LINE",
"912 1700 LINE",
"912 1550 LINE SMOOTH",
"912 1500 OFFCURVE",
"800 1500 QCURVE SMOOTH",
"258 1500 LINE",
"118 1317 LINE SMOOTH",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"314 1204 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01270 1 3 10 1 1 5 2 42 30 2 4 5 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 53 values pushed */\0120 9 8 8 9 112 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 50 values pushed */\0120 9 8 8 9 112 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 9 8 9 133 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 49 values pushed */\0120 9 8 9 133 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 9 8 9 133 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\0120 9 8 9 133 0 8 0 10 3 8 10 104 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01264 62 60 59 40 36 17 19 41 37 33 20 39 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
},
{
closed = 1;
nodes = (
"1150 1312 OFFCURVE",
"1150 1550 QCURVE SMOOTH",
"1150 1700 LINE",
"862 1700 LINE",
"862 1550 LINE SMOOTH",
"862 1500 OFFCURVE",
"800 1500 QCURVE SMOOTH",
"258 1500 LINE",
"118 1317 LINE SMOOTH",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"354 1204 LINE",
"287 1242 OFFCURVE",
"287 1274 QCURVE SMOOTH",
"287 1282 OFFCURVE",
"292 1287 QCURVE SMOOTH",
"313 1312 LINE",
"930 1312 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1200 1362 OFFCURVE",
"1200 1650 QCURVE SMOOTH",
"1200 1750 LINE",
"812 1750 LINE",
"812 1650 LINE SMOOTH",
"812 1600 OFFCURVE",
"750 1600 QCURVE SMOOTH",
"208 1600 LINE",
"70 1374 LINE SMOOTH",
"50 1342 OFFCURVE",
"50 1305 QCURVE SMOOTH",
"50 1264 OFFCURVE",
"122 1172 QCURVE SMOOTH",
"128 1164 LINE",
"314 1254 LINE",
"267 1292 OFFCURVE",
"267 1324 QCURVE SMOOTH",
"267 1332 OFFCURVE",
"272 1337 QCURVE SMOOTH",
"293 1362 LINE",
"980 1362 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1200 -100 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17AA;
unicode = 17AA;
},
{
glyphname = uni17AB;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 -470 OFFCURVE",
"1050 -170 QCURVE SMOOTH",
"1050 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -100 LINE",
"905 -100 LINE SMOOTH",
"992 -100 OFFCURVE",
"992 -170 QCURVE SMOOTH",
"992 -420 OFFCURVE",
"500 -420 QCURVE SMOOTH",
"250 -420 LINE",
"250 -470 LINE",
"500 -470 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 -500 OFFCURVE",
"1070 -180 QCURVE SMOOTH",
"1070 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -140 LINE",
"905 -140 LINE SMOOTH",
"962 -140 OFFCURVE",
"962 -180 QCURVE SMOOTH",
"962 -410 OFFCURVE",
"500 -410 QCURVE SMOOTH",
"200 -410 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 840 LINE",
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 -500 OFFCURVE",
"1100 -180 QCURVE SMOOTH",
"1100 -50 LINE",
"800 -50 LINE",
"800 -180 LINE",
"912 -180 LINE",
"912 -380 OFFCURVE",
"500 -380 QCURVE SMOOTH",
"200 -380 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01244 32 24 12 4 9 5 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 2 0 1 0 2 1 103 8 1 5 5 4 95 7 1 4 4 17 77 0 9 9 6 97 0 6 6 19 77 0 0 0 3 95 10 1 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0128 1 5 5 4 95 7 1 4 4 17 77 0 9 9 6 97 0 6 6 19 77 0 1 1 2 95 0 2 2 18 77 0 0 0 3 95 10 1 3 3 20 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 49 47 43 42 41 40 29 27 23 22 21 20 0 10 0 9 17 17 33 11 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"500 -500 LINE SMOOTH",
"1150 -500 OFFCURVE",
"1150 -180 QCURVE SMOOTH",
"1150 -50 LINE",
"750 -50 LINE",
"750 -210 LINE",
"862 -210 LINE",
"862 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"150 -330 LINE",
"150 -500 LINE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"500 -500 LINE SMOOTH",
"1200 -500 OFFCURVE",
"1200 -180 QCURVE SMOOTH",
"1200 -50 LINE",
"700 -50 LINE",
"700 -210 LINE",
"812 -210 LINE",
"812 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"100 -330 LINE",
"100 -500 LINE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 323 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 323 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17AB;
unicode = 17AB;
},
{
glyphname = uni17AC;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 -170 QCURVE SMOOTH",
"1050 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -100 LINE",
"905 -100 LINE SMOOTH",
"992 -100 OFFCURVE",
"992 -170 QCURVE SMOOTH",
"992 -420 OFFCURVE",
"500 -420 QCURVE SMOOTH",
"250 -420 LINE",
"250 -470 LINE",
"500 -470 LINE SMOOTH",
"889 -470 OFFCURVE",
"1003 -320 QCURVE",
"1080 -470 OFFCURVE",
"1200 -470 QCURVE SMOOTH",
"1250 -470 LINE",
"1250 -420 LINE",
"1200 -420 LINE SMOOTH",
"1101 -420 OFFCURVE",
"1027 -279 QCURVE",
"1050 -231 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 830 LINE",
"803 1050 LINE",
"855 1150 LINE",
"1050 1150 LINE",
"1050 1200 LINE",
"832 1200 LINE",
"754 1073 OFFCURVE",
"754 1052 QCURVE SMOOTH",
"754 1024 OFFCURVE",
"814 970 QCURVE SMOOTH",
"992 806 LINE",
"992 323 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 830 LINE",
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 840 LINE",
"843 1060 LINE",
"865 1112 LINE",
"1070 1112 LINE",
"1070 1200 LINE",
"822 1200 LINE",
"744 1063 OFFCURVE",
"744 1042 QCURVE SMOOTH",
"744 1014 OFFCURVE",
"962 806 QCURVE",
"962 323 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 840 LINE",
"162 1048 LINE",
"200 1112 LINE",
"408 1112 LINE",
"408 1200 LINE",
"160 1200 LINE",
"59 1059 OFFCURVE",
"59 1035 QCURVE SMOOTH",
"59 1010 OFFCURVE",
"230 806 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1070 -180 QCURVE SMOOTH",
"1070 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -140 LINE",
"905 -140 LINE SMOOTH",
"962 -140 OFFCURVE",
"962 -180 QCURVE SMOOTH",
"962 -410 OFFCURVE",
"500 -410 QCURVE SMOOTH",
"200 -410 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH",
"870 -500 OFFCURVE",
"1000 -365 QCURVE",
"1078 -500 OFFCURVE",
"1200 -500 QCURVE SMOOTH",
"1250 -500 LINE",
"1250 -410 LINE",
"1200 -410 LINE SMOOTH",
"1128 -410 OFFCURVE",
"1053 -281 QCURVE",
"1070 -235 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE",
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 840 LINE",
"852 1062 LINE",
"1100 1062 LINE",
"1100 1200 LINE",
"852 1200 LINE",
"777 1102 LINE",
"740 1053 LINE SMOOTH",
"724 1033 OFFCURVE",
"724 1012 QCURVE SMOOTH",
"724 984 OFFCURVE",
"755 955 QCURVE SMOOTH",
"807 905 LINE",
"912 806 LINE",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1100 -180 QCURVE SMOOTH",
"1100 -50 LINE",
"800 -50 LINE",
"800 -180 LINE",
"912 -180 LINE",
"912 -380 OFFCURVE",
"500 -380 QCURVE SMOOTH",
"200 -380 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH",
"826 -500 OFFCURVE",
"975 -406 QCURVE",
"1074 -500 OFFCURVE",
"1170 -500 QCURVE SMOOTH",
"1250 -500 LINE",
"1250 -380 LINE",
"1170 -380 LINE SMOOTH",
"1127 -380 OFFCURVE",
"1080 -286 QCURVE",
"1100 -238 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\01233 21 13 1 4 5 1 47 1 7 6 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\0120 11 0 10 6 11 10 103 4 1 1 1 0 95 3 1 0 0 17 77 0 5 5 2 97 0 2 2 19 77 9 1 6 6 7 97 8 1 7 7 20 7 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0124 1 1 1 0 95 3 1 0 0 17 77 0 5 5 2 97 0 2 2 19 77 0 10 10 11 95 0 11 11 18 77 9 1 6 6 7 97 8 1 7 7 20 7 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\01257 56 55 54 53 51 34 33 35 36 17 27 36 17 25 12 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1150 -180 QCURVE SMOOTH",
"1150 -50 LINE",
"750 -50 LINE",
"750 -210 LINE",
"862 -210 LINE",
"862 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"150 -330 LINE",
"150 -500 LINE",
"500 -500 LINE SMOOTH",
"876 -500 OFFCURVE",
"1025 -406 QCURVE",
"1124 -500 OFFCURVE",
"1220 -500 QCURVE SMOOTH",
"1300 -500 LINE",
"1300 -350 LINE",
"1220 -350 LINE SMOOTH",
"1177 -350 OFFCURVE",
"1130 -286 QCURVE",
"1150 -238 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 840 LINE",
"852 1012 LINE",
"1150 1012 LINE",
"1150 1200 LINE",
"802 1200 LINE",
"727 1102 LINE",
"690 1053 LINE SMOOTH",
"674 1033 OFFCURVE",
"674 1012 QCURVE SMOOTH",
"674 984 OFFCURVE",
"705 955 QCURVE SMOOTH",
"757 905 LINE",
"862 806 LINE",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 323 QCURVE SMOOTH",
"1200 840 LINE",
"902 1012 LINE",
"1200 1012 LINE",
"1200 1250 LINE",
"772 1250 LINE",
"676 1087 LINE SMOOTH",
"644 1033 OFFCURVE",
"644 1012 QCURVE SMOOTH",
"644 984 OFFCURVE",
"686 940 QCURVE SMOOTH",
"812 806 LINE",
"812 323 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 840 LINE",
"220 1012 LINE",
"518 1012 LINE",
"518 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 323 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1200 -180 QCURVE SMOOTH",
"1200 -50 LINE",
"700 -50 LINE",
"700 -210 LINE",
"812 -210 LINE",
"812 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"100 -330 LINE",
"100 -500 LINE",
"500 -500 LINE SMOOTH",
"860 -500 OFFCURVE",
"1035 -415 QCURVE",
"1130 -500 OFFCURVE",
"1250 -500 QCURVE SMOOTH",
"1330 -500 LINE",
"1330 -300 LINE",
"1250 -300 LINE SMOOTH",
"1211 -300 OFFCURVE",
"1179 -281 QCURVE",
"1200 -236 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17AC;
unicode = 17AC;
},
{
glyphname = uni17AD;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 -470 OFFCURVE",
"1050 -170 QCURVE SMOOTH",
"1050 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -100 LINE",
"905 -100 LINE SMOOTH",
"992 -100 OFFCURVE",
"992 -170 QCURVE SMOOTH",
"992 -420 OFFCURVE",
"500 -420 QCURVE SMOOTH",
"250 -420 LINE",
"250 -470 LINE",
"500 -470 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 -500 OFFCURVE",
"1070 -180 QCURVE SMOOTH",
"1070 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -140 LINE",
"905 -140 LINE SMOOTH",
"962 -140 OFFCURVE",
"962 -180 QCURVE SMOOTH",
"962 -410 OFFCURVE",
"500 -410 QCURVE SMOOTH",
"200 -410 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 923 LINE SMOOTH",
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 -500 OFFCURVE",
"1100 -180 QCURVE SMOOTH",
"1100 -50 LINE",
"800 -50 LINE",
"800 -180 LINE",
"912 -180 LINE",
"912 -380 OFFCURVE",
"500 -380 QCURVE SMOOTH",
"200 -380 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01223 1 9 6 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 60 values pushed */\0120 10 9 12 9 10 12 128 0 12 15 1 5 4 12 5 105 0 2 0 1 0 2 1 103 11 1 9 9 6 97 7 1 6 6 17 77 0 4 4 8 97 13 1 8 8 19 77 0 0 0 3 95 14 1 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 62 values pushed */\0120 10 9 12 9 10 12 128 0 12 15 1 5 4 12 5 105 11 1 9 9 6 97 7 1 6 6 17 77 0 4 4 8 97 13 1 8 8 19 77 0 1 1 2 95 0 2 2 18 77 0 0 0 3 95 14 1 3 3 20 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 36 values pushed */\01211 11 0 0 50 48 46 45 43 41 39 37 35 33 31 30 26 24 22 20 11 15 11 15 13 12 0 10 0 9 17 17 33 16 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 923 LINE SMOOTH",
"1150 1036 OFFCURVE",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"500 -500 LINE SMOOTH",
"1150 -500 OFFCURVE",
"1150 -180 QCURVE SMOOTH",
"1150 -50 LINE",
"750 -50 LINE",
"750 -210 LINE",
"862 -210 LINE",
"862 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"150 -330 LINE",
"150 -500 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 973 LINE SMOOTH",
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"500 -500 LINE SMOOTH",
"1200 -500 OFFCURVE",
"1200 -180 QCURVE SMOOTH",
"1200 -50 LINE",
"700 -50 LINE",
"700 -210 LINE",
"812 -210 LINE",
"812 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"100 -330 LINE",
"100 -500 LINE"
);
}
);
width = 1300;
}
);
note = uni17AD;
unicode = 17AD;
},
{
glyphname = uni17AE;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 -170 QCURVE SMOOTH",
"1050 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -100 LINE",
"905 -100 LINE SMOOTH",
"992 -100 OFFCURVE",
"992 -170 QCURVE SMOOTH",
"992 -420 OFFCURVE",
"500 -420 QCURVE SMOOTH",
"250 -420 LINE",
"250 -470 LINE",
"500 -470 LINE SMOOTH",
"889 -470 OFFCURVE",
"1003 -320 QCURVE",
"1080 -470 OFFCURVE",
"1200 -470 QCURVE SMOOTH",
"1250 -470 LINE",
"1250 -420 LINE",
"1200 -420 LINE SMOOTH",
"1101 -420 OFFCURVE",
"1027 -279 QCURVE",
"1050 -231 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1070 -180 QCURVE SMOOTH",
"1070 -50 OFFCURVE",
"905 -50 QCURVE SMOOTH",
"800 -50 LINE",
"800 -140 LINE",
"905 -140 LINE SMOOTH",
"962 -140 OFFCURVE",
"962 -180 QCURVE SMOOTH",
"962 -410 OFFCURVE",
"500 -410 QCURVE SMOOTH",
"200 -410 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH",
"870 -500 OFFCURVE",
"1000 -365 QCURVE",
"1078 -500 OFFCURVE",
"1200 -500 QCURVE SMOOTH",
"1250 -500 LINE",
"1250 -410 LINE",
"1200 -410 LINE SMOOTH",
"1128 -410 OFFCURVE",
"1053 -281 QCURVE",
"1070 -235 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 923 LINE SMOOTH",
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1100 -180 QCURVE SMOOTH",
"1100 -50 LINE",
"800 -50 LINE",
"800 -180 LINE",
"912 -180 LINE",
"912 -380 OFFCURVE",
"500 -380 QCURVE SMOOTH",
"200 -380 LINE",
"200 -500 LINE",
"500 -500 LINE SMOOTH",
"826 -500 OFFCURVE",
"975 -406 QCURVE",
"1074 -500 OFFCURVE",
"1170 -500 QCURVE SMOOTH",
"1250 -500 LINE",
"1250 -380 LINE",
"1170 -380 LINE SMOOTH",
"1127 -380 OFFCURVE",
"1080 -286 QCURVE",
"1100 -238 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01232 1 11 8 7 1 1 0 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 61 values pushed */\0120 12 11 14 11 12 14 128 0 14 16 1 7 6 14 7 105 0 5 0 4 0 5 4 103 13 1 11 11 8 97 9 1 8 8 17 77 0 6 6 10 97 15 1 10 10 19 77 3 1 0 0 1 97 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 63 values pushed */\0120 12 11 14 11 12 14 128 0 14 16 1 7 6 14 7 105 13 1 11 11 8 97 9 1 8 8 17 77 0 6 6 10 97 15 1 10 10 19 77 0 4 4 5 95 0 5 5 18 77 3 1 0 0 1 97 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\01220 20 59 57 55 54 52 50 48 46 44 42 40 39 35 33 31 29 20 24 20 24 20 17 17 33 34 33 33 17 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 923 LINE SMOOTH",
"1150 1036 OFFCURVE",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1150 -180 QCURVE SMOOTH",
"1150 -50 LINE",
"750 -50 LINE",
"750 -210 LINE",
"862 -210 LINE",
"862 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"150 -330 LINE",
"150 -500 LINE",
"500 -500 LINE SMOOTH",
"876 -500 OFFCURVE",
"1025 -406 QCURVE",
"1124 -500 OFFCURVE",
"1220 -500 QCURVE SMOOTH",
"1300 -500 LINE",
"1300 -350 LINE",
"1220 -350 LINE SMOOTH",
"1177 -350 OFFCURVE",
"1130 -286 QCURVE",
"1150 -238 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 973 LINE SMOOTH",
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1200 -180 QCURVE SMOOTH",
"1200 -50 LINE",
"700 -50 LINE",
"700 -210 LINE",
"812 -210 LINE",
"812 -330 OFFCURVE",
"500 -330 QCURVE SMOOTH",
"100 -330 LINE",
"100 -500 LINE",
"500 -500 LINE SMOOTH",
"860 -500 OFFCURVE",
"1035 -415 QCURVE",
"1130 -500 OFFCURVE",
"1250 -500 QCURVE SMOOTH",
"1330 -500 LINE",
"1330 -300 LINE",
"1250 -300 LINE SMOOTH",
"1211 -300 OFFCURVE",
"1179 -281 QCURVE",
"1200 -236 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17AE;
unicode = 17AE;
},
{
glyphname = uni17AF;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"323 0 LINE",
"651 348 LINE",
"979 0 LINE",
"1050 0 LINE",
"1050 897 LINE SMOOTH",
"1050 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"530 1200 LINE SMOOTH",
"308 1200 OFFCURVE",
"308 1316 QCURVE SMOOTH",
"308 1540 LINE",
"250 1540 LINE",
"250 1316 LINE SMOOTH",
"250 1150 OFFCURVE",
"530 1150 QCURVE SMOOTH",
"800 1150 LINE SMOOTH",
"992 1150 OFFCURVE",
"992 897 QCURVE SMOOTH",
"992 59 LINE",
"651 423 LINE",
"308 58 LINE",
"308 778 LINE SMOOTH",
"308 930 OFFCURVE",
"160 930 QCURVE SMOOTH",
"119 930 LINE",
"119 880 LINE",
"160 880 LINE SMOOTH",
"250 880 OFFCURVE",
"250 778 QCURVE SMOOTH",
"250 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"651 474 LINE",
"338 89 LINE",
"338 778 LINE SMOOTH",
"338 930 OFFCURVE",
"160 930 QCURVE SMOOTH",
"119 930 LINE",
"119 842 LINE",
"160 842 LINE SMOOTH",
"230 842 OFFCURVE",
"230 778 QCURVE SMOOTH",
"230 0 LINE",
"379 0 LINE",
"651 335 LINE",
"923 0 LINE",
"1070 0 LINE",
"1070 897 LINE SMOOTH",
"1070 1200 OFFCURVE",
"800 1200 QCURVE SMOOTH",
"530 1200 LINE SMOOTH",
"338 1200 OFFCURVE",
"338 1316 QCURVE SMOOTH",
"338 1540 LINE",
"230 1540 LINE",
"230 1316 LINE SMOOTH",
"230 1112 OFFCURVE",
"530 1112 QCURVE SMOOTH",
"800 1112 LINE SMOOTH",
"962 1112 OFFCURVE",
"962 897 QCURVE SMOOTH",
"962 90 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"289 1132 QCURVE",
"372 1062 OFFCURVE",
"530 1062 QCURVE SMOOTH",
"721 1062 LINE SMOOTH",
"912 1062 OFFCURVE",
"912 897 QCURVE SMOOTH",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 803 LINE SMOOTH",
"388 947 OFFCURVE",
"250 947 QCURVE SMOOTH",
"100 947 LINE",
"100 803 LINE",
"200 803 OFFCURVE",
"200 762 QCURVE SMOOTH",
"200 0 LINE",
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 897 LINE SMOOTH",
"1100 1200 OFFCURVE",
"815 1200 QCURVE SMOOTH",
"530 1200 LINE SMOOTH",
"460 1200 OFFCURVE",
"388 1266 OFFCURVE",
"388 1316 QCURVE SMOOTH",
"388 1540 LINE",
"200 1540 LINE",
"200 1316 LINE SMOOTH",
"200 1193 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01224 23 22 12 4 2 4 1 76 0 0 1 0 133 0 5 0 4 2 5 4 105 0 6 6 1 95 0 1 1 17 77 3 1 2 2 19 2 78 54 33 18 18 18 51 17 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 897 LINE SMOOTH",
"1150 1200 OFFCURVE",
"815 1200 QCURVE SMOOTH",
"530 1200 LINE SMOOTH",
"438 1200 OFFCURVE",
"438 1316 QCURVE SMOOTH",
"438 1540 LINE",
"150 1540 LINE",
"150 1316 LINE SMOOTH",
"150 1012 OFFCURVE",
"530 1012 QCURVE SMOOTH",
"721 1012 LINE SMOOTH",
"862 1012 OFFCURVE",
"862 897 QCURVE SMOOTH",
"862 263 LINE",
"651 455 LINE",
"438 261 LINE",
"438 773 LINE SMOOTH",
"438 917 OFFCURVE",
"250 917 QCURVE SMOOTH",
"50 917 LINE",
"50 773 LINE",
"150 773 OFFCURVE",
"150 732 QCURVE SMOOTH",
"150 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"651 485 LINE",
"488 321 LINE",
"488 773 LINE SMOOTH",
"488 917 OFFCURVE",
"300 917 QCURVE SMOOTH",
"20 917 LINE",
"20 723 LINE",
"100 723 OFFCURVE",
"100 682 QCURVE SMOOTH",
"100 0 LINE",
"469 0 LINE",
"651 180 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 897 LINE SMOOTH",
"1200 1250 OFFCURVE",
"865 1250 QCURVE SMOOTH",
"580 1250 LINE SMOOTH",
"488 1250 OFFCURVE",
"488 1366 QCURVE SMOOTH",
"488 1540 LINE",
"100 1540 LINE",
"100 1366 LINE SMOOTH",
"100 1012 OFFCURVE",
"480 1012 QCURVE SMOOTH",
"671 1012 LINE SMOOTH",
"812 1012 OFFCURVE",
"812 897 QCURVE SMOOTH",
"812 323 LINE"
);
}
);
width = 1300;
}
);
note = uni17AF;
unicode = 17AF;
},
{
glyphname = uni17B0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"636 -430 OFFCURVE",
"469 -430 QCURVE SMOOTH",
"303 -430 OFFCURVE",
"303 -330 QCURVE SMOOTH",
"303 -281 LINE",
"636 -208 LINE",
"636 -321 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"992 -235 LINE SMOOTH",
"992 -350 OFFCURVE",
"900 -350 QCURVE SMOOTH",
"788 -350 OFFCURVE",
"639 -206 QCURVE",
"992 -132 LINE"
);
},
{
closed = 1;
nodes = (
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 -50 LINE SMOOTH",
"992 -80 OFFCURVE",
"899 -100 QCURVE SMOOTH",
"250 -239 LINE",
"250 -330 LINE SMOOTH",
"250 -480 OFFCURVE",
"466 -480 QCURVE SMOOTH",
"596 -480 OFFCURVE",
"686 -390 OFFCURVE",
"690 -312 QCURVE",
"823 -400 OFFCURVE",
"902 -400 QCURVE SMOOTH",
"948 -400 OFFCURVE",
"1050 -330 OFFCURVE",
"1050 -235 QCURVE SMOOTH",
"1050 923 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"616 -412 OFFCURVE",
"469 -412 QCURVE SMOOTH",
"333 -412 OFFCURVE",
"333 -330 QCURVE SMOOTH",
"333 -294 LINE",
"616 -236 LINE",
"616 -321 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"962 -235 LINE SMOOTH",
"962 -309 OFFCURVE",
"900 -309 QCURVE SMOOTH",
"838 -309 OFFCURVE",
"649 -230 QCURVE",
"962 -166 LINE"
);
},
{
closed = 1;
nodes = (
"1070 1036 OFFCURVE",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 -50 LINE SMOOTH",
"962 -80 OFFCURVE",
"779 -117 QCURVE SMOOTH",
"230 -227 LINE",
"230 -330 LINE SMOOTH",
"230 -500 OFFCURVE",
"466 -500 QCURVE SMOOTH",
"596 -500 OFFCURVE",
"650 -455 QCURVE SMOOTH",
"706 -410 OFFCURVE",
"706 -343 QCURVE",
"823 -398 OFFCURVE",
"902 -398 QCURVE SMOOTH",
"948 -398 OFFCURVE",
"981 -380 QCURVE SMOOTH",
"1070 -330 OFFCURVE",
"1070 -235 QCURVE SMOOTH",
"1070 923 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"596 -351 OFFCURVE",
"569 -372 QCURVE SMOOTH",
"541 -395 OFFCURVE",
"469 -395 QCURVE SMOOTH",
"383 -395 OFFCURVE",
"383 -356 QCURVE SMOOTH",
"383 -316 LINE",
"596 -265 LINE",
"596 -321 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 -50 LINE SMOOTH",
"912 -84 OFFCURVE",
"486 -168 OFFCURVE",
"200 -219 QCURVE",
"200 -360 LINE SMOOTH",
"200 -500 OFFCURVE",
"466 -500 QCURVE SMOOTH",
"596 -500 OFFCURVE",
"650 -455 QCURVE SMOOTH",
"706 -410 OFFCURVE",
"706 -363 QCURVE",
"816 -389 LINE",
"981 -389 OFFCURVE",
"1100 -332 OFFCURVE",
"1100 -275 QCURVE SMOOTH",
"1100 923 LINE SMOOTH",
"1100 1036 OFFCURVE",
"1026 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"912 -185 LINE",
"912 -282 LINE",
"670 -246 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 104 values pushed */\01221 1 7 3 64 63 62 39 32 6 5 7 5 11 2 76 0 8 7 10 7 8 10 128 0 5 11 2 11 5 2 128 0 10 12 1 1 0 10 1 105 9 1 7 7 3 97 4 1 3 3 17 77 0 0 0 11 97 0 11 11 19 77 0 2 2 6 97 0 6 6 20 6 78 0 0 61 59 57 56 54 52 50 48 46 44 37 35 31 30 24 22 20 18 10 8 0 4 0 4 17 13 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"862 -282 LINE",
"670 -246 LINE",
"862 -195 LINE"
);
},
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"596 -321 LINE SMOOTH",
"596 -351 OFFCURVE",
"569 -372 QCURVE SMOOTH",
"541 -395 OFFCURVE",
"469 -395 QCURVE SMOOTH",
"433 -395 OFFCURVE",
"433 -356 QCURVE SMOOTH",
"433 -316 LINE",
"596 -265 LINE"
);
},
{
closed = 1;
nodes = (
"1150 1036 OFFCURVE",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 -50 LINE SMOOTH",
"862 -84 OFFCURVE",
"486 -168 OFFCURVE",
"150 -219 QCURVE",
"150 -360 LINE SMOOTH",
"150 -500 OFFCURVE",
"466 -500 QCURVE SMOOTH",
"596 -500 OFFCURVE",
"650 -455 QCURVE SMOOTH",
"706 -410 OFFCURVE",
"706 -363 QCURVE",
"816 -389 LINE",
"1031 -389 OFFCURVE",
"1150 -332 OFFCURVE",
"1150 -275 QCURVE SMOOTH",
"1150 923 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"883 -282 LINE",
"672 -246 LINE",
"883 -195 LINE"
);
},
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"591 -321 LINE SMOOTH",
"591 -351 OFFCURVE",
"561 -372 QCURVE SMOOTH",
"530 -395 OFFCURVE",
"451 -395 QCURVE SMOOTH",
"411 -395 OFFCURVE",
"411 -356 QCURVE SMOOTH",
"411 -316 LINE",
"591 -265 LINE"
);
},
{
closed = 1;
nodes = (
"1200 1086 OFFCURVE",
"1051 1250 OFFCURVE",
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 -50 LINE SMOOTH",
"812 -84 OFFCURVE",
"470 -168 OFFCURVE",
"100 -219 QCURVE",
"100 -360 LINE SMOOTH",
"100 -500 OFFCURVE",
"448 -500 QCURVE SMOOTH",
"591 -500 OFFCURVE",
"650 -455 QCURVE SMOOTH",
"712 -410 OFFCURVE",
"712 -363 QCURVE",
"833 -389 LINE",
"1069 -389 OFFCURVE",
"1200 -332 OFFCURVE",
"1200 -275 QCURVE SMOOTH",
"1200 973 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17B0;
unicode = 17B0;
},
{
glyphname = uni17B1;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"179 1460 OFFCURVE",
"179 1285 QCURVE SMOOTH",
"179 1200 OFFCURVE",
"299 1116 QCURVE",
"330 1156 LINE",
"229 1234 OFFCURVE",
"229 1285 QCURVE SMOOTH",
"229 1410 OFFCURVE",
"359 1410 QCURVE SMOOTH",
"879 1410 LINE SMOOTH",
"1041 1410 OFFCURVE",
"1071 1192 QCURVE",
"1119 1212 LINE",
"1069 1460 OFFCURVE",
"879 1460 QCURVE SMOOTH",
"359 1460 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"529 0 QCURVE SMOOTH",
"835 0 OFFCURVE",
"991 222 QCURVE",
"991 -50 LINE",
"1049 -50 LINE",
"1049 480 LINE",
"991 480 LINE",
"991 323 LINE",
"851 50 OFFCURVE",
"529 50 QCURVE SMOOTH",
"307 50 OFFCURVE",
"307 323 QCURVE SMOOTH",
"307 509 LINE",
"565 552 LINE SMOOTH",
"1049 632 OFFCURVE",
"1049 877 QCURVE SMOOTH",
"1049 1200 OFFCURVE",
"649 1200 QCURVE SMOOTH",
"249 1200 OFFCURVE",
"249 877 QCURVE SMOOTH",
"249 719 OFFCURVE",
"437 719 QCURVE",
"437 773 LINE",
"307 773 OFFCURVE",
"307 877 QCURVE SMOOTH",
"307 1150 OFFCURVE",
"649 1150 QCURVE SMOOTH",
"991 1150 OFFCURVE",
"991 877 QCURVE SMOOTH",
"991 673 OFFCURVE",
"555 601 QCURVE SMOOTH",
"249 551 LINE",
"249 323 LINE SMOOTH",
"249 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"240 1470 OFFCURVE",
"149 1359 OFFCURVE",
"149 1285 QCURVE SMOOTH",
"149 1200 OFFCURVE",
"280 1106 QCURVE",
"351 1176 LINE",
"249 1234 OFFCURVE",
"249 1285 QCURVE SMOOTH",
"249 1382 OFFCURVE",
"360 1382 QCURVE SMOOTH",
"880 1382 LINE SMOOTH",
"1022 1382 OFFCURVE",
"1062 1182 QCURVE",
"1150 1212 LINE",
"1100 1470 OFFCURVE",
"880 1470 QCURVE SMOOTH",
"360 1470 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1042 1162 QCURVE",
"1180 1222 LINE",
"1130 1500 OFFCURVE",
"880 1500 QCURVE SMOOTH",
"258 1500 LINE",
"118 1317 LINE SMOOTH",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"314 1204 LINE",
"304 1216 LINE SMOOTH",
"237 1292 OFFCURVE",
"237 1324 QCURVE SMOOTH",
"237 1332 OFFCURVE",
"242 1337 QCURVE SMOOTH",
"263 1362 LINE",
"880 1362 LINE SMOOTH",
"992 1362 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01266 56 2 3 8 67 57 2 0 3 1 1 5 2 42 30 2 4 5 4 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 9 10 1 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 19 values pushed */\01250 49 65 63 49 68 50 68 36 17 19 41 37 33 20 39 11 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"942 1362 OFFCURVE",
"1042 1162 QCURVE",
"1180 1222 LINE",
"1130 1550 OFFCURVE",
"880 1550 QCURVE SMOOTH",
"258 1550 LINE",
"118 1317 LINE",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"364 1204 LINE",
"354 1216 LINE SMOOTH",
"287 1292 OFFCURVE",
"287 1324 QCURVE SMOOTH",
"287 1332 OFFCURVE",
"292 1337 QCURVE SMOOTH",
"313 1362 LINE",
"830 1362 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"970 1412 OFFCURVE",
"1079 1212 QCURVE",
"1230 1272 LINE",
"1175 1650 OFFCURVE",
"902 1650 QCURVE SMOOTH",
"223 1650 LINE",
"72 1381 LINE SMOOTH",
"50 1342 OFFCURVE",
"50 1305 QCURVE SMOOTH",
"50 1264 OFFCURVE",
"129 1172 QCURVE SMOOTH",
"135 1164 LINE",
"338 1254 LINE",
"328 1266 LINE",
"254 1342 OFFCURVE",
"254 1374 QCURVE SMOOTH",
"254 1382 OFFCURVE",
"260 1387 QCURVE",
"283 1412 LINE",
"848 1412 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1200 -100 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17B1;
unicode = 17B1;
},
{
glyphname = uni17B2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1050 694 OFFCURVE",
"1050 722 QCURVE SMOOTH",
"1050 743 OFFCURVE",
"972 870 QCURVE",
"684 870 LINE",
"684 820 LINE",
"949 820 LINE",
"1001 720 LINE",
"713 462 LINE",
"752 426 LINE",
"881 542 LINE",
"992 428 OFFCURVE",
"992 323 QCURVE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 877 LINE SMOOTH",
"308 1150 OFFCURVE",
"625 1150 QCURVE SMOOTH",
"855 1150 OFFCURVE",
"974 1026 QCURVE",
"1000 1068 LINE",
"910 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 877 QCURVE SMOOTH",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 323 QCURVE SMOOTH",
"1050 480 OFFCURVE",
"922 579 QCURVE",
"990 640 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"960 569 QCURVE",
"1070 709 OFFCURVE",
"1070 725 QCURVE SMOOTH",
"1070 749 OFFCURVE",
"969 890 QCURVE",
"601 890 LINE",
"601 802 LINE",
"929 802 LINE",
"967 738 LINE",
"718 435 LINE",
"805 377 LINE",
"855 438 OFFCURVE",
"896 489 QCURVE",
"962 431 OFFCURVE",
"962 323 QCURVE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 877 LINE SMOOTH",
"338 1112 OFFCURVE",
"625 1112 QCURVE SMOOTH",
"855 1112 OFFCURVE",
"974 1006 QCURVE",
"1020 1088 LINE",
"910 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 323 QCURVE SMOOTH",
"1070 488 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"912 400 QCURVE SMOOTH",
"912 323 LINE SMOOTH",
"912 231 OFFCURVE",
"854 184 QCURVE SMOOTH",
"795 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"505 138 OFFCURVE",
"447 184 QCURVE SMOOTH",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 877 LINE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"625 1062 QCURVE SMOOTH",
"855 1062 OFFCURVE",
"974 986 QCURVE",
"1050 1108 LINE",
"910 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 877 QCURVE SMOOTH",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"300 92 QCURVE SMOOTH",
"400 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"900 0 OFFCURVE",
"1000 92 QCURVE SMOOTH",
"1100 185 OFFCURVE",
"1100 323 QCURVE SMOOTH",
"1100 400 LINE SMOOTH",
"1100 504 OFFCURVE",
"1043 582 QCURVE",
"1067 605 LINE",
"1119 655 LINE SMOOTH",
"1150 684 OFFCURVE",
"1150 712 QCURVE SMOOTH",
"1150 733 OFFCURVE",
"1134 753 QCURVE SMOOTH",
"1097 802 LINE",
"1022 900 LINE",
"644 900 LINE",
"644 762 LINE",
"1022 762 LINE",
"687 465 LINE",
"800 360 LINE",
"906 453 LINE",
"912 429 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */\01232 1 4 3 33 1 1 4 14 2 1 0 4 5 0 3 76 0 1 0 0 5 1 0 103 0 4 4 3 97 0 3 3 17 77 0 5 5 2 97 0 2 2 19 2 78 39 35 39 46 17 19 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 323 QCURVE SMOOTH",
"1150 360 LINE SMOOTH",
"1150 464 OFFCURVE",
"1043 542 QCURVE",
"1067 565 LINE",
"1119 615 LINE SMOOTH",
"1150 644 OFFCURVE",
"1150 672 QCURVE SMOOTH",
"1150 693 OFFCURVE",
"1134 713 QCURVE SMOOTH",
"1097 762 LINE",
"1022 860 LINE",
"644 860 LINE",
"644 672 LINE",
"922 672 LINE",
"637 425 LINE",
"750 320 LINE",
"856 413 LINE",
"862 389 OFFCURVE",
"862 360 QCURVE SMOOTH",
"862 323 LINE SMOOTH",
"862 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"438 138 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 877 LINE SMOOTH",
"438 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"855 1012 OFFCURVE",
"974 936 QCURVE",
"1050 1108 LINE",
"910 1200 OFFCURVE",
"625 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 877 QCURVE SMOOTH",
"150 323 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 336 QCURVE SMOOTH",
"1200 375 LINE SMOOTH",
"1200 483 OFFCURVE",
"1093 565 QCURVE",
"1117 589 LINE",
"1169 641 LINE SMOOTH",
"1200 671 OFFCURVE",
"1200 700 QCURVE SMOOTH",
"1200 722 OFFCURVE",
"1184 743 QCURVE SMOOTH",
"1147 794 LINE",
"1072 896 LINE",
"644 896 LINE",
"644 700 LINE",
"872 700 LINE",
"587 443 LINE",
"700 333 LINE",
"806 430 LINE",
"812 405 OFFCURVE",
"812 375 QCURVE SMOOTH",
"812 336 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 336 QCURVE SMOOTH",
"488 914 LINE SMOOTH",
"488 1012 OFFCURVE",
"625 1012 QCURVE SMOOTH",
"855 1012 OFFCURVE",
"1024 975 QCURVE",
"1100 1154 LINE",
"910 1250 OFFCURVE",
"625 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 914 QCURVE SMOOTH",
"100 336 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17B2;
unicode = 17B2;
},
{
glyphname = uni17B3;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"529 0 QCURVE SMOOTH",
"835 0 OFFCURVE",
"991 222 QCURVE",
"991 -50 LINE",
"1049 -50 LINE",
"1049 480 LINE",
"991 480 LINE",
"991 323 LINE",
"851 50 OFFCURVE",
"529 50 QCURVE SMOOTH",
"307 50 OFFCURVE",
"307 323 QCURVE SMOOTH",
"307 509 LINE",
"565 552 LINE SMOOTH",
"1049 632 OFFCURVE",
"1049 877 QCURVE SMOOTH",
"1049 1200 OFFCURVE",
"649 1200 QCURVE SMOOTH",
"249 1200 OFFCURVE",
"249 877 QCURVE SMOOTH",
"249 719 OFFCURVE",
"437 719 QCURVE",
"437 773 LINE",
"307 773 OFFCURVE",
"307 877 QCURVE SMOOTH",
"307 1150 OFFCURVE",
"649 1150 QCURVE SMOOTH",
"991 1150 OFFCURVE",
"991 877 QCURVE SMOOTH",
"991 673 OFFCURVE",
"555 601 QCURVE SMOOTH",
"249 551 LINE",
"249 323 LINE SMOOTH",
"249 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"638 1612 OFFCURVE",
"638 1684 QCURVE SMOOTH",
"638 1757 OFFCURVE",
"699 1849 QCURVE",
"649 1866 LINE",
"590 1763 OFFCURVE",
"590 1681 QCURVE SMOOTH",
"590 1587 OFFCURVE",
"666 1521 QCURVE SMOOTH",
"736 1460 LINE",
"359 1460 LINE SMOOTH",
"179 1460 OFFCURVE",
"179 1285 QCURVE SMOOTH",
"179 1200 OFFCURVE",
"299 1116 QCURVE",
"330 1156 LINE",
"229 1234 OFFCURVE",
"229 1285 QCURVE SMOOTH",
"229 1410 OFFCURVE",
"359 1410 QCURVE SMOOTH",
"793 1410 LINE",
"1057 1178 LINE",
"1119 1212 LINE",
"1069 1460 OFFCURVE",
"879 1460 QCURVE SMOOTH",
"811 1460 LINE",
"699 1558 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"879 1410 LINE SMOOTH",
"1022 1410 OFFCURVE",
"1062 1240 QCURVE",
"868 1410 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"520 0 QCURVE SMOOTH",
"797 0 OFFCURVE",
"962 161 QCURVE",
"962 -50 LINE",
"1070 -50 LINE",
"1070 480 LINE",
"962 480 LINE",
"962 323 LINE",
"842 88 OFFCURVE",
"520 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 490 LINE",
"566 527 LINE SMOOTH",
"1070 608 OFFCURVE",
"1070 877 QCURVE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 877 QCURVE SMOOTH",
"230 719 OFFCURVE",
"438 719 QCURVE",
"438 813 LINE",
"338 813 OFFCURVE",
"338 877 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 877 QCURVE SMOOTH",
"962 680 OFFCURVE",
"556 615 QCURVE SMOOTH",
"230 562 LINE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"680 1613 OFFCURVE",
"680 1684 QCURVE SMOOTH",
"680 1750 OFFCURVE",
"728 1835 QCURVE",
"642 1870 LINE",
"585 1770 OFFCURVE",
"585 1686 QCURVE SMOOTH",
"585 1579 OFFCURVE",
"678 1498 QCURVE SMOOTH",
"711 1470 LINE",
"360 1470 LINE SMOOTH",
"240 1470 OFFCURVE",
"149 1359 OFFCURVE",
"149 1285 QCURVE SMOOTH",
"149 1200 OFFCURVE",
"280 1106 QCURVE",
"351 1176 LINE",
"249 1234 OFFCURVE",
"249 1285 QCURVE SMOOTH",
"249 1382 OFFCURVE",
"360 1382 QCURVE SMOOTH",
"813 1382 LINE",
"1073 1159 LINE",
"1150 1212 LINE",
"1100 1470 OFFCURVE",
"880 1470 QCURVE SMOOTH",
"846 1470 LINE",
"736 1565 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"340 0 OFFCURVE",
"500 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"880 133 QCURVE SMOOTH",
"897 143 OFFCURVE",
"912 153 QCURVE",
"912 -50 LINE",
"1100 -50 LINE",
"1100 480 LINE",
"912 480 LINE",
"912 403 LINE SMOOTH",
"912 341 OFFCURVE",
"585 138 OFFCURVE",
"515 138 QCURVE SMOOTH",
"445 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 473 LINE",
"566 499 LINE SMOOTH",
"1100 575 OFFCURVE",
"1100 877 QCURVE SMOOTH",
"1100 1015 OFFCURVE",
"1000 1108 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"400 1200 OFFCURVE",
"300 1108 QCURVE SMOOTH",
"200 1015 OFFCURVE",
"200 897 QCURVE SMOOTH",
"200 863 LINE SMOOTH",
"200 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"488 719 LINE",
"488 863 LINE",
"388 863 OFFCURVE",
"388 897 QCURVE SMOOTH",
"388 969 OFFCURVE",
"447 1016 QCURVE SMOOTH",
"505 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"795 1062 OFFCURVE",
"854 1016 QCURVE SMOOTH",
"912 969 OFFCURVE",
"912 877 QCURVE SMOOTH",
"912 687 OFFCURVE",
"556 636 QCURVE SMOOTH",
"200 586 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1137 1463 OFFCURVE",
"944 1495 QCURVE",
"881 1570 LINE SMOOTH",
"854 1602 OFFCURVE",
"854 1645 QCURVE SMOOTH",
"854 1718 OFFCURVE",
"930 1823 QCURVE",
"796 1890 LINE",
"700 1775 OFFCURVE",
"700 1668 QCURVE SMOOTH",
"700 1582 OFFCURVE",
"761 1500 QCURVE",
"258 1500 LINE",
"118 1317 LINE SMOOTH",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"314 1204 LINE",
"304 1216 LINE SMOOTH",
"237 1292 OFFCURVE",
"237 1324 QCURVE SMOOTH",
"237 1332 OFFCURVE",
"242 1337 QCURVE SMOOTH",
"263 1362 LINE",
"875 1362 LINE",
"1054 1147 LINE",
"1180 1222 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01277 57 2 3 8 58 1 0 3 1 1 5 2 42 30 2 4 5 4 76 70 69 2 9 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01213 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01220 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 47 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 77 0 5 5 6 95 0 6 6 19 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 9 0 8 3 9 8 103 0 1 0 2 5 1 2 103 0 5 0 6 5 6 99 0 0 0 3 97 0 3 3 17 77 0 4 4 7 97 0 7 7 19 7 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01265 64 19 36 17 19 41 37 33 20 39 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1180 1222 LINE",
"1137 1513 OFFCURVE",
"944 1545 QCURVE",
"881 1620 LINE SMOOTH",
"854 1652 OFFCURVE",
"854 1695 QCURVE SMOOTH",
"854 1768 OFFCURVE",
"930 1823 QCURVE",
"746 1890 LINE",
"650 1775 OFFCURVE",
"650 1718 QCURVE SMOOTH",
"650 1632 OFFCURVE",
"711 1550 QCURVE",
"258 1550 LINE",
"118 1317 LINE",
"100 1292 OFFCURVE",
"100 1255 QCURVE SMOOTH",
"100 1214 OFFCURVE",
"172 1122 QCURVE SMOOTH",
"178 1114 LINE",
"364 1204 LINE",
"354 1216 LINE SMOOTH",
"287 1292 OFFCURVE",
"287 1324 QCURVE SMOOTH",
"287 1332 OFFCURVE",
"292 1337 QCURVE SMOOTH",
"313 1362 LINE",
"875 1362 LINE",
"1054 1147 LINE"
);
},
{
closed = 1;
nodes = (
"566 479 LINE",
"1150 575 OFFCURVE",
"1150 877 QCURVE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 897 QCURVE SMOOTH",
"150 863 LINE SMOOTH",
"150 719 OFFCURVE",
"338 719 QCURVE SMOOTH",
"538 719 LINE",
"538 863 LINE",
"438 863 OFFCURVE",
"438 897 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 877 QCURVE SMOOTH",
"862 717 OFFCURVE",
"556 656 QCURVE",
"150 586 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"520 0 QCURVE SMOOTH",
"660 0 OFFCURVE",
"862 153 QCURVE",
"862 -100 LINE",
"1150 -100 LINE",
"1150 480 LINE",
"862 480 LINE",
"862 403 LINE SMOOTH",
"862 341 OFFCURVE",
"585 188 OFFCURVE",
"520 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 453 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1230 1272 LINE",
"1183 1613 OFFCURVE",
"972 1645 QCURVE",
"903 1720 LINE SMOOTH",
"874 1752 OFFCURVE",
"874 1785 QCURVE SMOOTH",
"874 1818 OFFCURVE",
"957 1873 QCURVE",
"756 1940 LINE",
"651 1825 OFFCURVE",
"651 1779 QCURVE SMOOTH",
"651 1732 OFFCURVE",
"718 1650 QCURVE",
"223 1650 LINE",
"93 1419 LINE SMOOTH",
"50 1342 OFFCURVE",
"50 1305 QCURVE SMOOTH",
"50 1264 OFFCURVE",
"129 1172 QCURVE SMOOTH",
"135 1164 LINE",
"338 1254 LINE",
"328 1266 LINE",
"274 1342 OFFCURVE",
"274 1374 QCURVE SMOOTH",
"274 1382 OFFCURVE",
"280 1387 QCURVE",
"303 1412 LINE",
"897 1412 LINE",
"1092 1197 LINE"
);
},
{
closed = 1;
nodes = (
"488 359 QCURVE SMOOTH",
"488 484 LINE",
"1200 601 OFFCURVE",
"1200 891 QCURVE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 911 QCURVE SMOOTH",
"100 878 LINE SMOOTH",
"100 739 OFFCURVE",
"338 739 QCURVE SMOOTH",
"538 739 LINE",
"538 878 LINE",
"488 878 OFFCURVE",
"488 911 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 891 QCURVE SMOOTH",
"812 738 OFFCURVE",
"456 675 QCURVE SMOOTH",
"100 612 LINE",
"100 359 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"690 0 OFFCURVE",
"812 123 QCURVE",
"812 -100 LINE",
"1200 -100 LINE",
"1200 480 LINE",
"812 480 LINE",
"812 403 LINE SMOOTH",
"812 341 OFFCURVE",
"615 238 OFFCURVE",
"550 238 QCURVE SMOOTH",
"488 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17B3;
unicode = 17B3;
},
{
glyphname = uni17B4;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 1204;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 1204;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 1204;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 1204;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 1204;
}
);
note = uni17B4;
unicode = 17B4;
},
{
glyphname = uni17B5;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 1204;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 1204;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 1204;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 1204;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 1204;
}
);
note = uni17B5;
unicode = 17B5;
},
{
glyphname = uni17B6;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"68 1150 LINE SMOOTH",
"280 1150 OFFCURVE",
"280 937 QCURVE SMOOTH",
"280 0 LINE",
"338 0 LINE",
"338 937 LINE SMOOTH",
"338 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-300 1200 LINE",
"-300 1150 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"68 1112 LINE SMOOTH",
"250 1112 OFFCURVE",
"250 937 QCURVE SMOOTH",
"250 0 LINE",
"358 0 LINE",
"358 937 LINE SMOOTH",
"358 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-250 1200 LINE",
"-250 1112 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"68 1062 LINE SMOOTH",
"143 1062 OFFCURVE",
"200 1009 OFFCURVE",
"200 937 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 937 LINE SMOOTH",
"388 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE",
"-200 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 95 0 0 0 17 77 0 1 1 19 1 78 35 19 32 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 1012 LINE",
"18 1012 LINE SMOOTH",
"93 1012 OFFCURVE",
"150 959 OFFCURVE",
"150 887 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 937 LINE SMOOTH",
"438 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-200 1012 LINE",
"-32 1012 LINE SMOOTH",
"43 1012 OFFCURVE",
"100 959 OFFCURVE",
"100 887 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 937 LINE SMOOTH",
"488 1068 OFFCURVE",
"286 1250 OFFCURVE",
"68 1250 QCURVE SMOOTH",
"-200 1250 LINE"
);
}
);
width = 588;
}
);
note = uni17B6;
unicode = 17B6;
},
{
glyphname = uni17B7;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-920 1450 QCURVE SMOOTH",
"-250 1450 LINE",
"-250 1500 LINE",
"-370 1640 OFFCURVE",
"-651 1790 OFFCURVE",
"-770 1790 QCURVE SMOOTH",
"-1040 1790 OFFCURVE",
"-1040 1560 QCURVE SMOOTH",
"-1040 1450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-404 1600 OFFCURVE",
"-310 1500 QCURVE",
"-920 1500 LINE SMOOTH",
"-990 1500 OFFCURVE",
"-990 1560 QCURVE SMOOTH",
"-990 1740 OFFCURVE",
"-770 1740 QCURVE SMOOTH",
"-660 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-920 1420 QCURVE SMOOTH",
"-230 1420 LINE",
"-230 1508 LINE",
"-370 1650 OFFCURVE",
"-651 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-1050 1800 OFFCURVE",
"-1050 1560 QCURVE SMOOTH",
"-1050 1420 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-474 1610 OFFCURVE",
"-362 1508 QCURVE",
"-920 1508 LINE SMOOTH",
"-962 1508 OFFCURVE",
"-962 1560 QCURVE SMOOTH",
"-962 1712 OFFCURVE",
"-770 1712 QCURVE SMOOTH",
"-710 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1550 LINE",
"-310 1650 OFFCURVE",
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1610 OFFCURVE",
"-392 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE",
"-830 1670 OFFCURVE",
"-740 1670 QCURVE SMOOTH",
"-680 1670 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 12 11 15 14 11 17 12 17 36 34 5 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1000 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1550 LINE",
"-310 1650 OFFCURVE",
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1620 OFFCURVE",
"-442 1530 QCURVE",
"-850 1530 LINE",
"-850 1620 OFFCURVE",
"-740 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-989 1400 QCURVE SMOOTH",
"-100 1400 LINE",
"-100 1550 LINE",
"-222 1650 OFFCURVE",
"-378 1725 QCURVE SMOOTH",
"-534 1800 OFFCURVE",
"-700 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1620 OFFCURVE",
"-392 1530 QCURVE",
"-800 1530 LINE",
"-800 1620 OFFCURVE",
"-690 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B7;
unicode = 17B7;
},
{
glyphname = uni17B8;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-404 1600 OFFCURVE",
"-310 1500 QCURVE",
"-920 1500 LINE SMOOTH",
"-990 1500 OFFCURVE",
"-990 1560 QCURVE SMOOTH",
"-990 1740 OFFCURVE",
"-770 1740 QCURVE SMOOTH",
"-660 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-510 1715 QCURVE SMOOTH",
"-651 1790 OFFCURVE",
"-770 1790 QCURVE SMOOTH",
"-1040 1790 OFFCURVE",
"-1040 1560 QCURVE SMOOTH",
"-1040 1450 OFFCURVE",
"-920 1450 QCURVE SMOOTH",
"-250 1450 LINE",
"-250 1850 LINE",
"-300 1850 LINE",
"-300 1555 LINE",
"-399 1655 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-474 1610 OFFCURVE",
"-362 1508 QCURVE",
"-920 1508 LINE SMOOTH",
"-962 1508 OFFCURVE",
"-962 1560 QCURVE SMOOTH",
"-962 1712 OFFCURVE",
"-770 1712 QCURVE SMOOTH",
"-710 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-510 1725 QCURVE SMOOTH",
"-651 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-1050 1800 OFFCURVE",
"-1050 1560 QCURVE SMOOTH",
"-1050 1420 OFFCURVE",
"-920 1420 QCURVE SMOOTH",
"-230 1420 LINE",
"-230 1850 LINE",
"-318 1850 LINE",
"-318 1591 LINE",
"-414 1674 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1670 OFFCURVE",
"-740 1670 QCURVE SMOOTH",
"-680 1670 OFFCURVE",
"-504 1610 OFFCURVE",
"-392 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-338 1658 LINE",
"-391 1694 OFFCURVE",
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-338 1850 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 49 values pushed */\01218 1 0 1 1 76 5 1 4 3 4 133 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 96 0 2 0 2 80 7 7 7 19 7 19 35 35 34 16 6 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-740 1620 QCURVE SMOOTH",
"-554 1620 OFFCURVE",
"-442 1530 QCURVE",
"-850 1530 LINE",
"-850 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-388 1850 LINE",
"-388 1690 LINE",
"-418 1708 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-690 1620 QCURVE SMOOTH",
"-504 1620 OFFCURVE",
"-392 1530 QCURVE",
"-800 1530 LINE",
"-800 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-378 1725 QCURVE SMOOTH",
"-534 1800 OFFCURVE",
"-700 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-933 1400 QCURVE SMOOTH",
"-100 1400 LINE",
"-100 1850 LINE",
"-309 1850 LINE",
"-309 1690 LINE",
"-342 1708 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17B8;
unicode = 17B8;
},
{
glyphname = uni17B9;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-410 1830 QCURVE SMOOTH",
"-300 1830 OFFCURVE",
"-300 1720 QCURVE SMOOTH",
"-300 1635 OFFCURVE",
"-366 1616 QCURVE",
"-435 1675 OFFCURVE",
"-510 1715 QCURVE SMOOTH",
"-515 1718 OFFCURVE",
"-520 1720 QCURVE",
"-520 1830 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-569 1744 QCURVE",
"-676 1790 OFFCURVE",
"-770 1790 QCURVE SMOOTH",
"-1040 1790 OFFCURVE",
"-1040 1560 QCURVE SMOOTH",
"-1040 1450 OFFCURVE",
"-920 1450 QCURVE SMOOTH",
"-250 1450 LINE",
"-250 1500 LINE",
"-285 1541 OFFCURVE",
"-323 1577 QCURVE",
"-250 1612 OFFCURVE",
"-250 1720 QCURVE SMOOTH",
"-250 1880 OFFCURVE",
"-410 1880 QCURVE SMOOTH",
"-558 1880 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-404 1600 OFFCURVE",
"-310 1500 QCURVE",
"-920 1500 LINE SMOOTH",
"-990 1500 OFFCURVE",
"-990 1560 QCURVE SMOOTH",
"-990 1740 OFFCURVE",
"-770 1740 QCURVE SMOOTH",
"-660 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-410 1813 QCURVE SMOOTH",
"-317 1813 OFFCURVE",
"-317 1720 QCURVE SMOOTH",
"-317 1650 OFFCURVE",
"-370 1633 QCURVE",
"-436 1684 OFFCURVE",
"-503 1721 QCURVE",
"-503 1813 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-230 1720 QCURVE SMOOTH",
"-230 1900 OFFCURVE",
"-410 1900 QCURVE SMOOTH",
"-568 1900 OFFCURVE",
"-587 1761 QCURVE",
"-684 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-1050 1800 OFFCURVE",
"-1050 1560 QCURVE SMOOTH",
"-1050 1420 OFFCURVE",
"-920 1420 QCURVE SMOOTH",
"-230 1420 LINE",
"-230 1508 LINE",
"-262 1540 OFFCURVE",
"-294 1569 QCURVE",
"-230 1613 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-474 1610 OFFCURVE",
"-362 1508 QCURVE",
"-920 1508 LINE SMOOTH",
"-962 1508 OFFCURVE",
"-962 1560 QCURVE SMOOTH",
"-962 1712 OFFCURVE",
"-770 1712 QCURVE SMOOTH",
"-710 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1670 OFFCURVE",
"-740 1670 QCURVE SMOOTH",
"-680 1670 OFFCURVE",
"-504 1610 OFFCURVE",
"-392 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-226 1601 QCURVE SMOOTH",
"-200 1648 OFFCURVE",
"-200 1700 QCURVE SMOOTH",
"-200 1752 OFFCURVE",
"-255 1849 OFFCURVE",
"-351 1900 OFFCURVE",
"-402 1900 QCURVE SMOOTH",
"-453 1900 OFFCURVE",
"-549 1849 OFFCURVE",
"-576 1801 QCURVE SMOOTH",
"-582 1790 OFFCURVE",
"-587 1780 QCURVE",
"-662 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1550 LINE",
"-218 1567 OFFCURVE",
"-238 1583 QCURVE",
"-232 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1725 QCURVE SMOOTH",
"-465 1733 OFFCURVE",
"-480 1740 QCURVE",
"-479 1742 OFFCURVE",
"-478 1744 QCURVE SMOOTH",
"-466 1764 OFFCURVE",
"-424 1787 OFFCURVE",
"-402 1787 QCURVE SMOOTH",
"-379 1787 OFFCURVE",
"-338 1764 OFFCURVE",
"-314 1723 OFFCURVE",
"-314 1700 QCURVE SMOOTH",
"-314 1677 OFFCURVE",
"-325 1657 QCURVE SMOOTH",
"-327 1654 OFFCURVE",
"-329 1651 QCURVE",
"-386 1691 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 53 values pushed */\01242 18 2 1 5 9 7 2 0 1 2 76 0 4 0 5 1 4 5 105 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 95 0 2 0 2 79 46 37 35 37 34 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-226 1601 QCURVE SMOOTH",
"-200 1648 OFFCURVE",
"-200 1700 QCURVE SMOOTH",
"-200 1752 OFFCURVE",
"-255 1849 OFFCURVE",
"-351 1900 OFFCURVE",
"-402 1900 QCURVE SMOOTH",
"-453 1900 OFFCURVE",
"-549 1849 OFFCURVE",
"-576 1801 QCURVE SMOOTH",
"-582 1790 OFFCURVE",
"-587 1780 QCURVE",
"-662 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1550 LINE",
"-218 1567 OFFCURVE",
"-238 1583 QCURVE",
"-232 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1725 QCURVE SMOOTH",
"-465 1733 OFFCURVE",
"-480 1740 QCURVE",
"-479 1742 OFFCURVE",
"-478 1744 QCURVE SMOOTH",
"-466 1764 OFFCURVE",
"-424 1787 OFFCURVE",
"-402 1787 QCURVE SMOOTH",
"-379 1787 OFFCURVE",
"-338 1764 OFFCURVE",
"-314 1723 OFFCURVE",
"-314 1700 QCURVE SMOOTH",
"-314 1677 OFFCURVE",
"-325 1657 QCURVE SMOOTH",
"-327 1654 OFFCURVE",
"-329 1651 QCURVE",
"-386 1691 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1620 OFFCURVE",
"-442 1530 QCURVE",
"-850 1530 LINE",
"-850 1620 OFFCURVE",
"-740 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-129 1601 QCURVE SMOOTH",
"-100 1648 OFFCURVE",
"-100 1700 QCURVE SMOOTH",
"-100 1752 OFFCURVE",
"-161 1849 OFFCURVE",
"-268 1900 OFFCURVE",
"-324 1900 QCURVE SMOOTH",
"-381 1900 OFFCURVE",
"-488 1849 OFFCURVE",
"-518 1801 QCURVE SMOOTH",
"-524 1790 OFFCURVE",
"-530 1780 QCURVE",
"-613 1800 OFFCURVE",
"-700 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-933 1400 QCURVE SMOOTH",
"-100 1400 LINE",
"-100 1550 LINE",
"-120 1567 OFFCURVE",
"-142 1583 QCURVE",
"-136 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-380 1725 QCURVE SMOOTH",
"-395 1733 OFFCURVE",
"-410 1740 QCURVE",
"-409 1742 OFFCURVE",
"-408 1744 QCURVE SMOOTH",
"-396 1764 OFFCURVE",
"-354 1787 OFFCURVE",
"-332 1787 QCURVE SMOOTH",
"-309 1787 OFFCURVE",
"-268 1764 OFFCURVE",
"-244 1723 OFFCURVE",
"-244 1700 QCURVE SMOOTH",
"-244 1677 OFFCURVE",
"-255 1657 QCURVE SMOOTH",
"-257 1654 OFFCURVE",
"-259 1651 QCURVE",
"-316 1691 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1620 OFFCURVE",
"-392 1530 QCURVE",
"-800 1530 LINE",
"-800 1620 OFFCURVE",
"-690 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B9;
unicode = 17B9;
},
{
glyphname = uni17BA;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-404 1600 OFFCURVE",
"-310 1500 QCURVE",
"-920 1500 LINE SMOOTH",
"-990 1500 OFFCURVE",
"-990 1560 QCURVE SMOOTH",
"-990 1740 OFFCURVE",
"-770 1740 QCURVE SMOOTH",
"-660 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-530 1880 LINE",
"-530 1725 LINE",
"-659 1790 OFFCURVE",
"-770 1790 QCURVE SMOOTH",
"-1040 1790 OFFCURVE",
"-1040 1560 QCURVE SMOOTH",
"-1040 1450 OFFCURVE",
"-920 1450 QCURVE SMOOTH",
"-250 1450 LINE",
"-250 1850 LINE",
"-300 1850 LINE",
"-300 1555 LINE",
"-386 1641 OFFCURVE",
"-480 1698 QCURVE",
"-480 1880 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-474 1610 OFFCURVE",
"-362 1508 QCURVE",
"-920 1508 LINE SMOOTH",
"-962 1508 OFFCURVE",
"-962 1560 QCURVE SMOOTH",
"-962 1712 OFFCURVE",
"-770 1712 QCURVE SMOOTH",
"-710 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-548 1900 LINE",
"-548 1744 LINE",
"-667 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-1050 1800 OFFCURVE",
"-1050 1560 QCURVE SMOOTH",
"-1050 1420 OFFCURVE",
"-920 1420 QCURVE SMOOTH",
"-230 1420 LINE",
"-230 1850 LINE",
"-318 1850 LINE",
"-318 1591 LINE",
"-389 1652 OFFCURVE",
"-460 1696 QCURVE",
"-460 1900 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1670 OFFCURVE",
"-740 1670 QCURVE SMOOTH",
"-680 1670 OFFCURVE",
"-504 1610 OFFCURVE",
"-392 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-740 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-338 1850 LINE",
"-338 1658 LINE",
"-378 1684 OFFCURVE",
"-420 1708 QCURVE",
"-420 1900 LINE",
"-558 1900 LINE",
"-558 1771 LINE",
"-647 1800 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 54 values pushed */\01210 7 2 1 5 12 1 0 1 2 76 0 2 3 2 133 0 3 5 3 133 0 5 0 1 0 5 1 105 0 0 4 4 0 87 0 0 0 4 96 0 4 0 4 80 35 33 20 19 34 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-740 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-338 1850 LINE",
"-338 1658 LINE",
"-378 1684 OFFCURVE",
"-420 1708 QCURVE",
"-420 1900 LINE",
"-558 1900 LINE",
"-558 1771 LINE",
"-647 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1620 OFFCURVE",
"-442 1530 QCURVE",
"-850 1530 LINE",
"-850 1620 OFFCURVE",
"-740 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-700 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-933 1400 QCURVE SMOOTH",
"-100 1400 LINE",
"-100 1850 LINE",
"-253 1850 LINE",
"-253 1658 LINE",
"-298 1684 OFFCURVE",
"-344 1708 QCURVE",
"-344 1900 LINE",
"-498 1900 LINE",
"-498 1771 LINE",
"-597 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1620 OFFCURVE",
"-392 1530 QCURVE",
"-800 1530 LINE",
"-800 1620 OFFCURVE",
"-690 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17BA;
unicode = 17BA;
},
{
glyphname = uni17BB;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-433 -70 LINE",
"-433 -122 LINE",
"-308 -122 LINE",
"-308 -480 LINE",
"-250 -480 LINE",
"-250 -70 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-463 -70 LINE",
"-463 -160 LINE",
"-338 -160 LINE",
"-338 -500 LINE",
"-230 -500 LINE",
"-230 -70 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-388 -500 LINE",
"-200 -500 LINE",
"-200 -70 LINE",
"-493 -70 LINE",
"-493 -170 LINE",
"-388 -170 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 33 values pushed */\0120 1 2 1 134 0 0 2 2 0 87 0 0 0 2 95 3 1 2 0 2 79 0 0 0 5 0 5 17 17 4 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-523 -170 LINE",
"-438 -170 LINE",
"-438 -500 LINE",
"-150 -500 LINE",
"-150 -70 LINE",
"-523 -70 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-573 -170 LINE",
"-488 -170 LINE",
"-488 -500 LINE",
"-100 -500 LINE",
"-100 -70 LINE",
"-573 -70 LINE"
);
}
);
width = 0;
}
);
note = uni17BB;
unicode = 17BB;
},
{
glyphname = uni17BC;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-485 -480 QCURVE SMOOTH",
"-250 -480 OFFCURVE",
"-250 -290 QCURVE SMOOTH",
"-250 -70 LINE",
"-308 -70 LINE",
"-308 -290 LINE SMOOTH",
"-308 -430 OFFCURVE",
"-485 -430 QCURVE SMOOTH",
"-662 -430 OFFCURVE",
"-662 -290 QCURVE SMOOTH",
"-662 -70 LINE",
"-720 -70 LINE",
"-720 -290 LINE SMOOTH",
"-720 -480 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-500 -500 QCURVE SMOOTH",
"-230 -500 OFFCURVE",
"-230 -290 QCURVE SMOOTH",
"-230 -70 LINE",
"-338 -70 LINE",
"-338 -290 LINE SMOOTH",
"-338 -410 OFFCURVE",
"-500 -410 QCURVE SMOOTH",
"-662 -410 OFFCURVE",
"-662 -290 QCURVE SMOOTH",
"-662 -70 LINE",
"-770 -70 LINE",
"-770 -290 LINE SMOOTH",
"-770 -500 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-500 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -290 QCURVE SMOOTH",
"-200 -70 LINE",
"-378 -70 LINE",
"-378 -290 LINE SMOOTH",
"-378 -380 OFFCURVE",
"-500 -380 QCURVE SMOOTH",
"-622 -380 OFFCURVE",
"-622 -290 QCURVE SMOOTH",
"-622 -70 LINE",
"-800 -70 LINE",
"-800 -290 LINE SMOOTH",
"-800 -500 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 29 values pushed */\0122 1 0 1 0 133 0 1 3 3 1 89 0 1 1 3 98 0 3 1 3 82 34 18 34 17 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-790 -500 OFFCURVE",
"-470 -500 QCURVE SMOOTH",
"-150 -500 OFFCURVE",
"-150 -290 QCURVE SMOOTH",
"-150 -70 LINE",
"-378 -70 LINE",
"-378 -290 LINE SMOOTH",
"-378 -380 OFFCURVE",
"-470 -380 QCURVE SMOOTH",
"-562 -380 OFFCURVE",
"-562 -290 QCURVE SMOOTH",
"-562 -70 LINE",
"-790 -70 LINE",
"-790 -290 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-840 -500 OFFCURVE",
"-470 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -290 QCURVE SMOOTH",
"-100 -70 LINE",
"-378 -70 LINE",
"-378 -290 LINE SMOOTH",
"-378 -350 OFFCURVE",
"-470 -350 QCURVE SMOOTH",
"-562 -350 OFFCURVE",
"-562 -290 QCURVE SMOOTH",
"-562 -70 LINE",
"-840 -70 LINE",
"-840 -290 LINE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17BC;
unicode = 17BC;
},
{
glyphname = uni17BD;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-250 -480 LINE",
"-250 -70 LINE",
"-308 -70 LINE",
"-308 -410 LINE",
"-510 -242 LINE",
"-712 -410 LINE",
"-712 -70 LINE",
"-770 -70 LINE",
"-770 -480 LINE",
"-720 -480 LINE",
"-510 -303 LINE",
"-300 -480 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-330 -500 LINE",
"-230 -500 LINE",
"-230 -70 LINE",
"-338 -70 LINE",
"-338 -390 LINE",
"-525 -230 LINE",
"-712 -390 LINE",
"-712 -70 LINE",
"-820 -70 LINE",
"-820 -500 LINE",
"-710 -500 LINE",
"-525 -340 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-400 -500 LINE",
"-200 -500 LINE",
"-200 -70 LINE",
"-378 -70 LINE",
"-378 -360 LINE",
"-525 -230 LINE",
"-672 -360 LINE",
"-672 -70 LINE",
"-850 -70 LINE",
"-850 -500 LINE",
"-650 -500 LINE",
"-525 -370 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\01211 6 5 4 4 0 1 1 76 2 1 1 0 0 1 87 2 1 1 1 0 95 3 1 0 1 0 79 17 20 17 16 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-612 -333 LINE",
"-612 -70 LINE",
"-840 -70 LINE",
"-840 -500 LINE",
"-620 -500 LINE",
"-495 -370 LINE",
"-370 -500 LINE",
"-150 -500 LINE",
"-150 -70 LINE",
"-378 -70 LINE",
"-378 -333 LINE",
"-495 -230 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-612 -303 LINE",
"-612 -70 LINE",
"-890 -70 LINE",
"-890 -500 LINE",
"-620 -500 LINE",
"-495 -370 LINE",
"-370 -500 LINE",
"-100 -500 LINE",
"-100 -70 LINE",
"-378 -70 LINE",
"-378 -303 LINE",
"-495 -200 LINE"
);
}
);
width = 0;
}
);
note = uni17BD;
unicode = 17BD;
},
{
glyphname = uni17BE;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17B8;
transform = "{1, 0, 0, 1, -10, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17B8;
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1670 OFFCURVE",
"-740 1670 QCURVE SMOOTH",
"-680 1670 OFFCURVE",
"-504 1610 OFFCURVE",
"-392 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-338 1658 LINE",
"-391 1694 OFFCURVE",
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-338 1850 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01218 1 0 1 1 76 5 1 4 3 4 133 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 96 0 2 0 2 80 7 7 7 19 7 19 35 35 34 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-740 1620 QCURVE SMOOTH",
"-554 1620 OFFCURVE",
"-442 1530 QCURVE",
"-850 1530 LINE",
"-850 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1725 QCURVE SMOOTH",
"-591 1800 OFFCURVE",
"-740 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-200 1400 LINE",
"-200 1850 LINE",
"-388 1850 LINE",
"-388 1690 LINE",
"-418 1708 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-690 1620 QCURVE SMOOTH",
"-504 1620 OFFCURVE",
"-392 1530 QCURVE",
"-800 1530 LINE",
"-800 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-378 1725 QCURVE SMOOTH",
"-534 1800 OFFCURVE",
"-700 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-933 1400 QCURVE SMOOTH",
"-100 1400 LINE",
"-100 1850 LINE",
"-309 1850 LINE",
"-309 1690 LINE",
"-342 1708 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17BE;
unicode = 17BE;
},
{
glyphname = uni17BF;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"116 1600 OFFCURVE",
"210 1500 QCURVE",
"-320 1500 LINE SMOOTH",
"-390 1500 OFFCURVE",
"-390 1560 QCURVE SMOOTH",
"-390 1740 OFFCURVE",
"-230 1740 QCURVE SMOOTH",
"-140 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"220 1850 LINE",
"220 1555 LINE",
"134 1641 OFFCURVE",
"40 1698 QCURVE",
"40 1880 LINE",
"-10 1880 LINE",
"-10 1725 LINE",
"-139 1790 OFFCURVE",
"-230 1790 QCURVE SMOOTH",
"-440 1790 OFFCURVE",
"-440 1560 QCURVE SMOOTH",
"-440 1450 OFFCURVE",
"-320 1450 QCURVE SMOOTH",
"212 1450 LINE",
"280 1413 OFFCURVE",
"280 1300 QCURVE SMOOTH",
"280 -260 LINE SMOOTH",
"280 -430 OFFCURVE",
"15 -430 QCURVE SMOOTH",
"-250 -430 OFFCURVE",
"-250 -260 QCURVE SMOOTH",
"-250 -120 LINE",
"-170 -120 LINE",
"-170 -70 LINE",
"-308 -70 LINE",
"-308 -260 LINE SMOOTH",
"-308 -480 OFFCURVE",
"15 -480 QCURVE SMOOTH",
"338 -480 OFFCURVE",
"338 -260 QCURVE SMOOTH",
"338 1300 LINE SMOOTH",
"338 1403 OFFCURVE",
"270 1465 QCURVE",
"270 1850 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-4 1610 OFFCURVE",
"108 1508 QCURVE",
"-370 1508 LINE SMOOTH",
"-412 1508 OFFCURVE",
"-412 1560 QCURVE SMOOTH",
"-412 1712 OFFCURVE",
"-270 1712 QCURVE SMOOTH",
"-240 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"358 1404 OFFCURVE",
"240 1478 QCURVE",
"240 1850 LINE",
"152 1850 LINE",
"152 1591 LINE",
"81 1652 OFFCURVE",
"10 1696 QCURVE",
"10 1900 LINE",
"-78 1900 LINE",
"-78 1744 LINE",
"-197 1800 OFFCURVE",
"-270 1800 QCURVE SMOOTH",
"-500 1800 OFFCURVE",
"-500 1560 QCURVE SMOOTH",
"-500 1420 OFFCURVE",
"-370 1420 QCURVE SMOOTH",
"172 1420 LINE",
"250 1363 OFFCURVE",
"250 1240 QCURVE SMOOTH",
"250 -260 LINE SMOOTH",
"250 -410 OFFCURVE",
"10 -410 QCURVE SMOOTH",
"-230 -410 OFFCURVE",
"-230 -260 QCURVE SMOOTH",
"-230 -150 LINE",
"-150 -150 LINE",
"-150 -70 LINE",
"-338 -70 LINE",
"-338 -260 LINE SMOOTH",
"-338 -500 OFFCURVE",
"10 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -260 QCURVE SMOOTH",
"358 1240 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-350 1670 OFFCURVE",
"-310 1670 QCURVE SMOOTH",
"-280 1670 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-370 1530 LINE",
"-370 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-410 1800 OFFCURVE",
"-520 1650 OFFCURVE",
"-520 1550 QCURVE SMOOTH",
"-520 1400 OFFCURVE",
"-420 1400 QCURVE SMOOTH",
"0 1400 LINE SMOOTH",
"200 1400 OFFCURVE",
"200 1210 QCURVE SMOOTH",
"200 -260 LINE SMOOTH",
"200 -360 OFFCURVE",
"0 -360 QCURVE SMOOTH",
"-200 -360 OFFCURVE",
"-200 -260 QCURVE SMOOTH",
"-200 -160 LINE",
"-150 -160 LINE",
"-150 -50 LINE",
"-388 -50 LINE",
"-388 -260 LINE SMOOTH",
"-388 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"388 -500 OFFCURVE",
"388 -260 QCURVE SMOOTH",
"388 1210 LINE SMOOTH",
"388 1433 OFFCURVE",
"200 1500 QCURVE",
"200 1850 LINE",
"62 1850 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01238 35 2 1 7 40 1 0 1 8 1 6 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\0120 8 9 8 133 10 1 9 7 9 133 0 7 0 1 0 7 1 105 0 0 0 6 3 0 6 104 0 3 0 4 5 3 4 103 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 48 values pushed */\0120 8 9 8 133 10 1 9 7 9 133 0 7 0 1 0 7 1 105 0 0 0 6 3 0 6 104 0 4 4 3 95 0 3 3 18 77 0 5 5 2 97 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0127 7 7 41 7 41 18 35 51 34 17 18 39 34 16 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-250 1620 OFFCURVE",
"-210 1620 QCURVE SMOOTH",
"-180 1620 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-270 1530 LINE",
"-270 1560 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"62 1850 LINE",
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-410 1800 OFFCURVE",
"-520 1650 OFFCURVE",
"-520 1550 QCURVE SMOOTH",
"-520 1350 OFFCURVE",
"-420 1350 QCURVE SMOOTH",
"0 1350 LINE SMOOTH",
"150 1350 OFFCURVE",
"150 1210 QCURVE SMOOTH",
"150 -260 LINE SMOOTH",
"150 -330 OFFCURVE",
"0 -330 QCURVE SMOOTH",
"-150 -330 OFFCURVE",
"-150 -260 QCURVE SMOOTH",
"-150 -160 LINE",
"-100 -160 LINE",
"-100 -50 LINE",
"-438 -50 LINE",
"-438 -260 LINE SMOOTH",
"-438 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -260 QCURVE SMOOTH",
"438 1210 LINE SMOOTH",
"438 1383 OFFCURVE",
"200 1550 QCURVE",
"200 1850 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-250 1620 OFFCURVE",
"-210 1620 QCURVE SMOOTH",
"-180 1620 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-270 1530 LINE",
"-270 1560 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"62 1850 LINE",
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-470 1800 OFFCURVE",
"-580 1650 OFFCURVE",
"-580 1550 QCURVE SMOOTH",
"-580 1350 OFFCURVE",
"-480 1350 QCURVE SMOOTH",
"0 1350 LINE SMOOTH",
"100 1350 OFFCURVE",
"100 1210 QCURVE SMOOTH",
"100 -260 LINE SMOOTH",
"100 -330 OFFCURVE",
"0 -330 QCURVE SMOOTH",
"-100 -330 OFFCURVE",
"-100 -260 QCURVE SMOOTH",
"-100 -160 LINE",
"-50 -160 LINE",
"-50 -50 LINE",
"-488 -50 LINE",
"-488 -260 LINE SMOOTH",
"-488 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -260 QCURVE SMOOTH",
"488 1210 LINE SMOOTH",
"488 1383 OFFCURVE",
"250 1550 QCURVE",
"250 1850 LINE"
);
}
);
width = 588;
}
);
note = uni17BF;
unicode = 17BF;
},
{
glyphname = uni17C0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"280 -430 OFFCURVE",
"15 -430 QCURVE SMOOTH",
"-250 -430 OFFCURVE",
"-250 -260 QCURVE SMOOTH",
"-250 -120 LINE",
"-170 -120 LINE",
"-170 -70 LINE",
"-308 -70 LINE",
"-308 -260 LINE SMOOTH",
"-308 -480 OFFCURVE",
"15 -480 QCURVE SMOOTH",
"338 -480 OFFCURVE",
"338 -260 QCURVE SMOOTH",
"338 1250 LINE SMOOTH",
"338 1600 OFFCURVE",
"0 1600 QCURVE SMOOTH",
"-165 1600 OFFCURVE",
"-250 1502 QCURVE",
"-250 1900 LINE",
"-308 1900 LINE",
"-308 1400 LINE",
"-260 1400 LINE",
"-180 1550 OFFCURVE",
"0 1550 QCURVE SMOOTH",
"280 1550 OFFCURVE",
"280 1250 QCURVE SMOOTH",
"280 -260 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 -410 OFFCURVE",
"10 -410 QCURVE SMOOTH",
"-230 -410 OFFCURVE",
"-230 -260 QCURVE SMOOTH",
"-230 -150 LINE",
"-150 -150 LINE",
"-150 -70 LINE",
"-338 -70 LINE",
"-338 -260 LINE SMOOTH",
"-338 -500 OFFCURVE",
"10 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -260 QCURVE SMOOTH",
"358 1250 LINE SMOOTH",
"358 1610 OFFCURVE",
"0 1610 QCURVE SMOOTH",
"-145 1610 OFFCURVE",
"-230 1532 QCURVE",
"-230 1900 LINE",
"-338 1900 LINE",
"-338 1400 LINE",
"-260 1400 LINE",
"-180 1530 OFFCURVE",
"0 1530 QCURVE SMOOTH",
"250 1530 OFFCURVE",
"250 1250 QCURVE SMOOTH",
"250 -260 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-200 1480 OFFCURVE",
"0 1480 QCURVE SMOOTH",
"200 1480 OFFCURVE",
"200 1250 QCURVE SMOOTH",
"200 -260 LINE SMOOTH",
"200 -360 OFFCURVE",
"0 -360 QCURVE SMOOTH",
"-200 -360 OFFCURVE",
"-200 -260 QCURVE SMOOTH",
"-200 -160 LINE",
"-150 -160 LINE",
"-150 -50 LINE",
"-388 -50 LINE",
"-388 -260 LINE SMOOTH",
"-388 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"388 -500 OFFCURVE",
"388 -260 QCURVE SMOOTH",
"388 1250 LINE SMOOTH",
"388 1610 OFFCURVE",
"0 1610 QCURVE SMOOTH",
"-105 1610 OFFCURVE",
"-200 1552 QCURVE",
"-200 1900 LINE",
"-388 1900 LINE",
"-388 1400 LINE",
"-260 1400 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0123 1 6 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 1 0 6 7 1 6 105 0 0 8 1 7 3 0 7 103 0 3 0 4 5 3 4 103 0 5 5 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 1 0 6 7 1 6 105 0 0 8 1 7 3 0 7 103 0 4 4 3 95 0 3 3 18 77 0 5 5 2 97 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 26 0 26 35 34 17 18 35 34 17 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 -330 OFFCURVE",
"0 -330 QCURVE SMOOTH",
"-150 -330 OFFCURVE",
"-150 -260 QCURVE SMOOTH",
"-150 -160 LINE",
"-100 -160 LINE",
"-100 -50 LINE",
"-438 -50 LINE",
"-438 -260 LINE SMOOTH",
"-438 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -260 QCURVE SMOOTH",
"438 1250 LINE SMOOTH",
"438 1610 OFFCURVE",
"70 1610 QCURVE SMOOTH",
"-75 1610 OFFCURVE",
"-150 1552 QCURVE",
"-150 1900 LINE",
"-438 1900 LINE",
"-438 1400 LINE",
"-210 1400 LINE",
"-150 1430 OFFCURVE",
"0 1430 QCURVE SMOOTH",
"150 1430 OFFCURVE",
"150 1250 QCURVE SMOOTH",
"150 -260 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 -330 OFFCURVE",
"0 -330 QCURVE SMOOTH",
"-100 -330 OFFCURVE",
"-100 -260 QCURVE SMOOTH",
"-100 -160 LINE",
"-50 -160 LINE",
"-50 -50 LINE",
"-488 -50 LINE",
"-488 -260 LINE SMOOTH",
"-488 -500 OFFCURVE",
"0 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -260 QCURVE SMOOTH",
"488 1250 LINE SMOOTH",
"488 1660 OFFCURVE",
"70 1660 QCURVE SMOOTH",
"-25 1660 OFFCURVE",
"-100 1602 QCURVE",
"-100 1900 LINE",
"-488 1900 LINE",
"-488 1400 LINE",
"-160 1400 LINE",
"-100 1430 OFFCURVE",
"0 1430 QCURVE SMOOTH",
"100 1430 OFFCURVE",
"100 1250 QCURVE SMOOTH",
"100 -260 LINE SMOOTH"
);
}
);
width = 588;
}
);
note = uni17C0;
unicode = 17C0;
},
{
glyphname = uni17C1;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"142 1048 LINE",
"220 1150 LINE",
"428 1150 LINE",
"428 1200 LINE",
"200 1200 LINE",
"89 1069 OFFCURVE",
"89 1045 QCURVE SMOOTH",
"89 1020 OFFCURVE",
"134 967 QCURVE SMOOTH",
"270 806 LINE",
"270 135 LINE SMOOTH",
"270 0 OFFCURVE",
"433 0 QCURVE SMOOTH",
"479 0 LINE",
"479 50 LINE",
"433 50 LINE SMOOTH",
"328 50 OFFCURVE",
"328 135 QCURVE SMOOTH",
"328 830 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"443 0 QCURVE SMOOTH",
"509 0 LINE",
"509 88 LINE",
"443 88 LINE SMOOTH",
"358 88 OFFCURVE",
"358 135 QCURVE SMOOTH",
"358 840 LINE",
"182 1048 LINE",
"220 1112 LINE",
"428 1112 LINE",
"428 1200 LINE",
"180 1200 LINE",
"79 1059 OFFCURVE",
"79 1035 QCURVE SMOOTH",
"79 1010 OFFCURVE",
"250 806 QCURVE",
"250 135 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 102 LINE SMOOTH",
"200 0 OFFCURVE",
"350 0 QCURVE SMOOTH",
"548 0 LINE",
"548 138 LINE",
"463 138 LINE SMOOTH",
"388 138 OFFCURVE",
"388 185 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0129 0 2 0 3 1 76 0 3 3 2 95 0 2 2 17 77 0 0 0 1 95 0 1 1 19 1 78 17 26 33 34 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 102 LINE SMOOTH",
"150 0 OFFCURVE",
"300 0 QCURVE SMOOTH",
"548 0 LINE",
"548 188 LINE",
"483 188 LINE SMOOTH",
"438 188 OFFCURVE",
"438 235 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"170 1250 LINE",
"39 1057 LINE SMOOTH",
"20 1029 OFFCURVE",
"20 1005 QCURVE SMOOTH",
"20 980 OFFCURVE",
"40 946 QCURVE SMOOTH",
"100 843 LINE",
"100 102 LINE SMOOTH",
"100 0 OFFCURVE",
"250 0 QCURVE SMOOTH",
"568 0 LINE",
"568 238 LINE",
"488 238 OFFCURVE",
"488 285 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17C1;
unicode = 17C1;
},
{
glyphname = uni17C2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"251 1300 QCURVE SMOOTH",
"540 1300 OFFCURVE",
"540 1750 QCURVE",
"492 1750 LINE",
"492 1350 OFFCURVE",
"251 1350 QCURVE SMOOTH",
"92 1350 OFFCURVE",
"92 1490 QCURVE SMOOTH",
"92 1618 OFFCURVE",
"257 1618 QCURVE",
"257 1668 LINE",
"42 1668 OFFCURVE",
"42 1490 QCURVE SMOOTH",
"42 1300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"142 1048 LINE",
"220 1150 LINE",
"428 1150 LINE",
"428 1200 LINE",
"200 1200 LINE",
"89 1069 OFFCURVE",
"89 1045 QCURVE SMOOTH",
"89 1020 OFFCURVE",
"134 967 QCURVE SMOOTH",
"270 806 LINE",
"270 135 LINE SMOOTH",
"270 0 OFFCURVE",
"433 0 QCURVE SMOOTH",
"479 0 LINE",
"479 50 LINE",
"433 50 LINE SMOOTH",
"328 50 OFFCURVE",
"328 135 QCURVE SMOOTH",
"328 830 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"251 1300 QCURVE SMOOTH",
"560 1300 OFFCURVE",
"560 1750 QCURVE",
"472 1750 LINE",
"472 1388 OFFCURVE",
"251 1388 QCURVE SMOOTH",
"110 1388 OFFCURVE",
"110 1490 QCURVE SMOOTH",
"110 1590 OFFCURVE",
"257 1590 QCURVE",
"257 1678 LINE",
"22 1678 OFFCURVE",
"22 1490 QCURVE SMOOTH",
"22 1300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"443 0 QCURVE SMOOTH",
"509 0 LINE",
"509 88 LINE",
"443 88 LINE SMOOTH",
"358 88 OFFCURVE",
"358 135 QCURVE SMOOTH",
"358 840 LINE",
"182 1048 LINE",
"220 1112 LINE",
"428 1112 LINE",
"428 1200 LINE",
"180 1200 LINE",
"79 1059 OFFCURVE",
"79 1035 QCURVE SMOOTH",
"79 1010 OFFCURVE",
"250 806 QCURVE",
"250 135 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"261 1300 QCURVE SMOOTH",
"580 1300 OFFCURVE",
"580 1750 QCURVE",
"430 1750 LINE",
"430 1430 OFFCURVE",
"261 1430 QCURVE SMOOTH",
"150 1430 OFFCURVE",
"150 1490 QCURVE SMOOTH",
"150 1540 OFFCURVE",
"267 1540 QCURVE",
"267 1670 LINE",
"0 1670 OFFCURVE",
"0 1490 QCURVE SMOOTH",
"0 1300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 102 LINE SMOOTH",
"200 0 OFFCURVE",
"350 0 QCURVE SMOOTH",
"548 0 LINE",
"548 138 LINE",
"463 138 LINE SMOOTH",
"388 138 OFFCURVE",
"388 185 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01223 14 2 5 8 1 76 0 3 0 3 133 0 0 0 1 2 0 1 105 0 2 0 4 7 2 4 106 0 8 8 7 95 0 7 7 17 77 0 5 5 6 95 0 6 6 19 6 78 17 26 33 35 33 17 34 17 17 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"261 1300 QCURVE SMOOTH",
"610 1300 OFFCURVE",
"610 1750 QCURVE",
"410 1750 LINE",
"410 1460 OFFCURVE",
"311 1460 QCURVE SMOOTH",
"250 1460 OFFCURVE",
"250 1490 QCURVE SMOOTH",
"250 1540 OFFCURVE",
"297 1540 QCURVE",
"297 1670 LINE",
"0 1670 OFFCURVE",
"0 1490 QCURVE SMOOTH",
"0 1300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 102 LINE SMOOTH",
"150 0 OFFCURVE",
"300 0 QCURVE SMOOTH",
"548 0 LINE",
"548 188 LINE",
"483 188 LINE SMOOTH",
"438 188 OFFCURVE",
"438 235 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"261 1300 QCURVE SMOOTH",
"660 1300 OFFCURVE",
"660 1800 QCURVE",
"360 1800 LINE",
"360 1510 OFFCURVE",
"311 1510 QCURVE SMOOTH",
"250 1510 OFFCURVE",
"250 1540 QCURVE SMOOTH",
"250 1590 OFFCURVE",
"297 1590 QCURVE",
"297 1720 LINE",
"0 1720 OFFCURVE",
"0 1540 QCURVE SMOOTH",
"0 1300 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"170 1250 LINE",
"39 1057 LINE SMOOTH",
"20 1029 OFFCURVE",
"20 1005 QCURVE SMOOTH",
"20 980 OFFCURVE",
"40 946 QCURVE SMOOTH",
"100 843 LINE",
"100 102 LINE SMOOTH",
"100 0 OFFCURVE",
"250 0 QCURVE SMOOTH",
"568 0 LINE",
"568 238 LINE",
"488 238 OFFCURVE",
"488 285 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17C2;
unicode = 17C2;
},
{
glyphname = uni17C3;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"300 1310 LINE SMOOTH",
"500 1310 OFFCURVE",
"500 1505 QCURVE SMOOTH",
"500 1700 OFFCURVE",
"310 1700 QCURVE SMOOTH",
"187 1700 OFFCURVE",
"150 1630 QCURVE",
"150 1750 LINE SMOOTH",
"150 1880 OFFCURVE",
"20 1880 QCURVE",
"20 1830 LINE",
"100 1830 OFFCURVE",
"100 1750 QCURVE SMOOTH",
"100 1530 LINE",
"150 1530 LINE",
"150 1650 OFFCURVE",
"310 1650 QCURVE SMOOTH",
"450 1650 OFFCURVE",
"450 1505 QCURVE SMOOTH",
"450 1360 OFFCURVE",
"300 1360 QCURVE SMOOTH",
"70 1360 LINE",
"70 1310 LINE"
);
},
{
closed = 1;
nodes = (
"142 1048 LINE",
"220 1150 LINE",
"428 1150 LINE",
"428 1200 LINE",
"200 1200 LINE",
"89 1069 OFFCURVE",
"89 1045 QCURVE SMOOTH",
"89 1020 OFFCURVE",
"134 967 QCURVE SMOOTH",
"270 806 LINE",
"270 135 LINE SMOOTH",
"270 0 OFFCURVE",
"433 0 QCURVE SMOOTH",
"479 0 LINE",
"479 50 LINE",
"433 50 LINE SMOOTH",
"328 50 OFFCURVE",
"328 135 QCURVE SMOOTH",
"328 830 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"300 1300 LINE SMOOTH",
"520 1300 OFFCURVE",
"520 1505 QCURVE SMOOTH",
"520 1700 OFFCURVE",
"310 1700 QCURVE SMOOTH",
"205 1700 OFFCURVE",
"168 1650 QCURVE",
"168 1750 LINE SMOOTH",
"168 1888 OFFCURVE",
"0 1888 QCURVE",
"0 1800 LINE",
"80 1800 OFFCURVE",
"80 1750 QCURVE SMOOTH",
"80 1530 LINE",
"168 1530 LINE",
"168 1612 OFFCURVE",
"310 1612 QCURVE SMOOTH",
"432 1612 OFFCURVE",
"432 1505 QCURVE SMOOTH",
"432 1388 OFFCURVE",
"300 1388 QCURVE SMOOTH",
"50 1388 LINE",
"50 1300 LINE"
);
},
{
closed = 1;
nodes = (
"250 0 OFFCURVE",
"443 0 QCURVE SMOOTH",
"509 0 LINE",
"509 88 LINE",
"443 88 LINE SMOOTH",
"358 88 OFFCURVE",
"358 135 QCURVE SMOOTH",
"358 840 LINE",
"182 1048 LINE",
"220 1112 LINE",
"428 1112 LINE",
"428 1200 LINE",
"180 1200 LINE",
"79 1059 OFFCURVE",
"79 1035 QCURVE SMOOTH",
"79 1010 OFFCURVE",
"250 806 QCURVE",
"250 135 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"300 1300 LINE SMOOTH",
"540 1300 OFFCURVE",
"540 1505 QCURVE SMOOTH",
"540 1700 OFFCURVE",
"310 1700 QCURVE SMOOTH",
"255 1700 OFFCURVE",
"200 1670 QCURVE",
"200 1750 LINE SMOOTH",
"200 1900 OFFCURVE",
"0 1900 QCURVE",
"0 1750 LINE",
"50 1750 OFFCURVE",
"50 1700 QCURVE SMOOTH",
"50 1530 LINE",
"200 1530 LINE",
"200 1580 OFFCURVE",
"310 1580 QCURVE SMOOTH",
"390 1580 OFFCURVE",
"390 1505 QCURVE SMOOTH",
"390 1430 OFFCURVE",
"300 1430 QCURVE SMOOTH",
"50 1430 LINE",
"50 1300 LINE"
);
},
{
closed = 1;
nodes = (
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 102 LINE SMOOTH",
"200 0 OFFCURVE",
"350 0 QCURVE SMOOTH",
"548 0 LINE",
"548 138 LINE",
"463 138 LINE SMOOTH",
"388 138 OFFCURVE",
"388 185 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01215 1 1 5 32 23 2 7 10 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 52 values pushed */\0120 2 1 0 3 2 114 0 4 0 3 5 4 3 105 0 5 0 1 2 5 1 105 0 0 0 6 9 0 6 103 0 10 10 9 95 0 9 9 17 77 0 7 7 8 95 0 8 8 19 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 53 values pushed */\0120 2 1 0 1 2 0 128 0 4 0 3 5 4 3 105 0 5 0 1 2 5 1 105 0 0 0 6 9 0 6 103 0 10 10 9 95 0 9 9 17 77 0 7 7 8 95 0 8 8 19 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01243 42 41 40 33 35 34 35 17 18 17 34 32 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"20 1460 LINE",
"20 1300 LINE",
"320 1300 LINE SMOOTH",
"590 1300 OFFCURVE",
"590 1505 QCURVE SMOOTH",
"590 1700 OFFCURVE",
"360 1700 QCURVE SMOOTH",
"305 1700 OFFCURVE",
"250 1670 QCURVE",
"250 1750 LINE SMOOTH",
"250 1900 OFFCURVE",
"-30 1900 QCURVE",
"-30 1750 LINE",
"20 1750 OFFCURVE",
"20 1700 QCURVE SMOOTH",
"20 1530 LINE",
"250 1530 LINE",
"250 1560 OFFCURVE",
"315 1560 QCURVE SMOOTH",
"380 1560 OFFCURVE",
"380 1505 QCURVE SMOOTH",
"380 1460 OFFCURVE",
"320 1460 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"220 1012 LINE",
"498 1012 LINE",
"498 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 102 LINE SMOOTH",
"150 0 OFFCURVE",
"300 0 QCURVE SMOOTH",
"548 0 LINE",
"548 188 LINE",
"483 188 LINE SMOOTH",
"438 188 OFFCURVE",
"438 235 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"0 1460 LINE",
"0 1300 LINE",
"300 1300 LINE SMOOTH",
"620 1300 OFFCURVE",
"620 1505 QCURVE SMOOTH",
"620 1700 OFFCURVE",
"390 1700 QCURVE SMOOTH",
"335 1700 OFFCURVE",
"280 1670 QCURVE",
"280 1750 LINE SMOOTH",
"280 1900 OFFCURVE",
"-50 1900 QCURVE",
"-50 1750 LINE",
"0 1750 OFFCURVE",
"0 1700 QCURVE SMOOTH",
"0 1530 LINE",
"280 1530 LINE",
"280 1560 OFFCURVE",
"320 1560 QCURVE SMOOTH",
"360 1560 OFFCURVE",
"360 1505 QCURVE SMOOTH",
"360 1460 OFFCURVE",
"300 1460 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"170 1250 LINE",
"39 1057 LINE SMOOTH",
"20 1029 OFFCURVE",
"20 1005 QCURVE SMOOTH",
"20 980 OFFCURVE",
"40 946 QCURVE SMOOTH",
"100 843 LINE",
"100 102 LINE SMOOTH",
"100 0 OFFCURVE",
"250 0 QCURVE SMOOTH",
"568 0 LINE",
"568 238 LINE",
"488 238 OFFCURVE",
"488 285 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17C3;
unicode = 17C3;
},
{
glyphname = uni17C4;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"68 1150 LINE SMOOTH",
"280 1150 OFFCURVE",
"280 937 QCURVE SMOOTH",
"280 0 LINE",
"338 0 LINE",
"338 937 LINE SMOOTH",
"338 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-300 1200 LINE",
"-300 1150 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"68 1112 LINE SMOOTH",
"250 1112 OFFCURVE",
"250 937 QCURVE SMOOTH",
"250 0 LINE",
"358 0 LINE",
"358 937 LINE SMOOTH",
"358 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-250 1200 LINE",
"-250 1112 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"68 1062 LINE SMOOTH",
"143 1062 OFFCURVE",
"200 1009 OFFCURVE",
"200 937 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 937 LINE SMOOTH",
"388 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE",
"-200 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 95 0 0 0 17 77 0 1 1 19 1 78 35 19 32 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 1012 LINE",
"18 1012 LINE SMOOTH",
"93 1012 OFFCURVE",
"150 959 OFFCURVE",
"150 887 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 937 LINE SMOOTH",
"438 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-200 1012 LINE",
"-32 1012 LINE SMOOTH",
"43 1012 OFFCURVE",
"100 959 OFFCURVE",
"100 887 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 937 LINE SMOOTH",
"488 1068 OFFCURVE",
"286 1250 OFFCURVE",
"68 1250 QCURVE SMOOTH",
"-200 1250 LINE"
);
}
);
width = 588;
}
);
note = uni17C4;
unicode = 17C4;
},
{
glyphname = uni17C5;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"338 1537 LINE SMOOTH",
"338 1750 OFFCURVE",
"128 1750 QCURVE SMOOTH",
"0 1750 LINE",
"0 1700 LINE",
"128 1700 LINE SMOOTH",
"280 1700 OFFCURVE",
"280 1537 QCURVE SMOOTH",
"280 1239 LINE",
"338 1237 LINE"
);
},
{
closed = 1;
nodes = (
"68 1150 LINE SMOOTH",
"280 1150 OFFCURVE",
"280 937 QCURVE SMOOTH",
"280 0 LINE",
"338 0 LINE",
"338 937 LINE SMOOTH",
"338 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-300 1200 LINE",
"-300 1150 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"358 1537 LINE SMOOTH",
"358 1750 OFFCURVE",
"128 1750 QCURVE SMOOTH",
"0 1750 LINE",
"0 1662 LINE",
"128 1662 LINE SMOOTH",
"250 1662 OFFCURVE",
"250 1537 QCURVE SMOOTH",
"250 1239 LINE",
"358 1237 LINE"
);
},
{
closed = 1;
nodes = (
"68 1112 LINE SMOOTH",
"250 1112 OFFCURVE",
"250 937 QCURVE SMOOTH",
"250 0 LINE",
"358 0 LINE",
"358 937 LINE SMOOTH",
"358 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-250 1200 LINE",
"-250 1112 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"388 1537 LINE SMOOTH",
"388 1638 OFFCURVE",
"286 1750 OFFCURVE",
"128 1750 QCURVE SMOOTH",
"0 1750 LINE",
"0 1612 LINE",
"128 1612 LINE SMOOTH",
"173 1612 OFFCURVE",
"200 1579 OFFCURVE",
"200 1537 QCURVE SMOOTH",
"200 1239 LINE",
"388 1237 LINE"
);
},
{
closed = 1;
nodes = (
"68 1062 LINE SMOOTH",
"143 1062 OFFCURVE",
"200 1009 OFFCURVE",
"200 937 QCURVE SMOOTH",
"200 0 LINE",
"388 0 LINE",
"388 937 LINE SMOOTH",
"388 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE",
"-200 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */\0126 1 2 0 3 0 2 3 128 0 1 0 0 2 1 0 105 0 5 5 3 95 0 3 3 17 77 0 4 4 19 4 78 0 0 23 21 18 17 14 12 0 11 0 11 33 35 7 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 1237 LINE",
"438 1537 LINE SMOOTH",
"438 1638 OFFCURVE",
"336 1750 OFFCURVE",
"178 1750 QCURVE SMOOTH",
"0 1750 LINE",
"0 1562 LINE",
"78 1562 LINE SMOOTH",
"123 1562 OFFCURVE",
"150 1529 OFFCURVE",
"150 1487 QCURVE SMOOTH",
"150 1239 LINE"
);
},
{
closed = 1;
nodes = (
"-200 1012 LINE",
"18 1012 LINE SMOOTH",
"93 1012 OFFCURVE",
"150 959 OFFCURVE",
"150 887 QCURVE SMOOTH",
"150 0 LINE",
"438 0 LINE",
"438 937 LINE SMOOTH",
"438 1068 OFFCURVE",
"236 1200 OFFCURVE",
"68 1200 QCURVE SMOOTH",
"-200 1200 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 1269 LINE",
"488 1567 LINE SMOOTH",
"488 1668 OFFCURVE",
"386 1780 OFFCURVE",
"228 1780 QCURVE SMOOTH",
"0 1780 LINE",
"0 1592 LINE",
"28 1592 LINE SMOOTH",
"73 1592 OFFCURVE",
"100 1559 OFFCURVE",
"100 1517 QCURVE SMOOTH",
"100 1269 LINE"
);
},
{
closed = 1;
nodes = (
"-200 1012 LINE",
"-32 1012 LINE SMOOTH",
"43 1012 OFFCURVE",
"100 959 OFFCURVE",
"100 887 QCURVE SMOOTH",
"100 0 LINE",
"488 0 LINE",
"488 937 LINE SMOOTH",
"488 1068 OFFCURVE",
"286 1250 OFFCURVE",
"68 1250 QCURVE SMOOTH",
"-200 1250 LINE"
);
}
);
width = 588;
}
);
note = uni17C5;
unicode = 17C5;
},
{
glyphname = uni17C6;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-530 1698 OFFCURVE",
"-485 1617 OFFCURVE",
"-485 1575 QCURVE SMOOTH",
"-485 1533 OFFCURVE",
"-527 1452 OFFCURVE",
"-608 1410 OFFCURVE",
"-650 1410 QCURVE SMOOTH",
"-692 1410 OFFCURVE",
"-770 1452 OFFCURVE",
"-815 1533 OFFCURVE",
"-815 1575 QCURVE SMOOTH",
"-815 1617 OFFCURVE",
"-770 1698 OFFCURVE",
"-692 1740 OFFCURVE",
"-650 1740 QCURVE SMOOTH",
"-608 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-807 1735 OFFCURVE",
"-865 1631 OFFCURVE",
"-865 1575 QCURVE SMOOTH",
"-865 1519 OFFCURVE",
"-808 1416 OFFCURVE",
"-705 1360 OFFCURVE",
"-650 1360 QCURVE SMOOTH",
"-594 1360 OFFCURVE",
"-491 1416 OFFCURVE",
"-435 1519 OFFCURVE",
"-435 1575 QCURVE SMOOTH",
"-435 1631 OFFCURVE",
"-493 1735 OFFCURVE",
"-596 1790 OFFCURVE",
"-650 1790 QCURVE SMOOTH",
"-704 1790 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-550 1627 OFFCURVE",
"-513 1560 OFFCURVE",
"-513 1525 QCURVE SMOOTH",
"-513 1490 OFFCURVE",
"-548 1423 OFFCURVE",
"-615 1388 OFFCURVE",
"-650 1388 QCURVE SMOOTH",
"-685 1388 OFFCURVE",
"-750 1423 OFFCURVE",
"-787 1490 OFFCURVE",
"-787 1525 QCURVE SMOOTH",
"-787 1560 OFFCURVE",
"-750 1627 OFFCURVE",
"-685 1662 OFFCURVE",
"-650 1662 QCURVE SMOOTH",
"-615 1662 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-814 1692 OFFCURVE",
"-875 1584 OFFCURVE",
"-875 1525 QCURVE SMOOTH",
"-875 1466 OFFCURVE",
"-815 1359 OFFCURVE",
"-708 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-591 1300 OFFCURVE",
"-484 1359 OFFCURVE",
"-425 1466 OFFCURVE",
"-425 1525 QCURVE SMOOTH",
"-425 1584 OFFCURVE",
"-486 1692 OFFCURVE",
"-593 1750 OFFCURVE",
"-650 1750 QCURVE SMOOTH",
"-707 1750 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-584 1592 OFFCURVE",
"-560 1548 OFFCURVE",
"-560 1525 QCURVE SMOOTH",
"-560 1502 OFFCURVE",
"-583 1458 OFFCURVE",
"-627 1435 OFFCURVE",
"-650 1435 QCURVE SMOOTH",
"-673 1435 OFFCURVE",
"-716 1458 OFFCURVE",
"-740 1502 OFFCURVE",
"-740 1525 QCURVE SMOOTH",
"-740 1548 OFFCURVE",
"-716 1592 OFFCURVE",
"-673 1615 OFFCURVE",
"-650 1615 QCURVE SMOOTH",
"-627 1615 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-814 1692 OFFCURVE",
"-875 1584 OFFCURVE",
"-875 1525 QCURVE SMOOTH",
"-875 1466 OFFCURVE",
"-815 1359 OFFCURVE",
"-708 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-591 1300 OFFCURVE",
"-484 1359 OFFCURVE",
"-425 1466 OFFCURVE",
"-425 1525 QCURVE SMOOTH",
"-425 1584 OFFCURVE",
"-486 1692 OFFCURVE",
"-593 1750 OFFCURVE",
"-650 1750 QCURVE SMOOTH",
"-707 1750 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-598 1458 QCURVE SMOOTH",
"-611 1452 OFFCURVE",
"-626 1452 QCURVE SMOOTH",
"-632 1452 OFFCURVE",
"-639 1453 QCURVE SMOOTH",
"-663 1457 OFFCURVE",
"-682 1469 QCURVE SMOOTH",
"-702 1480 OFFCURVE",
"-732 1517 OFFCURVE",
"-734 1536 QCURVE SMOOTH",
"-734 1544 LINE SMOOTH",
"-734 1559 OFFCURVE",
"-728 1570 QCURVE SMOOTH",
"-720 1584 OFFCURVE",
"-702 1592 QCURVE SMOOTH",
"-689 1598 OFFCURVE",
"-674 1598 QCURVE SMOOTH",
"-668 1598 OFFCURVE",
"-660 1596 QCURVE SMOOTH",
"-637 1593 OFFCURVE",
"-618 1581 QCURVE SMOOTH",
"-598 1570 OFFCURVE",
"-568 1533 OFFCURVE",
"-566 1513 QCURVE SMOOTH",
"-566 1506 LINE SMOOTH",
"-566 1491 OFFCURVE",
"-572 1480 QCURVE SMOOTH",
"-580 1466 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-832 1692 OFFCURVE",
"-900 1584 OFFCURVE",
"-900 1525 QCURVE SMOOTH",
"-900 1466 OFFCURVE",
"-833 1359 OFFCURVE",
"-714 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-584 1300 OFFCURVE",
"-466 1359 OFFCURVE",
"-400 1466 OFFCURVE",
"-400 1525 QCURVE SMOOTH",
"-400 1584 OFFCURVE",
"-468 1692 OFFCURVE",
"-587 1750 OFFCURVE",
"-650 1750 QCURVE SMOOTH",
"-713 1750 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-598 1488 QCURVE SMOOTH",
"-611 1482 OFFCURVE",
"-626 1482 QCURVE SMOOTH",
"-632 1482 OFFCURVE",
"-639 1483 QCURVE SMOOTH",
"-663 1487 OFFCURVE",
"-682 1499 QCURVE SMOOTH",
"-702 1510 OFFCURVE",
"-732 1547 OFFCURVE",
"-734 1566 QCURVE SMOOTH",
"-734 1574 LINE SMOOTH",
"-734 1589 OFFCURVE",
"-728 1600 QCURVE SMOOTH",
"-720 1614 OFFCURVE",
"-702 1622 QCURVE SMOOTH",
"-689 1628 OFFCURVE",
"-674 1628 QCURVE SMOOTH",
"-668 1628 OFFCURVE",
"-660 1626 QCURVE SMOOTH",
"-637 1623 OFFCURVE",
"-618 1611 QCURVE SMOOTH",
"-598 1600 OFFCURVE",
"-568 1563 OFFCURVE",
"-566 1543 QCURVE SMOOTH",
"-566 1536 LINE SMOOTH",
"-566 1521 OFFCURVE",
"-572 1510 QCURVE SMOOTH",
"-580 1496 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-868 1722 OFFCURVE",
"-950 1614 OFFCURVE",
"-950 1555 QCURVE SMOOTH",
"-950 1496 OFFCURVE",
"-870 1389 OFFCURVE",
"-727 1330 OFFCURVE",
"-650 1330 QCURVE SMOOTH",
"-571 1330 OFFCURVE",
"-429 1389 OFFCURVE",
"-350 1496 OFFCURVE",
"-350 1555 QCURVE SMOOTH",
"-350 1614 OFFCURVE",
"-432 1722 OFFCURVE",
"-574 1780 OFFCURVE",
"-650 1780 QCURVE SMOOTH",
"-726 1780 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17C6;
unicode = 17C6;
},
{
glyphname = uni17C7;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"545 348 OFFCURVE",
"590 267 OFFCURVE",
"590 225 QCURVE SMOOTH",
"590 183 OFFCURVE",
"548 102 OFFCURVE",
"467 60 OFFCURVE",
"425 60 QCURVE SMOOTH",
"383 60 OFFCURVE",
"305 102 OFFCURVE",
"260 183 OFFCURVE",
"260 225 QCURVE SMOOTH",
"260 267 OFFCURVE",
"305 348 OFFCURVE",
"383 390 OFFCURVE",
"425 390 QCURVE SMOOTH",
"467 390 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"268 385 OFFCURVE",
"210 281 OFFCURVE",
"210 225 QCURVE SMOOTH",
"210 169 OFFCURVE",
"267 66 OFFCURVE",
"370 10 OFFCURVE",
"425 10 QCURVE SMOOTH",
"481 10 OFFCURVE",
"584 66 OFFCURVE",
"640 169 OFFCURVE",
"640 225 QCURVE SMOOTH",
"640 281 OFFCURVE",
"582 385 OFFCURVE",
"479 440 OFFCURVE",
"425 440 QCURVE SMOOTH",
"371 440 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"545 1098 OFFCURVE",
"590 1017 OFFCURVE",
"590 975 QCURVE SMOOTH",
"590 933 OFFCURVE",
"548 852 OFFCURVE",
"467 810 OFFCURVE",
"425 810 QCURVE SMOOTH",
"383 810 OFFCURVE",
"305 852 OFFCURVE",
"260 933 OFFCURVE",
"260 975 QCURVE SMOOTH",
"260 1017 OFFCURVE",
"305 1098 OFFCURVE",
"383 1140 OFFCURVE",
"425 1140 QCURVE SMOOTH",
"467 1140 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"268 1135 OFFCURVE",
"210 1031 OFFCURVE",
"210 975 QCURVE SMOOTH",
"210 919 OFFCURVE",
"267 816 OFFCURVE",
"370 760 OFFCURVE",
"425 760 QCURVE SMOOTH",
"481 760 OFFCURVE",
"584 816 OFFCURVE",
"640 919 OFFCURVE",
"640 975 QCURVE SMOOTH",
"640 1031 OFFCURVE",
"582 1135 OFFCURVE",
"479 1190 OFFCURVE",
"425 1190 QCURVE SMOOTH",
"371 1190 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"525 327 OFFCURVE",
"562 260 OFFCURVE",
"562 225 QCURVE SMOOTH",
"562 190 OFFCURVE",
"527 123 OFFCURVE",
"460 88 OFFCURVE",
"425 88 QCURVE SMOOTH",
"390 88 OFFCURVE",
"325 123 OFFCURVE",
"288 190 OFFCURVE",
"288 225 QCURVE SMOOTH",
"288 260 OFFCURVE",
"325 327 OFFCURVE",
"390 362 OFFCURVE",
"425 362 QCURVE SMOOTH",
"460 362 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 392 OFFCURVE",
"200 284 OFFCURVE",
"200 225 QCURVE SMOOTH",
"200 166 OFFCURVE",
"260 59 OFFCURVE",
"367 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"484 0 OFFCURVE",
"591 59 OFFCURVE",
"650 166 OFFCURVE",
"650 225 QCURVE SMOOTH",
"650 284 OFFCURVE",
"589 392 OFFCURVE",
"482 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"368 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"525 1077 OFFCURVE",
"562 1010 OFFCURVE",
"562 975 QCURVE SMOOTH",
"562 940 OFFCURVE",
"527 873 OFFCURVE",
"460 838 OFFCURVE",
"425 838 QCURVE SMOOTH",
"390 838 OFFCURVE",
"325 873 OFFCURVE",
"288 940 OFFCURVE",
"288 975 QCURVE SMOOTH",
"288 1010 OFFCURVE",
"325 1077 OFFCURVE",
"390 1112 OFFCURVE",
"425 1112 QCURVE SMOOTH",
"460 1112 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 1142 OFFCURVE",
"200 1034 OFFCURVE",
"200 975 QCURVE SMOOTH",
"200 916 OFFCURVE",
"260 809 OFFCURVE",
"367 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"484 750 OFFCURVE",
"591 809 OFFCURVE",
"650 916 OFFCURVE",
"650 975 QCURVE SMOOTH",
"650 1034 OFFCURVE",
"589 1142 OFFCURVE",
"482 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"368 1200 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"491 292 OFFCURVE",
"515 248 OFFCURVE",
"515 225 QCURVE SMOOTH",
"515 202 OFFCURVE",
"492 158 OFFCURVE",
"448 135 OFFCURVE",
"425 135 QCURVE SMOOTH",
"402 135 OFFCURVE",
"359 158 OFFCURVE",
"335 202 OFFCURVE",
"335 225 QCURVE SMOOTH",
"335 248 OFFCURVE",
"359 292 OFFCURVE",
"402 315 OFFCURVE",
"425 315 QCURVE SMOOTH",
"448 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 392 OFFCURVE",
"200 284 OFFCURVE",
"200 225 QCURVE SMOOTH",
"200 166 OFFCURVE",
"260 59 OFFCURVE",
"367 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"484 0 OFFCURVE",
"591 59 OFFCURVE",
"650 166 OFFCURVE",
"650 225 QCURVE SMOOTH",
"650 284 OFFCURVE",
"589 392 OFFCURVE",
"482 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"368 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"491 1042 OFFCURVE",
"515 998 OFFCURVE",
"515 975 QCURVE SMOOTH",
"515 952 OFFCURVE",
"492 908 OFFCURVE",
"448 885 OFFCURVE",
"425 885 QCURVE SMOOTH",
"402 885 OFFCURVE",
"359 908 OFFCURVE",
"335 952 OFFCURVE",
"335 975 QCURVE SMOOTH",
"335 998 OFFCURVE",
"359 1042 OFFCURVE",
"402 1065 OFFCURVE",
"425 1065 QCURVE SMOOTH",
"448 1065 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 1142 OFFCURVE",
"200 1034 OFFCURVE",
"200 975 QCURVE SMOOTH",
"200 916 OFFCURVE",
"260 809 OFFCURVE",
"367 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"484 750 OFFCURVE",
"591 809 OFFCURVE",
"650 916 OFFCURVE",
"650 975 QCURVE SMOOTH",
"650 1034 OFFCURVE",
"589 1142 OFFCURVE",
"482 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"368 1200 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\0120 5 0 7 2 5 7 105 9 1 2 8 1 0 1 2 0 105 10 1 4 4 6 97 11 1 6 6 17 77 0 1 1 3 97 0 3 3 19 3 78 49 48 33 32 17 16 1 0 57 55 48 63 49 63 41 39 32 47 33 47 25 23 16 31 17 31 9 7 0 15 1 15 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 850;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"482 158 QCURVE SMOOTH",
"468 152 OFFCURVE",
"451 152 QCURVE SMOOTH",
"445 152 OFFCURVE",
"437 153 QCURVE SMOOTH",
"411 157 OFFCURVE",
"390 169 QCURVE SMOOTH",
"368 180 OFFCURVE",
"335 217 OFFCURVE",
"333 236 QCURVE SMOOTH",
"333 244 LINE SMOOTH",
"333 259 OFFCURVE",
"339 270 QCURVE SMOOTH",
"348 284 OFFCURVE",
"368 292 QCURVE SMOOTH",
"382 298 OFFCURVE",
"399 298 QCURVE SMOOTH",
"405 298 OFFCURVE",
"414 296 QCURVE SMOOTH",
"439 293 OFFCURVE",
"460 281 QCURVE SMOOTH",
"482 270 OFFCURVE",
"515 233 OFFCURVE",
"517 213 QCURVE SMOOTH",
"517 206 LINE SMOOTH",
"517 191 OFFCURVE",
"511 180 QCURVE SMOOTH",
"502 166 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 392 OFFCURVE",
"150 284 OFFCURVE",
"150 225 QCURVE SMOOTH",
"150 166 OFFCURVE",
"224 59 OFFCURVE",
"355 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"498 0 OFFCURVE",
"627 59 OFFCURVE",
"700 166 OFFCURVE",
"700 225 QCURVE SMOOTH",
"700 284 OFFCURVE",
"625 392 OFFCURVE",
"494 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"356 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"482 908 QCURVE SMOOTH",
"468 902 OFFCURVE",
"451 902 QCURVE SMOOTH",
"445 902 OFFCURVE",
"437 903 QCURVE SMOOTH",
"411 907 OFFCURVE",
"390 919 QCURVE SMOOTH",
"368 930 OFFCURVE",
"335 967 OFFCURVE",
"333 986 QCURVE SMOOTH",
"333 994 LINE SMOOTH",
"333 1009 OFFCURVE",
"339 1020 QCURVE SMOOTH",
"348 1034 OFFCURVE",
"368 1042 QCURVE SMOOTH",
"382 1048 OFFCURVE",
"399 1048 QCURVE SMOOTH",
"405 1048 OFFCURVE",
"414 1046 QCURVE SMOOTH",
"439 1043 OFFCURVE",
"460 1031 QCURVE SMOOTH",
"482 1020 OFFCURVE",
"515 983 OFFCURVE",
"517 963 QCURVE SMOOTH",
"517 956 LINE SMOOTH",
"517 941 OFFCURVE",
"511 930 QCURVE SMOOTH",
"502 916 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 1142 OFFCURVE",
"150 1034 OFFCURVE",
"150 975 QCURVE SMOOTH",
"150 916 OFFCURVE",
"224 809 OFFCURVE",
"355 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"498 750 OFFCURVE",
"627 809 OFFCURVE",
"700 916 OFFCURVE",
"700 975 QCURVE SMOOTH",
"700 1034 OFFCURVE",
"625 1142 OFFCURVE",
"494 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"356 1200 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"482 158 QCURVE SMOOTH",
"468 152 OFFCURVE",
"451 152 QCURVE SMOOTH",
"445 152 OFFCURVE",
"437 153 QCURVE SMOOTH",
"411 157 OFFCURVE",
"390 169 QCURVE SMOOTH",
"368 180 OFFCURVE",
"335 217 OFFCURVE",
"333 236 QCURVE SMOOTH",
"333 244 LINE SMOOTH",
"333 259 OFFCURVE",
"339 270 QCURVE SMOOTH",
"348 284 OFFCURVE",
"368 292 QCURVE SMOOTH",
"382 298 OFFCURVE",
"399 298 QCURVE SMOOTH",
"405 298 OFFCURVE",
"414 296 QCURVE SMOOTH",
"439 293 OFFCURVE",
"460 281 QCURVE SMOOTH",
"482 270 OFFCURVE",
"515 233 OFFCURVE",
"517 213 QCURVE SMOOTH",
"517 206 LINE SMOOTH",
"517 191 OFFCURVE",
"511 180 QCURVE SMOOTH",
"502 166 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"189 392 OFFCURVE",
"100 284 OFFCURVE",
"100 225 QCURVE SMOOTH",
"100 166 OFFCURVE",
"187 59 OFFCURVE",
"342 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"511 0 OFFCURVE",
"664 59 OFFCURVE",
"750 166 OFFCURVE",
"750 225 QCURVE SMOOTH",
"750 284 OFFCURVE",
"661 392 OFFCURVE",
"507 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"343 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"482 958 QCURVE SMOOTH",
"468 952 OFFCURVE",
"451 952 QCURVE SMOOTH",
"445 952 OFFCURVE",
"437 953 QCURVE SMOOTH",
"411 957 OFFCURVE",
"390 969 QCURVE SMOOTH",
"368 980 OFFCURVE",
"335 1017 OFFCURVE",
"333 1036 QCURVE SMOOTH",
"333 1044 LINE SMOOTH",
"333 1059 OFFCURVE",
"339 1070 QCURVE SMOOTH",
"348 1084 OFFCURVE",
"368 1092 QCURVE SMOOTH",
"382 1098 OFFCURVE",
"399 1098 QCURVE SMOOTH",
"405 1098 OFFCURVE",
"414 1096 QCURVE SMOOTH",
"439 1093 OFFCURVE",
"460 1081 QCURVE SMOOTH",
"482 1070 OFFCURVE",
"515 1033 OFFCURVE",
"517 1013 QCURVE SMOOTH",
"517 1006 LINE SMOOTH",
"517 991 OFFCURVE",
"511 980 QCURVE SMOOTH",
"502 966 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"189 1192 OFFCURVE",
"100 1084 OFFCURVE",
"100 1025 QCURVE SMOOTH",
"100 966 OFFCURVE",
"187 859 OFFCURVE",
"342 800 OFFCURVE",
"425 800 QCURVE SMOOTH",
"511 800 OFFCURVE",
"664 859 OFFCURVE",
"750 966 OFFCURVE",
"750 1025 QCURVE SMOOTH",
"750 1084 OFFCURVE",
"661 1192 OFFCURVE",
"507 1250 OFFCURVE",
"425 1250 QCURVE SMOOTH",
"343 1250 OFFCURVE"
);
}
);
width = 850;
}
);
note = uni17C7;
unicode = 17C7;
},
{
glyphname = uni17C8;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"225 271 OFFCURVE",
"205 235 OFFCURVE",
"205 215 QCURVE SMOOTH",
"205 196 OFFCURVE",
"225 160 OFFCURVE",
"261 140 OFFCURVE",
"280 140 QCURVE SMOOTH",
"300 140 OFFCURVE",
"336 160 OFFCURVE",
"355 196 OFFCURVE",
"355 215 QCURVE SMOOTH",
"355 235 OFFCURVE",
"335 271 OFFCURVE",
"300 290 OFFCURVE",
"280 290 QCURVE SMOOTH",
"261 290 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 1021 OFFCURVE",
"205 985 OFFCURVE",
"205 965 QCURVE SMOOTH",
"205 946 OFFCURVE",
"225 910 OFFCURVE",
"261 890 OFFCURVE",
"280 890 QCURVE SMOOTH",
"300 890 OFFCURVE",
"336 910 OFFCURVE",
"355 946 OFFCURVE",
"355 965 QCURVE SMOOTH",
"355 985 OFFCURVE",
"335 1021 OFFCURVE",
"300 1040 OFFCURVE",
"280 1040 QCURVE SMOOTH",
"261 1040 OFFCURVE"
);
}
);
width = 580;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"225 289 OFFCURVE",
"205 241 OFFCURVE",
"205 215 QCURVE SMOOTH",
"205 189 OFFCURVE",
"225 141 OFFCURVE",
"261 115 OFFCURVE",
"280 115 QCURVE SMOOTH",
"300 115 OFFCURVE",
"336 141 OFFCURVE",
"355 189 OFFCURVE",
"355 215 QCURVE SMOOTH",
"355 241 OFFCURVE",
"335 289 OFFCURVE",
"300 315 OFFCURVE",
"280 315 QCURVE SMOOTH",
"261 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 1039 OFFCURVE",
"205 991 OFFCURVE",
"205 965 QCURVE SMOOTH",
"205 939 OFFCURVE",
"225 891 OFFCURVE",
"261 865 OFFCURVE",
"280 865 QCURVE SMOOTH",
"300 865 OFFCURVE",
"336 891 OFFCURVE",
"355 939 OFFCURVE",
"355 965 QCURVE SMOOTH",
"355 991 OFFCURVE",
"335 1039 OFFCURVE",
"300 1065 OFFCURVE",
"280 1065 QCURVE SMOOTH",
"261 1065 OFFCURVE"
);
}
);
width = 580;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"207 289 OFFCURVE",
"180 241 OFFCURVE",
"180 215 QCURVE SMOOTH",
"180 189 OFFCURVE",
"207 141 OFFCURVE",
"254 115 OFFCURVE",
"280 115 QCURVE SMOOTH",
"306 115 OFFCURVE",
"354 141 OFFCURVE",
"380 189 OFFCURVE",
"380 215 QCURVE SMOOTH",
"380 241 OFFCURVE",
"353 289 OFFCURVE",
"306 315 OFFCURVE",
"280 315 QCURVE SMOOTH",
"254 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"207 1039 OFFCURVE",
"180 991 OFFCURVE",
"180 965 QCURVE SMOOTH",
"180 939 OFFCURVE",
"207 891 OFFCURVE",
"254 865 OFFCURVE",
"280 865 QCURVE SMOOTH",
"306 865 OFFCURVE",
"354 891 OFFCURVE",
"380 939 OFFCURVE",
"380 965 QCURVE SMOOTH",
"380 991 OFFCURVE",
"353 1039 OFFCURVE",
"306 1065 OFFCURVE",
"280 1065 QCURVE SMOOTH",
"254 1065 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */\0125 1 2 0 3 0 2 3 105 4 1 0 1 1 0 89 4 1 0 0 1 97 0 1 0 1 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 580;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"171 289 OFFCURVE",
"130 241 OFFCURVE",
"130 215 QCURVE SMOOTH",
"130 189 OFFCURVE",
"171 141 OFFCURVE",
"241 115 OFFCURVE",
"280 115 QCURVE SMOOTH",
"319 115 OFFCURVE",
"391 141 OFFCURVE",
"430 189 OFFCURVE",
"430 215 QCURVE SMOOTH",
"430 241 OFFCURVE",
"390 289 OFFCURVE",
"319 315 OFFCURVE",
"280 315 QCURVE SMOOTH",
"241 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"171 1039 OFFCURVE",
"130 991 OFFCURVE",
"130 965 QCURVE SMOOTH",
"130 939 OFFCURVE",
"171 891 OFFCURVE",
"241 865 OFFCURVE",
"280 865 QCURVE SMOOTH",
"319 865 OFFCURVE",
"391 891 OFFCURVE",
"430 939 OFFCURVE",
"430 965 QCURVE SMOOTH",
"430 991 OFFCURVE",
"390 1039 OFFCURVE",
"319 1065 OFFCURVE",
"280 1065 QCURVE SMOOTH",
"241 1065 OFFCURVE"
);
}
);
width = 580;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"135 289 OFFCURVE",
"80 241 OFFCURVE",
"80 215 QCURVE SMOOTH",
"80 189 OFFCURVE",
"135 141 OFFCURVE",
"228 115 OFFCURVE",
"280 115 QCURVE SMOOTH",
"332 115 OFFCURVE",
"428 141 OFFCURVE",
"480 189 OFFCURVE",
"480 215 QCURVE SMOOTH",
"480 241 OFFCURVE",
"427 289 OFFCURVE",
"332 315 OFFCURVE",
"280 315 QCURVE SMOOTH",
"228 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"135 1039 OFFCURVE",
"80 991 OFFCURVE",
"80 965 QCURVE SMOOTH",
"80 939 OFFCURVE",
"135 891 OFFCURVE",
"228 865 OFFCURVE",
"280 865 QCURVE SMOOTH",
"332 865 OFFCURVE",
"428 891 OFFCURVE",
"480 939 OFFCURVE",
"480 965 QCURVE SMOOTH",
"480 991 OFFCURVE",
"427 1039 OFFCURVE",
"332 1065 OFFCURVE",
"280 1065 QCURVE SMOOTH",
"228 1065 OFFCURVE"
);
}
);
width = 580;
}
);
note = uni17C8;
unicode = 17C8;
},
{
glyphname = uni17C9;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-830 1350 LINE",
"-780 1350 LINE",
"-780 1750 LINE",
"-830 1750 LINE"
);
},
{
closed = 1;
nodes = (
"-520 1350 LINE",
"-470 1350 LINE",
"-470 1750 LINE",
"-520 1750 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-849 1300 LINE",
"-761 1300 LINE",
"-761 1700 LINE",
"-849 1700 LINE"
);
},
{
closed = 1;
nodes = (
"-539 1300 LINE",
"-451 1300 LINE",
"-451 1700 LINE",
"-539 1700 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-880 1300 LINE",
"-730 1300 LINE",
"-730 1700 LINE",
"-880 1700 LINE"
);
},
{
closed = 1;
nodes = (
"-570 1300 LINE",
"-420 1300 LINE",
"-420 1700 LINE",
"-570 1700 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 41 values pushed */\0125 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-730 1700 LINE",
"-930 1700 LINE",
"-930 1300 LINE",
"-730 1300 LINE"
);
},
{
closed = 1;
nodes = (
"-370 1700 LINE",
"-570 1700 LINE",
"-570 1300 LINE",
"-370 1300 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-730 1700 LINE",
"-1030 1700 LINE",
"-1030 1300 LINE",
"-730 1300 LINE"
);
},
{
closed = 1;
nodes = (
"-270 1700 LINE",
"-570 1700 LINE",
"-570 1300 LINE",
"-270 1300 LINE"
);
}
);
width = 0;
}
);
note = uni17C9;
unicode = 17C9;
},
{
glyphname = uni17CA;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-610 1365 LINE",
"-610 1346 LINE",
"-250 1346 LINE",
"-250 1404 LINE",
"-552 1404 LINE"
);
},
{
closed = 1;
nodes = (
"-727 1404 LINE",
"-1050 1404 LINE",
"-1050 1346 LINE",
"-670 1346 LINE",
"-670 1365 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-650 1360 LINE",
"-727 1419 LINE",
"-1070 1419 LINE",
"-1070 1331 LINE",
"-230 1331 LINE",
"-230 1419 LINE",
"-572 1419 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-650 1350 LINE",
"-727 1450 LINE",
"-1100 1450 LINE",
"-1100 1300 LINE",
"-200 1300 LINE",
"-200 1450 LINE",
"-572 1450 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 37 values pushed */\0125 1 0 1 1 76 3 2 2 1 0 0 1 87 3 2 2 1 1 0 95 0 0 1 0 79 0 0 0 6 0 6 17 17 4 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 1470 LINE",
"-572 1470 LINE",
"-650 1370 LINE",
"-727 1470 LINE",
"-1100 1470 LINE",
"-1100 1270 LINE",
"-200 1270 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-100 1500 LINE",
"-572 1500 LINE",
"-650 1400 LINE",
"-727 1500 LINE",
"-1200 1500 LINE",
"-1200 1300 LINE",
"-100 1300 LINE"
);
}
);
width = 0;
}
);
note = uni17CA;
unicode = 17CA;
},
{
glyphname = uni17CB;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-675 1350 LINE",
"-625 1350 LINE",
"-625 1750 LINE",
"-675 1750 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-694 1300 LINE",
"-606 1300 LINE",
"-606 1700 LINE",
"-694 1700 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-725 1300 LINE",
"-575 1300 LINE",
"-575 1700 LINE",
"-725 1700 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-540 1700 LINE",
"-760 1700 LINE",
"-760 1300 LINE",
"-540 1300 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-490 1730 LINE",
"-810 1730 LINE",
"-810 1330 LINE",
"-490 1330 LINE"
);
}
);
width = 0;
}
);
note = uni17CB;
unicode = 17CB;
},
{
glyphname = uni17CC;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-747 1526 OFFCURVE",
"-658 1526 QCURVE SMOOTH",
"-564 1526 OFFCURVE",
"-435 1472 OFFCURVE",
"-357 1402 QCURVE",
"-320 1432 LINE",
"-401 1520 OFFCURVE",
"-563 1576 OFFCURVE",
"-629 1576 QCURVE SMOOTH",
"-665 1576 OFFCURVE",
"-690 1572 QCURVE",
"-639 1622 OFFCURVE",
"-554 1736 OFFCURVE",
"-520 1828 QCURVE",
"-560 1843 LINE",
"-621 1707 OFFCURVE",
"-780 1551 OFFCURVE",
"-980 1447 QCURVE",
"-954 1404 LINE",
"-853 1473 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-742 1437 OFFCURVE",
"-643 1437 QCURVE SMOOTH",
"-619 1437 OFFCURVE",
"-471 1400 OFFCURVE",
"-390 1320 QCURVE",
"-315 1381 LINE",
"-396 1469 OFFCURVE",
"-558 1525 OFFCURVE",
"-634 1525 QCURVE SMOOTH",
"-660 1525 OFFCURVE",
"-685 1521 QCURVE",
"-634 1571 OFFCURVE",
"-559 1661 OFFCURVE",
"-515 1777 QCURVE",
"-596 1806 LINE",
"-627 1712 OFFCURVE",
"-830 1500 OFFCURVE",
"-975 1406 QCURVE",
"-923 1319 LINE",
"-857 1373 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-800 1400 QCURVE SMOOTH",
"-762 1417 OFFCURVE",
"-693 1417 QCURVE SMOOTH",
"-659 1417 OFFCURVE",
"-617 1413 QCURVE SMOOTH",
"-491 1400 OFFCURVE",
"-410 1300 QCURVE",
"-295 1391 LINE",
"-376 1489 OFFCURVE",
"-472 1510 QCURVE SMOOTH",
"-538 1525 OFFCURVE",
"-594 1525 QCURVE SMOOTH",
"-620 1525 OFFCURVE",
"-645 1521 QCURVE",
"-594 1571 OFFCURVE",
"-539 1651 OFFCURVE",
"-495 1767 QCURVE",
"-616 1806 LINE",
"-647 1712 OFFCURVE",
"-850 1500 OFFCURVE",
"-1005 1416 QCURVE",
"-923 1309 LINE",
"-857 1373 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 31 values pushed */\0128 1 1 0 1 76 5 4 2 0 74 15 14 1 3 1 73 0 0 1 0 133 0 1 1 118 39 41 2 7 24 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-770 1400 QCURVE SMOOTH",
"-732 1417 OFFCURVE",
"-693 1417 QCURVE SMOOTH",
"-659 1417 OFFCURVE",
"-617 1413 QCURVE",
"-541 1400 OFFCURVE",
"-460 1300 QCURVE",
"-295 1391 LINE",
"-376 1489 OFFCURVE",
"-472 1510 QCURVE SMOOTH",
"-538 1525 OFFCURVE",
"-594 1525 QCURVE SMOOTH",
"-620 1525 OFFCURVE",
"-645 1521 QCURVE",
"-594 1571 OFFCURVE",
"-539 1651 OFFCURVE",
"-495 1767 QCURVE",
"-666 1806 LINE",
"-697 1712 OFFCURVE",
"-900 1500 OFFCURVE",
"-1055 1416 QCURVE",
"-893 1309 LINE",
"-827 1373 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-782 1430 QCURVE SMOOTH",
"-739 1447 OFFCURVE",
"-695 1447 QCURVE SMOOTH",
"-657 1447 OFFCURVE",
"-609 1443 QCURVE",
"-523 1430 OFFCURVE",
"-432 1330 QCURVE",
"-245 1421 LINE",
"-337 1519 OFFCURVE",
"-445 1540 QCURVE SMOOTH",
"-520 1555 OFFCURVE",
"-583 1555 QCURVE SMOOTH",
"-613 1555 OFFCURVE",
"-641 1551 QCURVE",
"-583 1601 OFFCURVE",
"-521 1681 OFFCURVE",
"-471 1797 QCURVE",
"-665 1836 LINE",
"-700 1742 OFFCURVE",
"-930 1530 OFFCURVE",
"-1105 1446 QCURVE",
"-922 1339 LINE",
"-847 1403 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17CC;
unicode = 17CC;
},
{
glyphname = uni17CD;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-753 1640 QCURVE SMOOTH",
"-541 1640 LINE SMOOTH",
"-250 1640 OFFCURVE",
"-250 1850 QCURVE",
"-300 1850 LINE",
"-300 1690 OFFCURVE",
"-541 1690 QCURVE SMOOTH",
"-753 1690 LINE SMOOTH",
"-952 1690 OFFCURVE",
"-952 1535 QCURVE SMOOTH",
"-952 1380 OFFCURVE",
"-777 1380 QCURVE SMOOTH",
"-712 1380 LINE",
"-712 1430 LINE",
"-777 1430 LINE SMOOTH",
"-902 1430 OFFCURVE",
"-902 1535 QCURVE SMOOTH",
"-902 1640 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-753 1570 QCURVE SMOOTH",
"-541 1570 LINE SMOOTH",
"-250 1570 OFFCURVE",
"-250 1800 QCURVE",
"-338 1800 LINE",
"-338 1658 OFFCURVE",
"-541 1658 QCURVE SMOOTH",
"-753 1658 LINE SMOOTH",
"-990 1658 OFFCURVE",
"-990 1475 QCURVE SMOOTH",
"-990 1310 OFFCURVE",
"-777 1310 QCURVE SMOOTH",
"-712 1310 LINE",
"-712 1398 LINE",
"-777 1398 LINE SMOOTH",
"-902 1398 OFFCURVE",
"-902 1475 QCURVE SMOOTH",
"-902 1570 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-783 1520 QCURVE SMOOTH",
"-561 1520 LINE SMOOTH",
"-250 1520 OFFCURVE",
"-250 1750 QCURVE SMOOTH",
"-250 1800 LINE",
"-397 1800 LINE",
"-397 1650 OFFCURVE",
"-561 1650 QCURVE SMOOTH",
"-783 1650 LINE SMOOTH",
"-1050 1650 OFFCURVE",
"-1050 1455 QCURVE SMOOTH",
"-1050 1300 OFFCURVE",
"-807 1300 QCURVE SMOOTH",
"-742 1300 LINE",
"-742 1410 LINE",
"-807 1410 LINE SMOOTH",
"-902 1410 OFFCURVE",
"-902 1455 QCURVE SMOOTH",
"-902 1520 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 2 2 3 112 0 2 0 4 0 2 4 104 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 133 0 2 0 4 0 2 4 104 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01250 17 50 33 33 5 7 27 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-802 1520 OFFCURVE",
"-733 1520 QCURVE SMOOTH",
"-561 1520 LINE SMOOTH",
"-250 1520 OFFCURVE",
"-250 1750 QCURVE SMOOTH",
"-250 1800 LINE",
"-447 1800 LINE",
"-447 1700 OFFCURVE",
"-561 1700 QCURVE SMOOTH",
"-783 1700 LINE SMOOTH",
"-1050 1700 OFFCURVE",
"-1050 1475 QCURVE SMOOTH",
"-1050 1300 OFFCURVE",
"-757 1300 QCURVE SMOOTH",
"-692 1300 LINE",
"-692 1430 LINE",
"-757 1430 LINE SMOOTH",
"-802 1430 OFFCURVE",
"-802 1475 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-802 1550 OFFCURVE",
"-733 1550 QCURVE SMOOTH",
"-561 1550 LINE SMOOTH",
"-200 1550 OFFCURVE",
"-200 1780 QCURVE SMOOTH",
"-200 1830 LINE",
"-447 1830 LINE",
"-447 1730 OFFCURVE",
"-561 1730 QCURVE SMOOTH",
"-783 1730 LINE SMOOTH",
"-1100 1730 OFFCURVE",
"-1100 1505 QCURVE SMOOTH",
"-1100 1330 OFFCURVE",
"-757 1330 QCURVE SMOOTH",
"-692 1330 LINE",
"-692 1460 LINE",
"-757 1460 LINE SMOOTH",
"-802 1460 OFFCURVE",
"-802 1505 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17CD;
unicode = 17CD;
},
{
glyphname = uni17CE;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-925 1619 LINE",
"-925 1580 LINE",
"-676 1580 LINE",
"-676 1350 LINE",
"-624 1350 LINE",
"-624 1580 LINE",
"-375 1580 LINE",
"-375 1619 LINE",
"-624 1619 LINE",
"-624 1849 LINE",
"-676 1849 LINE",
"-676 1619 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-925 1588 LINE",
"-925 1511 LINE",
"-695 1511 LINE",
"-695 1300 LINE",
"-605 1300 LINE",
"-605 1511 LINE",
"-375 1511 LINE",
"-375 1588 LINE",
"-605 1588 LINE",
"-605 1799 LINE",
"-695 1799 LINE",
"-695 1588 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-925 1618 LINE",
"-925 1481 LINE",
"-725 1481 LINE",
"-725 1300 LINE",
"-575 1300 LINE",
"-575 1481 LINE",
"-375 1481 LINE",
"-375 1618 LINE",
"-575 1618 LINE",
"-575 1799 LINE",
"-725 1799 LINE",
"-725 1618 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0120 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 0 0 0 3 95 0 3 0 3 79 17 17 17 17 17 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-775 1799 LINE",
"-775 1638 LINE",
"-975 1638 LINE",
"-975 1461 LINE",
"-775 1461 LINE",
"-775 1300 LINE",
"-525 1300 LINE",
"-525 1461 LINE",
"-325 1461 LINE",
"-325 1638 LINE",
"-525 1638 LINE",
"-525 1799 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-825 1829 LINE",
"-825 1668 LINE",
"-1025 1668 LINE",
"-1025 1491 LINE",
"-825 1491 LINE",
"-825 1330 LINE",
"-475 1330 LINE",
"-475 1491 LINE",
"-275 1491 LINE",
"-275 1668 LINE",
"-475 1668 LINE",
"-475 1829 LINE"
);
}
);
width = 0;
}
);
note = uni17CE;
unicode = 17CE;
},
{
glyphname = uni17CF;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-602 1523 LINE",
"-300 1370 LINE",
"-250 1370 LINE",
"-250 1562 LINE",
"-300 1562 LINE",
"-300 1414 LINE",
"-601 1567 LINE",
"-902 1415 LINE",
"-902 1552 LINE SMOOTH",
"-902 1668 OFFCURVE",
"-770 1668 QCURVE SMOOTH",
"-540 1668 LINE SMOOTH",
"-250 1668 OFFCURVE",
"-250 1850 QCURVE",
"-300 1850 LINE",
"-300 1705 OFFCURVE",
"-540 1705 QCURVE SMOOTH",
"-770 1705 LINE SMOOTH",
"-952 1705 OFFCURVE",
"-952 1552 QCURVE SMOOTH",
"-952 1370 LINE",
"-902 1370 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-621 1453 LINE",
"-338 1300 LINE",
"-250 1300 LINE",
"-250 1512 LINE",
"-338 1512 LINE",
"-338 1374 LINE",
"-620 1527 LINE",
"-902 1375 LINE",
"-902 1502 LINE SMOOTH",
"-902 1608 OFFCURVE",
"-770 1608 QCURVE SMOOTH",
"-540 1608 LINE SMOOTH",
"-250 1608 OFFCURVE",
"-250 1800 QCURVE",
"-338 1800 LINE",
"-338 1674 OFFCURVE",
"-540 1674 QCURVE SMOOTH",
"-770 1674 LINE SMOOTH",
"-990 1674 OFFCURVE",
"-990 1502 QCURVE SMOOTH",
"-990 1300 LINE",
"-902 1300 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-869 1301 LINE",
"-868 1300 LINE",
"-651 1393 LINE",
"-430 1300 LINE",
"-250 1300 LINE",
"-250 1512 LINE",
"-400 1512 LINE",
"-400 1414 LINE",
"-650 1527 LINE",
"-899 1415 LINE",
"-899 1502 LINE SMOOTH",
"-899 1588 OFFCURVE",
"-800 1588 QCURVE SMOOTH",
"-470 1588 LINE SMOOTH",
"-250 1588 OFFCURVE",
"-250 1762 QCURVE SMOOTH",
"-250 1800 LINE",
"-400 1800 LINE",
"-400 1704 OFFCURVE",
"-664 1704 QCURVE SMOOTH",
"-800 1704 LINE SMOOTH",
"-1050 1704 OFFCURVE",
"-1050 1502 QCURVE SMOOTH",
"-1050 1300 LINE",
"-869 1300 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 12 values pushed */\01215 1 3 2 21 16 14 3 4 3 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 1 0 0 1 112 0 0 0 2 3 0 2 104 0 3 4 4 3 87 0 3 3 4 95 6 5 2 4 3 4 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 31 values pushed */\0120 1 0 1 133 0 0 0 2 3 0 2 104 0 3 4 4 3 87 0 3 3 4 95 6 5 2 4 3 4 79 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 24 0 22 17 21 50 17 50 7 7 27 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1100 1300 LINE",
"-869 1300 LINE",
"-869 1301 LINE",
"-868 1300 LINE",
"-651 1393 LINE",
"-430 1300 LINE",
"-200 1300 LINE",
"-200 1512 LINE",
"-450 1512 LINE",
"-450 1444 LINE",
"-650 1527 LINE",
"-849 1445 LINE",
"-849 1502 LINE SMOOTH",
"-849 1588 OFFCURVE",
"-710 1588 QCURVE SMOOTH",
"-470 1588 LINE SMOOTH",
"-200 1588 OFFCURVE",
"-200 1812 QCURVE SMOOTH",
"-200 1850 LINE",
"-450 1850 LINE",
"-450 1754 OFFCURVE",
"-664 1754 QCURVE SMOOTH",
"-800 1754 LINE SMOOTH",
"-1100 1754 OFFCURVE",
"-1100 1502 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1150 1330 LINE",
"-869 1330 LINE",
"-651 1423 LINE",
"-430 1330 LINE",
"-150 1330 LINE",
"-150 1542 LINE",
"-450 1542 LINE",
"-450 1474 LINE",
"-650 1557 LINE",
"-849 1475 LINE",
"-849 1532 LINE SMOOTH",
"-849 1618 OFFCURVE",
"-710 1618 QCURVE SMOOTH",
"-470 1618 LINE SMOOTH",
"-150 1618 OFFCURVE",
"-150 1842 QCURVE SMOOTH",
"-150 1880 LINE",
"-450 1880 LINE",
"-450 1784 OFFCURVE",
"-664 1784 QCURVE SMOOTH",
"-800 1784 LINE SMOOTH",
"-1150 1784 OFFCURVE",
"-1150 1532 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17CF;
unicode = 17CF;
},
{
glyphname = uni17D0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-379 1380 QCURVE SMOOTH",
"100 1380 OFFCURVE",
"100 1760 QCURVE",
"50 1760 LINE",
"50 1430 OFFCURVE",
"-379 1430 QCURVE SMOOTH",
"-612 1430 OFFCURVE",
"-612 1560 QCURVE SMOOTH",
"-612 1680 OFFCURVE",
"-436 1680 QCURVE SMOOTH",
"-389 1680 LINE",
"-389 1730 LINE",
"-433 1730 LINE SMOOTH",
"-662 1730 OFFCURVE",
"-662 1560 QCURVE SMOOTH",
"-662 1380 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-379 1310 QCURVE SMOOTH",
"100 1310 OFFCURVE",
"100 1710 QCURVE",
"12 1710 LINE",
"12 1398 OFFCURVE",
"-379 1398 QCURVE SMOOTH",
"-612 1398 OFFCURVE",
"-612 1510 QCURVE SMOOTH",
"-612 1612 OFFCURVE",
"-436 1612 QCURVE SMOOTH",
"-389 1612 LINE",
"-389 1700 LINE",
"-433 1700 LINE SMOOTH",
"-700 1700 OFFCURVE",
"-700 1510 QCURVE SMOOTH",
"-700 1310 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-309 1400 QCURVE SMOOTH",
"100 1400 OFFCURVE",
"100 1800 QCURVE",
"-50 1800 LINE",
"-50 1530 OFFCURVE",
"-309 1530 QCURVE SMOOTH",
"-550 1530 OFFCURVE",
"-550 1600 QCURVE SMOOTH",
"-550 1660 OFFCURVE",
"-436 1660 QCURVE SMOOTH",
"-389 1660 LINE",
"-389 1790 LINE",
"-433 1790 LINE SMOOTH",
"-700 1790 OFFCURVE",
"-700 1600 QCURVE SMOOTH",
"-700 1400 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01249 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 3 133 0 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 17 34 33 33 5 7 27 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-309 1400 QCURVE SMOOTH",
"100 1400 OFFCURVE",
"100 1800 QCURVE",
"-100 1800 LINE",
"-100 1560 OFFCURVE",
"-309 1560 QCURVE SMOOTH",
"-450 1560 OFFCURVE",
"-450 1600 QCURVE SMOOTH",
"-450 1660 OFFCURVE",
"-386 1660 QCURVE SMOOTH",
"-339 1660 LINE",
"-339 1790 LINE",
"-383 1790 LINE SMOOTH",
"-700 1790 OFFCURVE",
"-700 1600 QCURVE SMOOTH",
"-700 1400 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-349 1330 QCURVE SMOOTH",
"100 1330 OFFCURVE",
"100 1800 QCURVE",
"-150 1800 LINE",
"-150 1520 OFFCURVE",
"-349 1520 QCURVE SMOOTH",
"-450 1520 OFFCURVE",
"-450 1580 QCURVE SMOOTH",
"-450 1660 OFFCURVE",
"-386 1660 QCURVE SMOOTH",
"-339 1660 LINE",
"-339 1790 LINE",
"-383 1790 LINE SMOOTH",
"-760 1790 OFFCURVE",
"-760 1580 QCURVE SMOOTH",
"-760 1330 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D0;
unicode = 17D0;
},
{
glyphname = uni17D1;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1050 1350 LINE",
"-250 1350 LINE",
"-250 1400 LINE",
"-1050 1400 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1070 1331 LINE",
"-230 1331 LINE",
"-230 1419 LINE",
"-1070 1419 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1050 1300 LINE",
"-250 1300 LINE",
"-250 1450 LINE",
"-1050 1450 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 28 values pushed */\0122 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 7 23 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-250 1450 LINE",
"-1050 1450 LINE",
"-1050 1300 LINE",
"-250 1300 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-100 1490 LINE",
"-1200 1490 LINE",
"-1200 1340 LINE",
"-100 1340 LINE"
);
}
);
width = 0;
}
);
note = uni17D1;
unicode = 17D1;
},
{
glyphname = uni17D2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-925 -299 LINE",
"-674 -299 LINE",
"-674 -500 LINE",
"-626 -500 LINE",
"-626 -299 LINE",
"-375 -299 LINE",
"-375 -251 LINE",
"-626 -251 LINE",
"-626 -50 LINE",
"-674 -50 LINE",
"-674 -251 LINE",
"-925 -251 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-925 -319 LINE",
"-694 -319 LINE",
"-694 -500 LINE",
"-606 -500 LINE",
"-606 -319 LINE",
"-375 -319 LINE",
"-375 -231 LINE",
"-606 -231 LINE",
"-606 -50 LINE",
"-694 -50 LINE",
"-694 -231 LINE",
"-925 -231 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-925 -214 LINE",
"-925 -336 LINE",
"-725 -336 LINE",
"-725 -500 LINE",
"-575 -500 LINE",
"-575 -336 LINE",
"-375 -336 LINE",
"-375 -214 LINE",
"-575 -214 LINE",
"-575 -50 LINE",
"-725 -50 LINE",
"-725 -214 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 35 values pushed */\0120 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 0 0 0 3 95 0 3 0 3 79 17 17 17 17 17 16 6 7 28 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-725 -50 LINE",
"-725 -214 LINE",
"-925 -214 LINE",
"-925 -336 LINE",
"-725 -336 LINE",
"-725 -500 LINE",
"-575 -500 LINE",
"-575 -336 LINE",
"-375 -336 LINE",
"-375 -214 LINE",
"-575 -214 LINE",
"-575 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-725 -50 LINE",
"-725 -214 LINE",
"-925 -214 LINE",
"-925 -336 LINE",
"-725 -336 LINE",
"-725 -500 LINE",
"-575 -500 LINE",
"-575 -336 LINE",
"-375 -336 LINE",
"-375 -214 LINE",
"-575 -214 LINE",
"-575 -50 LINE"
);
}
);
width = 0;
}
);
note = uni17D2;
unicode = 17D2;
},
{
glyphname = uni17D3;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-394 1697 OFFCURVE",
"-299 1602 OFFCURVE",
"-299 1550 QCURVE SMOOTH",
"-299 1498 OFFCURVE",
"-390 1403 OFFCURVE",
"-557 1350 OFFCURVE",
"-649 1350 QCURVE SMOOTH",
"-736 1350 OFFCURVE",
"-904 1403 OFFCURVE",
"-999 1498 OFFCURVE",
"-999 1550 QCURVE SMOOTH",
"-999 1602 OFFCURVE",
"-904 1697 OFFCURVE",
"-736 1750 OFFCURVE",
"-649 1750 QCURVE SMOOTH",
"-557 1750 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-942 1736 OFFCURVE",
"-1050 1615 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1485 OFFCURVE",
"-942 1366 OFFCURVE",
"-752 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-546 1300 OFFCURVE",
"-354 1366 OFFCURVE",
"-250 1485 OFFCURVE",
"-250 1550 QCURVE SMOOTH",
"-250 1615 OFFCURVE",
"-358 1736 OFFCURVE",
"-548 1800 OFFCURVE",
"-650 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-422 1669 OFFCURVE",
"-337 1592 OFFCURVE",
"-337 1550 QCURVE SMOOTH",
"-337 1508 OFFCURVE",
"-418 1431 OFFCURVE",
"-567 1388 OFFCURVE",
"-649 1388 QCURVE SMOOTH",
"-727 1388 OFFCURVE",
"-876 1431 OFFCURVE",
"-961 1508 OFFCURVE",
"-961 1550 QCURVE SMOOTH",
"-961 1592 OFFCURVE",
"-876 1669 OFFCURVE",
"-727 1712 OFFCURVE",
"-649 1712 QCURVE SMOOTH",
"-567 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-942 1736 OFFCURVE",
"-1050 1615 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1485 OFFCURVE",
"-942 1366 OFFCURVE",
"-752 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-546 1300 OFFCURVE",
"-354 1366 OFFCURVE",
"-250 1485 OFFCURVE",
"-250 1550 QCURVE SMOOTH",
"-250 1615 OFFCURVE",
"-358 1736 OFFCURVE",
"-548 1800 OFFCURVE",
"-650 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-491 1636 OFFCURVE",
"-432 1580 OFFCURVE",
"-432 1550 QCURVE SMOOTH",
"-432 1520 OFFCURVE",
"-488 1464 OFFCURVE",
"-592 1433 OFFCURVE",
"-649 1433 QCURVE SMOOTH",
"-703 1433 OFFCURVE",
"-807 1464 OFFCURVE",
"-866 1520 OFFCURVE",
"-866 1550 QCURVE SMOOTH",
"-866 1580 OFFCURVE",
"-807 1636 OFFCURVE",
"-703 1667 OFFCURVE",
"-649 1667 QCURVE SMOOTH",
"-592 1667 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-942 1736 OFFCURVE",
"-1050 1615 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1485 OFFCURVE",
"-942 1366 OFFCURVE",
"-752 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-546 1300 OFFCURVE",
"-354 1366 OFFCURVE",
"-250 1485 OFFCURVE",
"-250 1550 QCURVE SMOOTH",
"-250 1615 OFFCURVE",
"-358 1736 OFFCURVE",
"-548 1800 OFFCURVE",
"-650 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-592 1667 OFFCURVE",
"-491 1636 OFFCURVE",
"-432 1580 OFFCURVE",
"-432 1550 QCURVE SMOOTH",
"-432 1520 OFFCURVE",
"-488 1464 OFFCURVE",
"-592 1433 OFFCURVE",
"-649 1433 QCURVE SMOOTH",
"-703 1433 OFFCURVE",
"-807 1464 OFFCURVE",
"-866 1520 OFFCURVE",
"-866 1550 QCURVE SMOOTH",
"-866 1580 OFFCURVE",
"-807 1636 OFFCURVE",
"-703 1667 OFFCURVE",
"-649 1667 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-942 1736 OFFCURVE",
"-1050 1615 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1485 OFFCURVE",
"-942 1366 OFFCURVE",
"-752 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-546 1300 OFFCURVE",
"-354 1366 OFFCURVE",
"-250 1485 OFFCURVE",
"-250 1550 QCURVE SMOOTH",
"-250 1615 OFFCURVE",
"-358 1736 OFFCURVE",
"-548 1800 OFFCURVE",
"-650 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-592 1667 OFFCURVE",
"-491 1636 OFFCURVE",
"-432 1580 OFFCURVE",
"-432 1550 QCURVE SMOOTH",
"-432 1520 OFFCURVE",
"-488 1464 OFFCURVE",
"-592 1433 OFFCURVE",
"-649 1433 QCURVE SMOOTH",
"-703 1433 OFFCURVE",
"-807 1464 OFFCURVE",
"-866 1520 OFFCURVE",
"-866 1550 QCURVE SMOOTH",
"-866 1580 OFFCURVE",
"-807 1636 OFFCURVE",
"-703 1667 OFFCURVE",
"-649 1667 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-942 1736 OFFCURVE",
"-1050 1615 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1485 OFFCURVE",
"-942 1366 OFFCURVE",
"-752 1300 OFFCURVE",
"-650 1300 QCURVE SMOOTH",
"-546 1300 OFFCURVE",
"-354 1366 OFFCURVE",
"-250 1485 OFFCURVE",
"-250 1550 QCURVE SMOOTH",
"-250 1615 OFFCURVE",
"-358 1736 OFFCURVE",
"-548 1800 OFFCURVE",
"-650 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D3;
unicode = 17D3;
},
{
glyphname = uni17D4;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"250 1200 OFFCURVE",
"250 1020 QCURVE SMOOTH",
"250 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"733 800 OFFCURVE",
"892 1096 QCURVE",
"892 0 LINE",
"950 0 LINE",
"950 1200 LINE",
"892 1200 LINE",
"723 850 OFFCURVE",
"466 850 QCURVE SMOOTH",
"308 850 OFFCURVE",
"308 1020 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"442 1150 QCURVE SMOOTH",
"495 1150 LINE",
"495 1200 LINE"
);
}
);
width = 1200;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"230 1200 OFFCURVE",
"230 1020 QCURVE SMOOTH",
"230 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"862 1016 QCURVE",
"862 0 LINE",
"970 0 LINE",
"970 1200 LINE",
"862 1200 LINE",
"693 888 OFFCURVE",
"466 888 QCURVE SMOOTH",
"338 888 OFFCURVE",
"338 1020 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"442 1112 QCURVE SMOOTH",
"495 1112 LINE",
"495 1200 LINE"
);
}
);
width = 1200;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"200 1200 OFFCURVE",
"200 1020 QCURVE SMOOTH",
"200 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"812 946 QCURVE",
"812 0 LINE",
"1000 0 LINE",
"1000 1200 LINE",
"812 1200 LINE",
"728 1069 LINE SMOOTH",
"643 938 OFFCURVE",
"466 938 QCURVE SMOOTH",
"388 938 OFFCURVE",
"388 1020 QCURVE SMOOTH",
"388 1062 OFFCURVE",
"442 1062 QCURVE SMOOTH",
"495 1062 LINE",
"495 1200 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01212 1 1 0 1 76 0 1 0 4 3 1 4 105 0 0 0 2 97 5 1 2 2 17 77 0 3 3 19 3 78 34 34 17 18 34 32 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1200;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"492 1200 LINE",
"401 1200 LINE SMOOTH",
"150 1200 OFFCURVE",
"150 1020 QCURVE SMOOTH",
"150 780 OFFCURVE",
"416 780 QCURVE SMOOTH",
"653 780 OFFCURVE",
"762 896 QCURVE",
"762 0 LINE",
"1050 0 LINE",
"1050 1200 LINE",
"762 1200 LINE",
"703 1084 LINE SMOOTH",
"643 968 OFFCURVE",
"516 968 QCURVE SMOOTH",
"438 968 OFFCURVE",
"438 1020 QCURVE SMOOTH",
"438 1062 OFFCURVE",
"492 1062 QCURVE"
);
}
);
width = 1200;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"542 1250 LINE",
"451 1250 LINE SMOOTH",
"100 1250 OFFCURVE",
"100 1020 QCURVE SMOOTH",
"100 760 OFFCURVE",
"416 760 QCURVE SMOOTH",
"623 760 OFFCURVE",
"712 876 QCURVE",
"712 0 LINE",
"1100 0 LINE",
"1100 1250 LINE",
"712 1250 LINE",
"643 968 OFFCURVE",
"536 968 QCURVE SMOOTH",
"488 968 OFFCURVE",
"488 1020 QCURVE SMOOTH",
"488 1062 OFFCURVE",
"542 1062 QCURVE"
);
}
);
width = 1200;
}
);
note = uni17D4;
unicode = 17D4;
},
{
glyphname = uni17D5;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1250 1200 LINE",
"1192 1200 LINE",
"1192 0 LINE",
"1250 0 LINE"
);
},
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"250 1200 OFFCURVE",
"250 1020 QCURVE SMOOTH",
"250 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"733 800 OFFCURVE",
"892 1096 QCURVE",
"892 0 LINE",
"950 0 LINE",
"950 1200 LINE",
"892 1200 LINE",
"723 850 OFFCURVE",
"466 850 QCURVE SMOOTH",
"308 850 OFFCURVE",
"308 1020 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"442 1150 QCURVE SMOOTH",
"495 1150 LINE",
"495 1200 LINE"
);
}
);
width = 1500;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1270 1200 LINE",
"1162 1200 LINE",
"1162 0 LINE",
"1270 0 LINE"
);
},
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"230 1200 OFFCURVE",
"230 1020 QCURVE SMOOTH",
"230 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"862 1016 QCURVE",
"862 0 LINE",
"970 0 LINE",
"970 1200 LINE",
"862 1200 LINE",
"693 888 OFFCURVE",
"466 888 QCURVE SMOOTH",
"338 888 OFFCURVE",
"338 1020 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"442 1112 QCURVE SMOOTH",
"495 1112 LINE",
"495 1200 LINE"
);
}
);
width = 1500;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"200 1200 OFFCURVE",
"200 1020 QCURVE SMOOTH",
"200 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"812 946 QCURVE",
"812 0 LINE",
"1000 0 LINE",
"1000 1200 LINE",
"812 1200 LINE",
"728 1069 LINE SMOOTH",
"643 938 OFFCURVE",
"466 938 QCURVE SMOOTH",
"388 938 OFFCURVE",
"388 1020 QCURVE SMOOTH",
"388 1062 OFFCURVE",
"442 1062 QCURVE SMOOTH",
"495 1062 LINE",
"495 1200 LINE"
);
},
{
closed = 1;
nodes = (
"1300 1200 LINE",
"1112 1200 LINE",
"1112 0 LINE",
"1300 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */\01212 1 1 0 1 76 0 1 0 4 3 1 4 105 0 0 0 2 95 6 5 2 2 2 17 77 8 7 2 3 3 19 3 78 20 20 20 23 20 23 18 34 34 17 18 34 32 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1500;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1162 0 LINE",
"1450 0 LINE",
"1450 1200 LINE",
"1162 1200 LINE"
);
},
{
closed = 1;
nodes = (
"492 1200 LINE",
"401 1200 LINE SMOOTH",
"150 1200 OFFCURVE",
"150 1020 QCURVE SMOOTH",
"150 780 OFFCURVE",
"416 780 QCURVE SMOOTH",
"653 780 OFFCURVE",
"762 896 QCURVE",
"762 0 LINE",
"1050 0 LINE",
"1050 1200 LINE",
"762 1200 LINE",
"703 1084 LINE SMOOTH",
"643 968 OFFCURVE",
"516 968 QCURVE SMOOTH",
"438 968 OFFCURVE",
"438 1020 QCURVE SMOOTH",
"438 1062 OFFCURVE",
"492 1062 QCURVE"
);
}
);
width = 1600;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1162 0 LINE",
"1500 0 LINE",
"1500 1250 LINE",
"1162 1250 LINE"
);
},
{
closed = 1;
nodes = (
"542 1250 LINE",
"451 1250 LINE SMOOTH",
"100 1250 OFFCURVE",
"100 1020 QCURVE SMOOTH",
"100 760 OFFCURVE",
"416 760 QCURVE SMOOTH",
"623 760 OFFCURVE",
"712 876 QCURVE",
"712 0 LINE",
"1050 0 LINE",
"1050 1250 LINE",
"712 1250 LINE",
"643 968 OFFCURVE",
"536 968 QCURVE SMOOTH",
"488 968 OFFCURVE",
"488 1020 QCURVE SMOOTH",
"488 1062 OFFCURVE",
"542 1062 QCURVE"
);
}
);
width = 1600;
}
);
note = uni17D5;
unicode = 17D5;
},
{
glyphname = uni17D6;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"750 625 LINE",
"100 625 LINE",
"100 575 LINE",
"750 575 LINE"
);
},
{
closed = 1;
nodes = (
"545 348 OFFCURVE",
"590 267 OFFCURVE",
"590 225 QCURVE SMOOTH",
"590 183 OFFCURVE",
"548 102 OFFCURVE",
"467 60 OFFCURVE",
"425 60 QCURVE SMOOTH",
"383 60 OFFCURVE",
"305 102 OFFCURVE",
"260 183 OFFCURVE",
"260 225 QCURVE SMOOTH",
"260 267 OFFCURVE",
"305 348 OFFCURVE",
"383 390 OFFCURVE",
"425 390 QCURVE SMOOTH",
"467 390 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"268 385 OFFCURVE",
"210 281 OFFCURVE",
"210 225 QCURVE SMOOTH",
"210 169 OFFCURVE",
"267 66 OFFCURVE",
"370 10 OFFCURVE",
"425 10 QCURVE SMOOTH",
"481 10 OFFCURVE",
"584 66 OFFCURVE",
"640 169 OFFCURVE",
"640 225 QCURVE SMOOTH",
"640 281 OFFCURVE",
"582 385 OFFCURVE",
"479 440 OFFCURVE",
"425 440 QCURVE SMOOTH",
"371 440 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"545 1098 OFFCURVE",
"590 1017 OFFCURVE",
"590 975 QCURVE SMOOTH",
"590 933 OFFCURVE",
"548 852 OFFCURVE",
"467 810 OFFCURVE",
"425 810 QCURVE SMOOTH",
"383 810 OFFCURVE",
"305 852 OFFCURVE",
"260 933 OFFCURVE",
"260 975 QCURVE SMOOTH",
"260 1017 OFFCURVE",
"305 1098 OFFCURVE",
"383 1140 OFFCURVE",
"425 1140 QCURVE SMOOTH",
"467 1140 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"268 1135 OFFCURVE",
"210 1031 OFFCURVE",
"210 975 QCURVE SMOOTH",
"210 919 OFFCURVE",
"267 816 OFFCURVE",
"370 760 OFFCURVE",
"425 760 QCURVE SMOOTH",
"481 760 OFFCURVE",
"584 816 OFFCURVE",
"640 919 OFFCURVE",
"640 975 QCURVE SMOOTH",
"640 1031 OFFCURVE",
"582 1135 OFFCURVE",
"479 1190 OFFCURVE",
"425 1190 QCURVE SMOOTH",
"371 1190 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"750 644 LINE",
"100 644 LINE",
"100 556 LINE",
"750 556 LINE"
);
},
{
closed = 1;
nodes = (
"525 327 OFFCURVE",
"562 260 OFFCURVE",
"562 225 QCURVE SMOOTH",
"562 190 OFFCURVE",
"527 123 OFFCURVE",
"460 88 OFFCURVE",
"425 88 QCURVE SMOOTH",
"390 88 OFFCURVE",
"325 123 OFFCURVE",
"288 190 OFFCURVE",
"288 225 QCURVE SMOOTH",
"288 260 OFFCURVE",
"325 327 OFFCURVE",
"390 362 OFFCURVE",
"425 362 QCURVE SMOOTH",
"460 362 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 392 OFFCURVE",
"200 284 OFFCURVE",
"200 225 QCURVE SMOOTH",
"200 166 OFFCURVE",
"260 59 OFFCURVE",
"367 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"484 0 OFFCURVE",
"591 59 OFFCURVE",
"650 166 OFFCURVE",
"650 225 QCURVE SMOOTH",
"650 284 OFFCURVE",
"589 392 OFFCURVE",
"482 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"368 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"525 1077 OFFCURVE",
"562 1010 OFFCURVE",
"562 975 QCURVE SMOOTH",
"562 940 OFFCURVE",
"527 873 OFFCURVE",
"460 838 OFFCURVE",
"425 838 QCURVE SMOOTH",
"390 838 OFFCURVE",
"325 873 OFFCURVE",
"288 940 OFFCURVE",
"288 975 QCURVE SMOOTH",
"288 1010 OFFCURVE",
"325 1077 OFFCURVE",
"390 1112 OFFCURVE",
"425 1112 QCURVE SMOOTH",
"460 1112 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 1142 OFFCURVE",
"200 1034 OFFCURVE",
"200 975 QCURVE SMOOTH",
"200 916 OFFCURVE",
"260 809 OFFCURVE",
"367 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"484 750 OFFCURVE",
"591 809 OFFCURVE",
"650 916 OFFCURVE",
"650 975 QCURVE SMOOTH",
"650 1034 OFFCURVE",
"589 1142 OFFCURVE",
"482 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"368 1200 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"491 292 OFFCURVE",
"515 248 OFFCURVE",
"515 225 QCURVE SMOOTH",
"515 202 OFFCURVE",
"492 158 OFFCURVE",
"448 135 OFFCURVE",
"425 135 QCURVE SMOOTH",
"402 135 OFFCURVE",
"359 158 OFFCURVE",
"335 202 OFFCURVE",
"335 225 QCURVE SMOOTH",
"335 248 OFFCURVE",
"359 292 OFFCURVE",
"402 315 OFFCURVE",
"425 315 QCURVE SMOOTH",
"448 315 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 392 OFFCURVE",
"200 284 OFFCURVE",
"200 225 QCURVE SMOOTH",
"200 166 OFFCURVE",
"260 59 OFFCURVE",
"367 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"484 0 OFFCURVE",
"591 59 OFFCURVE",
"650 166 OFFCURVE",
"650 225 QCURVE SMOOTH",
"650 284 OFFCURVE",
"589 392 OFFCURVE",
"482 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"368 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"491 1042 OFFCURVE",
"515 998 OFFCURVE",
"515 975 QCURVE SMOOTH",
"515 952 OFFCURVE",
"492 908 OFFCURVE",
"448 885 OFFCURVE",
"425 885 QCURVE SMOOTH",
"402 885 OFFCURVE",
"359 908 OFFCURVE",
"335 952 OFFCURVE",
"335 975 QCURVE SMOOTH",
"335 998 OFFCURVE",
"359 1042 OFFCURVE",
"402 1065 OFFCURVE",
"425 1065 QCURVE SMOOTH",
"448 1065 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"261 1142 OFFCURVE",
"200 1034 OFFCURVE",
"200 975 QCURVE SMOOTH",
"200 916 OFFCURVE",
"260 809 OFFCURVE",
"367 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"484 750 OFFCURVE",
"591 809 OFFCURVE",
"650 916 OFFCURVE",
"650 975 QCURVE SMOOTH",
"650 1034 OFFCURVE",
"589 1142 OFFCURVE",
"482 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"368 1200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"750 669 LINE",
"100 669 LINE",
"100 531 LINE",
"750 531 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 93 values pushed */\0120 5 0 7 8 5 7 105 0 8 14 1 9 2 8 9 103 11 1 2 10 1 0 1 2 0 105 12 1 4 4 6 97 13 1 6 6 17 77 0 1 1 3 97 0 3 3 19 3 78 64 64 49 48 33 32 17 16 1 0 64 67 64 67 66 65 57 55 48 63 49 63 41 39 32 47 33 47 25 23 16 31 17 31 9 7 0 15 1 15 15 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 850;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"100 531 LINE",
"750 531 LINE",
"750 669 LINE",
"100 669 LINE"
);
},
{
closed = 1;
nodes = (
"482 158 QCURVE SMOOTH",
"468 152 OFFCURVE",
"451 152 QCURVE SMOOTH",
"445 152 OFFCURVE",
"437 153 QCURVE SMOOTH",
"411 157 OFFCURVE",
"390 169 QCURVE SMOOTH",
"368 180 OFFCURVE",
"335 217 OFFCURVE",
"333 236 QCURVE SMOOTH",
"333 244 LINE SMOOTH",
"333 259 OFFCURVE",
"339 270 QCURVE SMOOTH",
"348 284 OFFCURVE",
"368 292 QCURVE SMOOTH",
"382 298 OFFCURVE",
"399 298 QCURVE SMOOTH",
"405 298 OFFCURVE",
"414 296 QCURVE SMOOTH",
"439 293 OFFCURVE",
"460 281 QCURVE SMOOTH",
"482 270 OFFCURVE",
"515 233 OFFCURVE",
"517 213 QCURVE SMOOTH",
"517 206 LINE SMOOTH",
"517 191 OFFCURVE",
"511 180 QCURVE SMOOTH",
"502 166 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 392 OFFCURVE",
"150 284 OFFCURVE",
"150 225 QCURVE SMOOTH",
"150 166 OFFCURVE",
"224 59 OFFCURVE",
"355 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"498 0 OFFCURVE",
"627 59 OFFCURVE",
"700 166 OFFCURVE",
"700 225 QCURVE SMOOTH",
"700 284 OFFCURVE",
"625 392 OFFCURVE",
"494 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"356 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"482 908 QCURVE SMOOTH",
"468 902 OFFCURVE",
"451 902 QCURVE SMOOTH",
"445 902 OFFCURVE",
"437 903 QCURVE SMOOTH",
"411 907 OFFCURVE",
"390 919 QCURVE SMOOTH",
"368 930 OFFCURVE",
"335 967 OFFCURVE",
"333 986 QCURVE SMOOTH",
"333 994 LINE SMOOTH",
"333 1009 OFFCURVE",
"339 1020 QCURVE SMOOTH",
"348 1034 OFFCURVE",
"368 1042 QCURVE SMOOTH",
"382 1048 OFFCURVE",
"399 1048 QCURVE SMOOTH",
"405 1048 OFFCURVE",
"414 1046 QCURVE SMOOTH",
"439 1043 OFFCURVE",
"460 1031 QCURVE SMOOTH",
"482 1020 OFFCURVE",
"515 983 OFFCURVE",
"517 963 QCURVE SMOOTH",
"517 956 LINE SMOOTH",
"517 941 OFFCURVE",
"511 930 QCURVE SMOOTH",
"502 916 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"225 1142 OFFCURVE",
"150 1034 OFFCURVE",
"150 975 QCURVE SMOOTH",
"150 916 OFFCURVE",
"224 809 OFFCURVE",
"355 750 OFFCURVE",
"425 750 QCURVE SMOOTH",
"498 750 OFFCURVE",
"627 809 OFFCURVE",
"700 916 OFFCURVE",
"700 975 QCURVE SMOOTH",
"700 1034 OFFCURVE",
"625 1142 OFFCURVE",
"494 1200 OFFCURVE",
"425 1200 QCURVE SMOOTH",
"356 1200 OFFCURVE"
);
}
);
width = 850;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"50 536 LINE",
"800 536 LINE",
"800 714 LINE",
"50 714 LINE"
);
},
{
closed = 1;
nodes = (
"482 158 QCURVE SMOOTH",
"468 152 OFFCURVE",
"451 152 QCURVE SMOOTH",
"445 152 OFFCURVE",
"437 153 QCURVE SMOOTH",
"411 157 OFFCURVE",
"390 169 QCURVE SMOOTH",
"368 180 OFFCURVE",
"335 217 OFFCURVE",
"333 236 QCURVE SMOOTH",
"333 244 LINE SMOOTH",
"333 259 OFFCURVE",
"339 270 QCURVE SMOOTH",
"348 284 OFFCURVE",
"368 292 QCURVE SMOOTH",
"382 298 OFFCURVE",
"399 298 QCURVE SMOOTH",
"405 298 OFFCURVE",
"414 296 QCURVE SMOOTH",
"439 293 OFFCURVE",
"460 281 QCURVE SMOOTH",
"482 270 OFFCURVE",
"515 233 OFFCURVE",
"517 213 QCURVE SMOOTH",
"517 206 LINE SMOOTH",
"517 191 OFFCURVE",
"511 180 QCURVE SMOOTH",
"502 166 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"189 392 OFFCURVE",
"100 284 OFFCURVE",
"100 225 QCURVE SMOOTH",
"100 166 OFFCURVE",
"187 59 OFFCURVE",
"342 0 OFFCURVE",
"425 0 QCURVE SMOOTH",
"511 0 OFFCURVE",
"664 59 OFFCURVE",
"750 166 OFFCURVE",
"750 225 QCURVE SMOOTH",
"750 284 OFFCURVE",
"661 392 OFFCURVE",
"507 450 OFFCURVE",
"425 450 QCURVE SMOOTH",
"343 450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"482 958 QCURVE SMOOTH",
"468 952 OFFCURVE",
"451 952 QCURVE SMOOTH",
"445 952 OFFCURVE",
"437 953 QCURVE SMOOTH",
"411 957 OFFCURVE",
"390 969 QCURVE SMOOTH",
"368 980 OFFCURVE",
"335 1017 OFFCURVE",
"333 1036 QCURVE SMOOTH",
"333 1044 LINE SMOOTH",
"333 1059 OFFCURVE",
"339 1070 QCURVE SMOOTH",
"348 1084 OFFCURVE",
"368 1092 QCURVE SMOOTH",
"382 1098 OFFCURVE",
"399 1098 QCURVE SMOOTH",
"405 1098 OFFCURVE",
"414 1096 QCURVE SMOOTH",
"439 1093 OFFCURVE",
"460 1081 QCURVE SMOOTH",
"482 1070 OFFCURVE",
"515 1033 OFFCURVE",
"517 1013 QCURVE SMOOTH",
"517 1006 LINE SMOOTH",
"517 991 OFFCURVE",
"511 980 QCURVE SMOOTH",
"502 966 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"189 1192 OFFCURVE",
"100 1084 OFFCURVE",
"100 1025 QCURVE SMOOTH",
"100 966 OFFCURVE",
"187 859 OFFCURVE",
"342 800 OFFCURVE",
"425 800 QCURVE SMOOTH",
"511 800 OFFCURVE",
"664 859 OFFCURVE",
"750 966 OFFCURVE",
"750 1025 QCURVE SMOOTH",
"750 1084 OFFCURVE",
"661 1192 OFFCURVE",
"507 1250 OFFCURVE",
"425 1250 QCURVE SMOOTH",
"343 1250 OFFCURVE"
);
}
);
width = 850;
}
);
note = uni17D6;
unicode = 17D6;
},
{
glyphname = uni17D7;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"550 -350 QCURVE",
"550 -400 LINE",
"950 -400 OFFCURVE",
"950 -80 QCURVE SMOOTH",
"950 1200 LINE",
"892 1200 LINE",
"750 950 OFFCURVE",
"660 950 QCURVE SMOOTH",
"614 950 OFFCURVE",
"469 1200 OFFCURVE",
"355 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 985 QCURVE SMOOTH",
"200 769 OFFCURVE",
"393 769 QCURVE SMOOTH",
"438 769 LINE",
"438 825 LINE",
"393 825 LINE SMOOTH",
"258 825 OFFCURVE",
"258 985 QCURVE SMOOTH",
"258 1150 OFFCURVE",
"354 1150 QCURVE SMOOTH",
"450 1150 OFFCURVE",
"581 900 OFFCURVE",
"660 900 QCURVE SMOOTH",
"759 900 OFFCURVE",
"892 1113 QCURVE",
"892 -80 LINE SMOOTH",
"892 -350 OFFCURVE"
);
}
);
width = 1200;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"550 -312 QCURVE",
"550 -400 LINE",
"970 -400 OFFCURVE",
"970 -80 QCURVE SMOOTH",
"970 1200 LINE",
"862 1200 LINE",
"750 988 OFFCURVE",
"660 988 QCURVE SMOOTH",
"614 988 OFFCURVE",
"469 1200 OFFCURVE",
"355 1200 QCURVE SMOOTH",
"180 1200 OFFCURVE",
"180 985 QCURVE SMOOTH",
"180 769 OFFCURVE",
"393 769 QCURVE SMOOTH",
"438 769 LINE",
"438 863 LINE",
"393 863 LINE SMOOTH",
"288 863 OFFCURVE",
"288 985 QCURVE SMOOTH",
"288 1110 OFFCURVE",
"354 1110 QCURVE SMOOTH",
"450 1110 OFFCURVE",
"561 900 OFFCURVE",
"660 900 QCURVE SMOOTH",
"759 900 OFFCURVE",
"862 1043 QCURVE",
"862 -80 LINE SMOOTH",
"862 -312 OFFCURVE"
);
}
);
width = 1200;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"550 -262 QCURVE",
"550 -400 LINE",
"1000 -400 OFFCURVE",
"1000 -80 QCURVE SMOOTH",
"1000 1200 LINE",
"812 1200 LINE",
"700 1036 OFFCURVE",
"631 1036 QCURVE SMOOTH",
"614 1036 OFFCURVE",
"600 1046 QCURVE",
"489 1200 OFFCURVE",
"375 1200 QCURVE SMOOTH",
"260 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 973 QCURVE SMOOTH",
"150 913 LINE SMOOTH",
"150 769 OFFCURVE",
"288 769 QCURVE SMOOTH",
"438 769 LINE",
"438 913 LINE",
"338 913 OFFCURVE",
"338 947 QCURVE SMOOTH",
"338 973 LINE SMOOTH",
"338 1050 OFFCURVE",
"391 1050 QCURVE SMOOTH",
"460 1050 OFFCURVE",
"508 956 QCURVE",
"561 904 OFFCURVE",
"625 904 QCURVE SMOOTH",
"709 904 OFFCURVE",
"812 993 QCURVE",
"812 -80 LINE SMOOTH",
"812 -262 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\0121 1 2 5 1 76 0 5 0 0 3 5 0 105 0 2 0 3 8 2 3 103 0 8 0 7 8 7 101 0 1 1 4 97 6 1 4 4 17 1 78 17 18 17 34 36 33 19 34 34 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1200;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"762 -212 OFFCURVE",
"550 -212 QCURVE",
"550 -400 LINE",
"1050 -400 OFFCURVE",
"1050 -80 QCURVE SMOOTH",
"1050 1200 LINE",
"762 1200 LINE",
"700 1066 OFFCURVE",
"631 1066 QCURVE SMOOTH",
"614 1066 OFFCURVE",
"600 1076 QCURVE",
"489 1200 OFFCURVE",
"375 1200 QCURVE SMOOTH",
"260 1200 OFFCURVE",
"100 1036 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 913 LINE SMOOTH",
"100 699 OFFCURVE",
"358 699 QCURVE SMOOTH",
"438 699 LINE",
"438 893 LINE",
"338 893 OFFCURVE",
"338 927 QCURVE SMOOTH",
"338 953 LINE SMOOTH",
"338 1000 OFFCURVE",
"391 1000 QCURVE SMOOTH",
"460 1000 OFFCURVE",
"508 936 QCURVE",
"561 884 OFFCURVE",
"625 884 QCURVE SMOOTH",
"709 884 OFFCURVE",
"762 943 QCURVE",
"762 -80 LINE SMOOTH"
);
}
);
width = 1200;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"712 -162 OFFCURVE",
"550 -162 QCURVE",
"550 -400 LINE",
"1100 -400 OFFCURVE",
"1100 -60 QCURVE SMOOTH",
"1100 1250 LINE",
"712 1250 LINE",
"680 1116 OFFCURVE",
"631 1116 QCURVE SMOOTH",
"614 1116 OFFCURVE",
"600 1126 QCURVE",
"489 1250 OFFCURVE",
"345 1250 QCURVE SMOOTH",
"210 1250 OFFCURVE",
"50 1086 OFFCURVE",
"50 973 QCURVE SMOOTH",
"50 913 LINE SMOOTH",
"50 699 OFFCURVE",
"358 699 QCURVE SMOOTH",
"438 699 LINE",
"438 893 LINE",
"338 893 OFFCURVE",
"338 927 QCURVE SMOOTH",
"338 953 LINE SMOOTH",
"338 1000 OFFCURVE",
"391 1000 QCURVE SMOOTH",
"460 1000 OFFCURVE",
"508 936 QCURVE",
"561 884 OFFCURVE",
"625 884 QCURVE SMOOTH",
"659 884 OFFCURVE",
"712 943 QCURVE",
"712 -60 LINE SMOOTH"
);
}
);
width = 1200;
}
);
note = uni17D7;
unicode = 17D7;
},
{
glyphname = uni17D8;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"3542 1200 LINE SMOOTH",
"3350 1200 OFFCURVE",
"3350 1020 QCURVE SMOOTH",
"3350 800 OFFCURVE",
"3566 800 QCURVE SMOOTH",
"3833 800 OFFCURVE",
"3992 1096 QCURVE",
"3992 0 LINE",
"4050 0 LINE",
"4050 1200 LINE",
"3992 1200 LINE",
"3823 850 OFFCURVE",
"3566 850 QCURVE SMOOTH",
"3408 850 OFFCURVE",
"3408 1020 QCURVE SMOOTH",
"3408 1150 OFFCURVE",
"3542 1150 QCURVE SMOOTH",
"3595 1150 LINE",
"3595 1200 LINE"
);
},
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"250 1200 OFFCURVE",
"250 1020 QCURVE SMOOTH",
"250 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"733 800 OFFCURVE",
"892 1096 QCURVE",
"892 0 LINE",
"950 0 LINE",
"950 1200 LINE",
"892 1200 LINE",
"723 850 OFFCURVE",
"466 850 QCURVE SMOOTH",
"308 850 OFFCURVE",
"308 1020 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"442 1150 QCURVE SMOOTH",
"495 1150 LINE",
"495 1200 LINE"
);
},
{
closed = 1;
nodes = (
"1700 350 OFFCURVE",
"1700 249 QCURVE SMOOTH",
"1700 50 OFFCURVE",
"1588 50 QCURVE SMOOTH",
"1508 50 OFFCURVE",
"1508 122 QCURVE SMOOTH",
"1508 350 LINE",
"1588 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2603 1050 LINE",
"2655 1150 LINE",
"2850 1150 LINE",
"2850 1200 LINE",
"2632 1200 LINE",
"2554 1073 OFFCURVE",
"2554 1052 QCURVE SMOOTH",
"2554 1024 OFFCURVE",
"2614 970 QCURVE SMOOTH",
"2792 806 LINE",
"2792 323 LINE SMOOTH",
"2792 50 OFFCURVE",
"2481 50 QCURVE SMOOTH",
"2185 50 OFFCURVE",
"2185 323 QCURVE SMOOTH",
"2185 877 LINE SMOOTH",
"2185 1200 OFFCURVE",
"1825 1200 QCURVE SMOOTH",
"1450 1200 OFFCURVE",
"1450 877 QCURVE SMOOTH",
"1450 122 LINE SMOOTH",
"1450 0 OFFCURVE",
"1588 0 QCURVE SMOOTH",
"1750 0 OFFCURVE",
"1750 249 QCURVE SMOOTH",
"1750 400 OFFCURVE",
"1588 400 QCURVE SMOOTH",
"1508 400 LINE",
"1508 877 LINE SMOOTH",
"1508 1150 OFFCURVE",
"1825 1150 QCURVE SMOOTH",
"2127 1150 OFFCURVE",
"2127 877 QCURVE SMOOTH",
"2127 323 LINE SMOOTH",
"2127 0 OFFCURVE",
"2481 0 QCURVE SMOOTH",
"2850 0 OFFCURVE",
"2850 323 QCURVE SMOOTH",
"2850 830 LINE"
);
}
);
width = 4300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"3542 1200 LINE SMOOTH",
"3330 1200 OFFCURVE",
"3330 1020 QCURVE SMOOTH",
"3330 800 OFFCURVE",
"3566 800 QCURVE SMOOTH",
"3803 800 OFFCURVE",
"3962 1016 QCURVE",
"3962 0 LINE",
"4070 0 LINE",
"4070 1200 LINE",
"3962 1200 LINE",
"3793 888 OFFCURVE",
"3566 888 QCURVE SMOOTH",
"3438 888 OFFCURVE",
"3438 1020 QCURVE SMOOTH",
"3438 1112 OFFCURVE",
"3542 1112 QCURVE SMOOTH",
"3595 1112 LINE",
"3595 1200 LINE"
);
},
{
closed = 1;
nodes = (
"442 1200 LINE SMOOTH",
"230 1200 OFFCURVE",
"230 1020 QCURVE SMOOTH",
"230 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"862 1016 QCURVE",
"862 0 LINE",
"970 0 LINE",
"970 1200 LINE",
"862 1200 LINE",
"693 888 OFFCURVE",
"466 888 QCURVE SMOOTH",
"338 888 OFFCURVE",
"338 1020 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"442 1112 QCURVE SMOOTH",
"495 1112 LINE",
"495 1200 LINE"
);
},
{
closed = 1;
nodes = (
"1690 340 OFFCURVE",
"1690 249 QCURVE SMOOTH",
"1690 88 OFFCURVE",
"1588 88 QCURVE SMOOTH",
"1538 88 OFFCURVE",
"1538 122 QCURVE SMOOTH",
"1538 340 LINE",
"1588 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2643 1060 LINE",
"2665 1112 LINE",
"2870 1112 LINE",
"2870 1200 LINE",
"2622 1200 LINE",
"2544 1063 OFFCURVE",
"2544 1042 QCURVE SMOOTH",
"2544 1014 OFFCURVE",
"2762 806 QCURVE",
"2762 323 LINE SMOOTH",
"2762 88 OFFCURVE",
"2481 88 QCURVE SMOOTH",
"2210 88 OFFCURVE",
"2210 323 QCURVE SMOOTH",
"2210 877 LINE SMOOTH",
"2210 1200 OFFCURVE",
"1825 1200 QCURVE SMOOTH",
"1430 1200 OFFCURVE",
"1430 877 QCURVE SMOOTH",
"1430 122 LINE SMOOTH",
"1430 0 OFFCURVE",
"1588 0 QCURVE SMOOTH",
"1778 0 OFFCURVE",
"1778 249 QCURVE SMOOTH",
"1778 428 OFFCURVE",
"1588 428 QCURVE SMOOTH",
"1538 428 LINE",
"1538 877 LINE SMOOTH",
"1538 1112 OFFCURVE",
"1825 1112 QCURVE SMOOTH",
"2102 1112 OFFCURVE",
"2102 877 QCURVE SMOOTH",
"2102 323 LINE SMOOTH",
"2102 0 OFFCURVE",
"2481 0 QCURVE SMOOTH",
"2870 0 OFFCURVE",
"2870 323 QCURVE SMOOTH",
"2870 840 LINE"
);
}
);
width = 4300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"3542 1062 QCURVE SMOOTH",
"3595 1062 LINE",
"3595 1200 LINE",
"3542 1200 LINE SMOOTH",
"3300 1200 OFFCURVE",
"3300 1020 QCURVE SMOOTH",
"3300 800 OFFCURVE",
"3566 800 QCURVE SMOOTH",
"3803 800 OFFCURVE",
"3912 946 QCURVE",
"3912 0 LINE",
"4100 0 LINE",
"4100 1200 LINE",
"3912 1200 LINE",
"3828 1069 LINE SMOOTH",
"3743 938 OFFCURVE",
"3566 938 QCURVE SMOOTH",
"3488 938 OFFCURVE",
"3488 1020 QCURVE SMOOTH",
"3488 1062 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"442 1062 QCURVE SMOOTH",
"495 1062 LINE",
"495 1200 LINE",
"442 1200 LINE SMOOTH",
"200 1200 OFFCURVE",
"200 1020 QCURVE SMOOTH",
"200 800 OFFCURVE",
"466 800 QCURVE SMOOTH",
"703 800 OFFCURVE",
"812 946 QCURVE",
"812 0 LINE",
"1000 0 LINE",
"1000 1200 LINE",
"812 1200 LINE",
"728 1069 LINE SMOOTH",
"643 938 OFFCURVE",
"466 938 QCURVE SMOOTH",
"388 938 OFFCURVE",
"388 1020 QCURVE SMOOTH",
"388 1062 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1680 249 QCURVE SMOOTH",
"1680 138 OFFCURVE",
"1588 138 QCURVE",
"1588 310 LINE",
"1680 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1588 0 QCURVE SMOOTH",
"1798 0 OFFCURVE",
"1798 249 QCURVE SMOOTH",
"1798 448 OFFCURVE",
"1588 448 QCURVE",
"1588 877 LINE SMOOTH",
"1588 969 OFFCURVE",
"1647 1016 QCURVE SMOOTH",
"1705 1062 OFFCURVE",
"1825 1062 QCURVE SMOOTH",
"1945 1062 OFFCURVE",
"2004 1016 QCURVE SMOOTH",
"2062 969 OFFCURVE",
"2062 877 QCURVE SMOOTH",
"2062 323 LINE SMOOTH",
"2062 185 OFFCURVE",
"2262 0 OFFCURVE",
"2475 0 QCURVE SMOOTH",
"2688 0 OFFCURVE",
"2900 162 OFFCURVE",
"2900 323 QCURVE SMOOTH",
"2900 840 LINE",
"2652 1062 LINE",
"2900 1062 LINE",
"2900 1200 LINE",
"2652 1200 LINE",
"2577 1102 LINE",
"2540 1053 LINE SMOOTH",
"2524 1033 OFFCURVE",
"2524 1012 QCURVE SMOOTH",
"2524 984 OFFCURVE",
"2555 955 QCURVE SMOOTH",
"2607 905 LINE",
"2712 806 LINE",
"2712 323 LINE SMOOTH",
"2712 231 OFFCURVE",
"2595 138 OFFCURVE",
"2481 138 QCURVE SMOOTH",
"2367 138 OFFCURVE",
"2250 231 OFFCURVE",
"2250 323 QCURVE SMOOTH",
"2250 877 LINE SMOOTH",
"2250 1015 OFFCURVE",
"2150 1108 QCURVE SMOOTH",
"2050 1200 OFFCURVE",
"1825 1200 QCURVE SMOOTH",
"1600 1200 OFFCURVE",
"1500 1108 QCURVE SMOOTH",
"1400 1015 OFFCURVE",
"1400 877 QCURVE SMOOTH",
"1400 122 LINE SMOOTH",
"1400 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 106 values pushed */\01229 9 2 0 5 74 62 2 3 0 2 76 6 1 0 9 1 3 20 0 3 105 0 20 22 1 13 12 20 13 105 19 17 11 3 5 5 1 97 16 14 10 7 4 5 1 1 17 77 15 1 12 12 2 97 21 18 8 3 2 2 19 2 78 40 40 96 94 92 91 87 85 79 77 73 72 71 70 59 57 51 49 40 44 40 44 42 41 39 37 36 34 32 30 17 18 34 33 34 34 17 18 33 23 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 4300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1730 249 QCURVE SMOOTH",
"1730 138 OFFCURVE",
"1638 138 QCURVE",
"1638 310 LINE",
"1730 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"2652 1012 LINE",
"2950 1012 LINE",
"2950 1200 LINE",
"2602 1200 LINE",
"2527 1102 LINE",
"2490 1053 LINE SMOOTH",
"2474 1033 OFFCURVE",
"2474 1012 QCURVE SMOOTH",
"2474 984 OFFCURVE",
"2505 955 QCURVE SMOOTH",
"2557 905 LINE",
"2662 806 LINE",
"2662 323 LINE SMOOTH",
"2662 188 OFFCURVE",
"2481 188 QCURVE SMOOTH",
"2300 188 OFFCURVE",
"2300 323 QCURVE SMOOTH",
"2300 877 LINE SMOOTH",
"2300 1200 OFFCURVE",
"1825 1200 QCURVE SMOOTH",
"1350 1200 OFFCURVE",
"1350 877 QCURVE SMOOTH",
"1350 122 LINE SMOOTH",
"1350 0 OFFCURVE",
"1494 0 QCURVE SMOOTH",
"1638 0 LINE SMOOTH",
"1848 0 OFFCURVE",
"1848 249 QCURVE SMOOTH",
"1848 448 OFFCURVE",
"1638 448 QCURVE",
"1638 877 LINE SMOOTH",
"1638 1012 OFFCURVE",
"1825 1012 QCURVE SMOOTH",
"2012 1012 OFFCURVE",
"2012 877 QCURVE SMOOTH",
"2012 323 LINE SMOOTH",
"2012 0 OFFCURVE",
"2481 0 QCURVE SMOOTH",
"2950 0 OFFCURVE",
"2950 323 QCURVE SMOOTH",
"2950 840 LINE"
);
},
{
closed = 1;
nodes = (
"3592 1200 LINE",
"3501 1200 LINE SMOOTH",
"3250 1200 OFFCURVE",
"3250 1020 QCURVE SMOOTH",
"3250 780 OFFCURVE",
"3516 780 QCURVE SMOOTH",
"3753 780 OFFCURVE",
"3862 896 QCURVE",
"3862 0 LINE",
"4150 0 LINE",
"4150 1200 LINE",
"3862 1200 LINE",
"3803 1084 LINE SMOOTH",
"3743 968 OFFCURVE",
"3616 968 QCURVE SMOOTH",
"3538 968 OFFCURVE",
"3538 1020 QCURVE SMOOTH",
"3538 1062 OFFCURVE",
"3592 1062 QCURVE"
);
},
{
closed = 1;
nodes = (
"492 1200 LINE",
"401 1200 LINE SMOOTH",
"150 1200 OFFCURVE",
"150 1020 QCURVE SMOOTH",
"150 780 OFFCURVE",
"416 780 QCURVE SMOOTH",
"653 780 OFFCURVE",
"762 896 QCURVE",
"762 0 LINE",
"1050 0 LINE",
"1050 1200 LINE",
"762 1200 LINE",
"703 1084 LINE SMOOTH",
"643 968 OFFCURVE",
"516 968 QCURVE SMOOTH",
"438 968 OFFCURVE",
"438 1020 QCURVE SMOOTH",
"438 1062 OFFCURVE",
"492 1062 QCURVE"
);
}
);
width = 4300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"3642 1250 LINE",
"3551 1250 LINE SMOOTH",
"3200 1250 OFFCURVE",
"3200 1020 QCURVE SMOOTH",
"3200 760 OFFCURVE",
"3516 760 QCURVE SMOOTH",
"3723 760 OFFCURVE",
"3812 876 QCURVE",
"3812 0 LINE",
"4200 0 LINE",
"4200 1250 LINE",
"3812 1250 LINE",
"3743 968 OFFCURVE",
"3636 968 QCURVE SMOOTH",
"3588 968 OFFCURVE",
"3588 1020 QCURVE SMOOTH",
"3588 1062 OFFCURVE",
"3642 1062 QCURVE"
);
},
{
closed = 1;
nodes = (
"542 1250 LINE",
"451 1250 LINE SMOOTH",
"100 1250 OFFCURVE",
"100 1020 QCURVE SMOOTH",
"100 760 OFFCURVE",
"416 760 QCURVE SMOOTH",
"623 760 OFFCURVE",
"712 876 QCURVE",
"712 0 LINE",
"1100 0 LINE",
"1100 1250 LINE",
"712 1250 LINE",
"643 968 OFFCURVE",
"536 968 QCURVE SMOOTH",
"488 968 OFFCURVE",
"488 1020 QCURVE SMOOTH",
"488 1062 OFFCURVE",
"542 1062 QCURVE"
);
},
{
closed = 1;
nodes = (
"1750 259 QCURVE SMOOTH",
"1750 144 OFFCURVE",
"1688 144 QCURVE",
"1688 323 LINE",
"1750 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"2702 1012 LINE",
"3000 1012 LINE",
"3000 1250 LINE",
"2572 1250 LINE",
"2476 1087 LINE SMOOTH",
"2444 1033 OFFCURVE",
"2444 1012 QCURVE SMOOTH",
"2444 984 OFFCURVE",
"2486 940 QCURVE SMOOTH",
"2612 806 LINE",
"2612 336 LINE SMOOTH",
"2612 238 OFFCURVE",
"2481 238 QCURVE SMOOTH",
"2350 238 OFFCURVE",
"2350 336 QCURVE SMOOTH",
"2350 914 LINE SMOOTH",
"2350 1250 OFFCURVE",
"1825 1250 QCURVE SMOOTH",
"1300 1250 OFFCURVE",
"1300 914 QCURVE SMOOTH",
"1300 127 LINE SMOOTH",
"1300 0 OFFCURVE",
"1494 0 QCURVE SMOOTH",
"1688 0 LINE SMOOTH",
"1868 0 OFFCURVE",
"1868 259 QCURVE SMOOTH",
"1868 467 OFFCURVE",
"1688 467 QCURVE",
"1688 914 LINE SMOOTH",
"1688 1012 OFFCURVE",
"1825 1012 QCURVE SMOOTH",
"1962 1012 OFFCURVE",
"1962 914 QCURVE SMOOTH",
"1962 336 LINE SMOOTH",
"1962 0 OFFCURVE",
"2481 0 QCURVE SMOOTH",
"3000 0 OFFCURVE",
"3000 336 QCURVE SMOOTH",
"3000 840 LINE"
);
}
);
width = 4300;
}
);
note = uni17D8;
unicode = 17D8;
},
{
glyphname = uni17D9;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"1300 600 QCURVE SMOOTH",
"1300 1200 OFFCURVE",
"750 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 OFFCURVE",
"750 0 QCURVE SMOOTH",
"1300 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1251 600 QCURVE SMOOTH",
"1251 50 OFFCURVE",
"750 50 QCURVE SMOOTH",
"251 50 OFFCURVE",
"251 600 QCURVE SMOOTH",
"251 1150 OFFCURVE",
"750 1150 QCURVE SMOOTH",
"1251 1150 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1025 600 QCURVE SMOOTH",
"1025 1000 OFFCURVE",
"750 1000 QCURVE SMOOTH",
"475 1000 OFFCURVE",
"475 600 QCURVE SMOOTH",
"475 200 OFFCURVE",
"750 200 QCURVE SMOOTH",
"1025 200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"976 600 QCURVE SMOOTH",
"976 250 OFFCURVE",
"750 250 QCURVE SMOOTH",
"526 250 OFFCURVE",
"526 600 QCURVE SMOOTH",
"526 950 OFFCURVE",
"750 950 QCURVE SMOOTH",
"976 950 OFFCURVE"
);
}
);
width = 1500;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1300 600 QCURVE SMOOTH",
"1300 1200 OFFCURVE",
"750 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 OFFCURVE",
"750 0 QCURVE SMOOTH",
"1300 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1197 600 QCURVE SMOOTH",
"1197 88 OFFCURVE",
"750 88 QCURVE SMOOTH",
"305 88 OFFCURVE",
"305 600 QCURVE SMOOTH",
"305 1112 OFFCURVE",
"750 1112 QCURVE SMOOTH",
"1197 1112 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1025 600 QCURVE SMOOTH",
"1025 1000 OFFCURVE",
"750 1000 QCURVE SMOOTH",
"475 1000 OFFCURVE",
"475 600 QCURVE SMOOTH",
"475 200 OFFCURVE",
"750 200 QCURVE SMOOTH",
"1025 200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"922 600 QCURVE SMOOTH",
"922 288 OFFCURVE",
"750 288 QCURVE SMOOTH",
"580 288 OFFCURVE",
"580 600 QCURVE SMOOTH",
"580 912 OFFCURVE",
"750 912 QCURVE SMOOTH",
"922 912 OFFCURVE"
);
}
);
width = 1500;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1300 600 QCURVE SMOOTH",
"1300 1200 OFFCURVE",
"750 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 OFFCURVE",
"750 0 QCURVE SMOOTH",
"1300 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1163 600 QCURVE SMOOTH",
"1163 100 OFFCURVE",
"750 100 QCURVE SMOOTH",
"338 100 OFFCURVE",
"338 600 QCURVE SMOOTH",
"338 1100 OFFCURVE",
"750 1100 QCURVE SMOOTH",
"1163 1100 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1025 600 QCURVE SMOOTH",
"1025 1000 OFFCURVE",
"750 1000 QCURVE SMOOTH",
"475 1000 OFFCURVE",
"475 600 QCURVE SMOOTH",
"475 200 OFFCURVE",
"750 200 QCURVE SMOOTH",
"1025 200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"888 600 QCURVE SMOOTH",
"888 300 OFFCURVE",
"750 300 QCURVE SMOOTH",
"613 300 OFFCURVE",
"613 600 QCURVE SMOOTH",
"613 900 OFFCURVE",
"750 900 QCURVE SMOOTH",
"888 900 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 76 values pushed */\0120 5 11 1 6 7 5 6 105 0 7 10 1 4 3 7 4 105 9 1 2 2 1 97 0 1 1 17 77 0 3 3 0 97 8 1 0 0 19 0 78 25 24 17 16 9 8 1 0 29 27 24 31 25 31 21 19 16 23 17 23 13 11 8 15 9 15 5 3 0 7 1 7 12 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1500;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1300 600 QCURVE SMOOTH",
"1300 1200 OFFCURVE",
"750 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 OFFCURVE",
"750 0 QCURVE SMOOTH",
"1300 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1163 600 QCURVE SMOOTH",
"1163 100 OFFCURVE",
"750 100 QCURVE SMOOTH",
"338 100 OFFCURVE",
"338 600 QCURVE SMOOTH",
"338 1100 OFFCURVE",
"750 1100 QCURVE SMOOTH",
"1163 1100 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1025 600 QCURVE SMOOTH",
"1025 1000 OFFCURVE",
"750 1000 QCURVE SMOOTH",
"475 1000 OFFCURVE",
"475 600 QCURVE SMOOTH",
"475 200 OFFCURVE",
"750 200 QCURVE SMOOTH",
"1025 200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"888 600 QCURVE SMOOTH",
"888 300 OFFCURVE",
"750 300 QCURVE SMOOTH",
"613 300 OFFCURVE",
"613 600 QCURVE SMOOTH",
"613 900 OFFCURVE",
"750 900 QCURVE SMOOTH",
"888 900 OFFCURVE"
);
}
);
width = 1500;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1300 600 QCURVE SMOOTH",
"1300 1200 OFFCURVE",
"750 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 600 QCURVE SMOOTH",
"200 0 OFFCURVE",
"750 0 QCURVE SMOOTH",
"1300 0 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1163 600 QCURVE SMOOTH",
"1163 100 OFFCURVE",
"750 100 QCURVE SMOOTH",
"338 100 OFFCURVE",
"338 600 QCURVE SMOOTH",
"338 1100 OFFCURVE",
"750 1100 QCURVE SMOOTH",
"1163 1100 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1025 600 QCURVE SMOOTH",
"1025 1000 OFFCURVE",
"750 1000 QCURVE SMOOTH",
"475 1000 OFFCURVE",
"475 600 QCURVE SMOOTH",
"475 200 OFFCURVE",
"750 200 QCURVE SMOOTH",
"1025 200 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"888 600 QCURVE SMOOTH",
"888 300 OFFCURVE",
"750 300 QCURVE SMOOTH",
"613 300 OFFCURVE",
"613 600 QCURVE SMOOTH",
"613 900 OFFCURVE",
"750 900 QCURVE SMOOTH",
"888 900 OFFCURVE"
);
}
);
width = 1500;
}
);
note = uni17D9;
unicode = 17D9;
},
{
glyphname = uni17DA;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"250 873 QCURVE SMOOTH",
"250 327 LINE SMOOTH",
"250 0 OFFCURVE",
"575 0 QCURVE SMOOTH",
"903 0 OFFCURVE",
"1388 1054 QCURVE",
"1731 109 LINE",
"1796 109 LINE",
"2013 933 LINE",
"2230 218 LINE",
"2296 218 LINE",
"2451 573 LINE",
"2639 573 LINE",
"2639 633 LINE",
"2429 633 LINE",
"2263 238 LINE",
"2045 978 LINE",
"1980 978 LINE",
"1764 142 LINE",
"1421 1087 LINE",
"1355 1087 LINE",
"1020 400 OFFCURVE",
"703 50 OFFCURVE",
"578 50 QCURVE SMOOTH",
"300 50 OFFCURVE",
"300 327 QCURVE SMOOTH",
"300 873 LINE SMOOTH",
"300 1150 OFFCURVE",
"575 1150 QCURVE SMOOTH",
"850 1150 OFFCURVE",
"850 923 QCURVE SMOOTH",
"850 750 OFFCURVE",
"641 750 QCURVE",
"641 700 LINE",
"900 700 OFFCURVE",
"900 921 QCURVE SMOOTH",
"900 1200 OFFCURVE",
"575 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE"
);
}
);
width = 2900;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"200 873 QCURVE SMOOTH",
"200 327 LINE SMOOTH",
"200 0 OFFCURVE",
"575 0 QCURVE SMOOTH",
"903 0 OFFCURVE",
"1179 543 QCURVE SMOOTH",
"1388 954 LINE",
"1701 109 LINE",
"1826 109 LINE",
"2013 763 LINE",
"2200 218 LINE",
"2326 218 LINE",
"2451 543 LINE",
"2639 543 LINE SMOOTH",
"2700 543 OFFCURVE",
"2700 598 QCURVE SMOOTH",
"2700 653 OFFCURVE",
"2639 653 QCURVE SMOOTH",
"2389 653 LINE",
"2263 408 LINE",
"2075 978 LINE",
"1950 978 LINE",
"1764 292 LINE",
"1451 1087 LINE",
"1325 1087 LINE",
"1079 598 LINE SMOOTH",
"954 347 OFFCURVE",
"703 106 OFFCURVE",
"578 106 QCURVE SMOOTH",
"325 106 OFFCURVE",
"325 327 QCURVE SMOOTH",
"325 873 LINE SMOOTH",
"325 1091 OFFCURVE",
"578 1091 QCURVE SMOOTH",
"826 1091 OFFCURVE",
"826 873 QCURVE SMOOTH",
"826 763 OFFCURVE",
"641 763 QCURVE SMOOTH",
"578 763 OFFCURVE",
"578 709 QCURVE SMOOTH",
"578 655 OFFCURVE",
"641 655 QCURVE SMOOTH",
"954 655 OFFCURVE",
"954 871 QCURVE SMOOTH",
"954 1200 OFFCURVE",
"575 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 115 values pushed */\01239 1 2 6 26 23 2 9 8 2 76 36 1 2 1 75 0 5 3 6 3 5 6 128 0 6 2 3 6 2 126 0 9 8 10 8 9 10 128 0 10 4 8 10 4 126 0 2 0 1 7 2 1 105 0 7 0 8 9 7 8 103 0 3 3 0 97 12 1 0 0 17 77 0 4 4 11 97 0 11 11 19 11 78 1 0 43 41 38 37 35 34 33 31 29 27 25 24 22 21 18 16 13 11 9 7 5 3 0 46 1 46 13 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 2900;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"200 873 QCURVE SMOOTH",
"200 327 LINE SMOOTH",
"200 0 OFFCURVE",
"575 0 QCURVE SMOOTH",
"903 0 OFFCURVE",
"1179 543 QCURVE SMOOTH",
"1388 954 LINE",
"1701 109 LINE",
"1826 109 LINE",
"2013 763 LINE",
"2200 218 LINE",
"2326 218 LINE",
"2451 543 LINE",
"2639 543 LINE SMOOTH",
"2700 543 OFFCURVE",
"2700 598 QCURVE SMOOTH",
"2700 653 OFFCURVE",
"2639 653 QCURVE SMOOTH",
"2389 653 LINE",
"2263 408 LINE",
"2075 978 LINE",
"1950 978 LINE",
"1764 292 LINE",
"1451 1087 LINE",
"1325 1087 LINE",
"1079 598 LINE SMOOTH",
"954 347 OFFCURVE",
"703 106 OFFCURVE",
"578 106 QCURVE SMOOTH",
"325 106 OFFCURVE",
"325 327 QCURVE SMOOTH",
"325 873 LINE SMOOTH",
"325 1091 OFFCURVE",
"578 1091 QCURVE SMOOTH",
"826 1091 OFFCURVE",
"826 873 QCURVE SMOOTH",
"826 763 OFFCURVE",
"641 763 QCURVE SMOOTH",
"578 763 OFFCURVE",
"578 709 QCURVE SMOOTH",
"578 655 OFFCURVE",
"641 655 QCURVE SMOOTH",
"954 655 OFFCURVE",
"954 871 QCURVE SMOOTH",
"954 1200 OFFCURVE",
"575 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 115 values pushed */\01239 1 2 6 26 23 2 9 8 2 76 36 1 2 1 75 0 5 3 6 3 5 6 128 0 6 2 3 6 2 126 0 9 8 10 8 9 10 128 0 10 4 8 10 4 126 0 2 0 1 7 2 1 105 0 7 0 8 9 7 8 103 0 3 3 0 97 12 1 0 0 17 77 0 4 4 11 97 0 11 11 19 11 78 1 0 43 41 38 37 35 34 33 31 29 27 25 24 22 21 18 16 13 11 9 7 5 3 0 46 1 46 13 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 2900;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"200 873 QCURVE SMOOTH",
"200 327 LINE SMOOTH",
"200 0 OFFCURVE",
"575 0 QCURVE SMOOTH",
"903 0 OFFCURVE",
"1179 543 QCURVE SMOOTH",
"1388 954 LINE",
"1701 109 LINE",
"1826 109 LINE",
"2013 763 LINE",
"2200 218 LINE",
"2326 218 LINE",
"2451 543 LINE",
"2639 543 LINE SMOOTH",
"2700 543 OFFCURVE",
"2700 598 QCURVE SMOOTH",
"2700 653 OFFCURVE",
"2639 653 QCURVE SMOOTH",
"2389 653 LINE",
"2263 408 LINE",
"2075 978 LINE",
"1950 978 LINE",
"1764 292 LINE",
"1451 1087 LINE",
"1325 1087 LINE",
"1079 598 LINE SMOOTH",
"954 347 OFFCURVE",
"703 106 OFFCURVE",
"578 106 QCURVE SMOOTH",
"325 106 OFFCURVE",
"325 327 QCURVE SMOOTH",
"325 873 LINE SMOOTH",
"325 1091 OFFCURVE",
"578 1091 QCURVE SMOOTH",
"826 1091 OFFCURVE",
"826 873 QCURVE SMOOTH",
"826 763 OFFCURVE",
"641 763 QCURVE SMOOTH",
"578 763 OFFCURVE",
"578 709 QCURVE SMOOTH",
"578 655 OFFCURVE",
"641 655 QCURVE SMOOTH",
"954 655 OFFCURVE",
"954 871 QCURVE SMOOTH",
"954 1200 OFFCURVE",
"575 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE"
);
}
);
width = 2900;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"200 873 QCURVE SMOOTH",
"200 327 LINE SMOOTH",
"200 0 OFFCURVE",
"575 0 QCURVE SMOOTH",
"903 0 OFFCURVE",
"1179 543 QCURVE SMOOTH",
"1388 954 LINE",
"1701 109 LINE",
"1826 109 LINE",
"2013 763 LINE",
"2200 218 LINE",
"2326 218 LINE",
"2451 543 LINE",
"2639 543 LINE SMOOTH",
"2700 543 OFFCURVE",
"2700 598 QCURVE SMOOTH",
"2700 653 OFFCURVE",
"2639 653 QCURVE SMOOTH",
"2389 653 LINE",
"2263 408 LINE",
"2075 978 LINE",
"1950 978 LINE",
"1764 292 LINE",
"1451 1087 LINE",
"1325 1087 LINE",
"1079 598 LINE SMOOTH",
"954 347 OFFCURVE",
"703 106 OFFCURVE",
"578 106 QCURVE SMOOTH",
"325 106 OFFCURVE",
"325 327 QCURVE SMOOTH",
"325 873 LINE SMOOTH",
"325 1091 OFFCURVE",
"578 1091 QCURVE SMOOTH",
"826 1091 OFFCURVE",
"826 873 QCURVE SMOOTH",
"826 763 OFFCURVE",
"641 763 QCURVE SMOOTH",
"578 763 OFFCURVE",
"578 709 QCURVE SMOOTH",
"578 655 OFFCURVE",
"641 655 QCURVE SMOOTH",
"954 655 OFFCURVE",
"954 871 QCURVE SMOOTH",
"954 1200 OFFCURVE",
"575 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE"
);
}
);
width = 2900;
}
);
note = uni17DA;
unicode = 17DA;
},
{
glyphname = uni17DB;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"200 50 QCURVE SMOOTH",
"100 50 OFFCURVE",
"100 249 QCURVE SMOOTH",
"100 370 OFFCURVE",
"200 370 QCURVE SMOOTH",
"280 370 LINE",
"280 122 LINE SMOOTH",
"280 50 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 625 LINE",
"40 625 LINE",
"40 575 LINE",
"280 575 LINE",
"280 418 LINE",
"200 418 LINE SMOOTH",
"50 418 OFFCURVE",
"50 249 QCURVE SMOOTH",
"50 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"338 0 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 575 LINE",
"498 575 LINE",
"498 625 LINE",
"338 625 LINE",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"200 88 QCURVE SMOOTH",
"128 88 OFFCURVE",
"128 249 QCURVE SMOOTH",
"128 340 OFFCURVE",
"200 340 QCURVE SMOOTH",
"250 340 LINE",
"250 122 LINE SMOOTH",
"250 88 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 644 LINE",
"40 644 LINE",
"40 556 LINE",
"250 556 LINE",
"250 428 LINE",
"200 428 LINE SMOOTH",
"40 428 OFFCURVE",
"40 249 QCURVE SMOOTH",
"40 0 OFFCURVE",
"200 0 QCURVE SMOOTH",
"358 0 OFFCURVE",
"358 122 QCURVE SMOOTH",
"358 556 LINE",
"498 556 LINE",
"498 644 LINE",
"358 644 LINE",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"388 669 LINE",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 669 LINE",
"50 669 LINE",
"50 531 LINE",
"200 531 LINE",
"200 185 LINE SMOOTH",
"200 138 OFFCURVE",
"59 138 QCURVE",
"59 0 LINE",
"238 0 LINE SMOOTH",
"388 0 OFFCURVE",
"388 102 QCURVE SMOOTH",
"388 531 LINE",
"488 531 LINE",
"488 669 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01225 13 2 4 6 1 76 7 1 4 3 1 0 2 4 0 103 0 6 6 5 95 0 5 5 17 77 0 2 2 1 95 0 1 1 19 1 78 18 17 25 17 18 17 34 16 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 188 OFFCURVE",
"39 188 QCURVE",
"39 0 LINE",
"238 0 LINE SMOOTH",
"438 0 OFFCURVE",
"438 102 QCURVE SMOOTH",
"438 506 LINE",
"538 506 LINE",
"538 694 LINE",
"438 694 LINE",
"438 840 LINE",
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 694 LINE",
"40 694 LINE",
"40 506 LINE",
"150 506 LINE",
"150 235 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"558 476 LINE",
"558 714 LINE",
"488 714 LINE",
"488 840 LINE",
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"170 1250 LINE",
"39 1057 LINE SMOOTH",
"20 1029 OFFCURVE",
"20 1005 QCURVE SMOOTH",
"20 980 OFFCURVE",
"40 946 QCURVE SMOOTH",
"100 843 LINE",
"100 714 LINE",
"20 714 LINE",
"20 476 LINE",
"100 476 LINE",
"100 285 LINE SMOOTH",
"100 238 OFFCURVE",
"19 238 QCURVE",
"19 0 LINE",
"288 0 LINE SMOOTH",
"488 0 OFFCURVE",
"488 102 QCURVE SMOOTH",
"488 476 LINE"
);
}
);
width = 588;
}
);
note = uni17DB;
unicode = 17DB;
},
{
glyphname = uni17DC;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"308 917 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 917 QCURVE SMOOTH",
"992 813 OFFCURVE",
"862 813 QCURVE",
"862 759 LINE",
"1050 759 OFFCURVE",
"1050 917 QCURVE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 917 QCURVE SMOOTH",
"250 659 OFFCURVE",
"992 502 OFFCURVE",
"992 283 QCURVE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 283 QCURVE SMOOTH",
"308 387 OFFCURVE",
"438 387 QCURVE",
"438 441 LINE",
"250 441 OFFCURVE",
"250 283 QCURVE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 283 QCURVE SMOOTH",
"1050 541 OFFCURVE",
"308 697 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"675 -10 LINE",
"910 -10 OFFCURVE",
"1150 182 OFFCURVE",
"1150 359 QCURVE SMOOTH",
"1150 513 OFFCURVE",
"914 658 OFFCURVE",
"675 658 QCURVE SMOOTH",
"576 658 OFFCURVE",
"455 684 OFFCURVE",
"388 764 OFFCURVE",
"388 842 QCURVE SMOOTH",
"388 941 OFFCURVE",
"534 1055 OFFCURVE",
"675 1055 QCURVE SMOOTH",
"817 1055 OFFCURVE",
"963 979 OFFCURVE",
"963 910 QCURVE SMOOTH",
"963 851 OFFCURVE",
"922 851 QCURVE SMOOTH",
"862 851 OFFCURVE",
"862 793 QCURVE SMOOTH",
"862 734 OFFCURVE",
"922 734 QCURVE SMOOTH",
"1001 734 OFFCURVE",
"1099 763 OFFCURVE",
"1150 840 OFFCURVE",
"1150 910 QCURVE SMOOTH",
"1150 1057 OFFCURVE",
"911 1210 OFFCURVE",
"675 1210 QCURVE SMOOTH",
"440 1210 OFFCURVE",
"200 1019 OFFCURVE",
"200 842 QCURVE SMOOTH",
"200 688 OFFCURVE",
"436 543 OFFCURVE",
"675 543 QCURVE SMOOTH",
"775 543 OFFCURVE",
"895 518 OFFCURVE",
"963 438 OFFCURVE",
"963 360 QCURVE SMOOTH",
"963 260 OFFCURVE",
"817 146 OFFCURVE",
"675 146 QCURVE SMOOTH",
"533 146 OFFCURVE",
"388 222 OFFCURVE",
"388 292 QCURVE SMOOTH",
"388 350 OFFCURVE",
"429 350 QCURVE SMOOTH",
"458 350 OFFCURVE",
"489 380 OFFCURVE",
"489 408 QCURVE SMOOTH",
"489 468 OFFCURVE",
"429 468 QCURVE SMOOTH",
"350 468 OFFCURVE",
"251 439 OFFCURVE",
"200 363 OFFCURVE",
"200 293 QCURVE SMOOTH",
"200 145 OFFCURVE",
"438 -10 OFFCURVE",
"675 -10 QCURVE",
"675 -10 LINE",
"675 -10 LINE",
"675 -10 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */\0120 7 0 6 9 7 6 105 0 9 0 4 1 9 4 105 0 1 0 2 3 1 2 105 0 8 8 5 97 0 5 5 17 77 0 3 3 0 97 10 1 0 0 19 0 78 3 0 56 54 49 47 44 42 40 38 33 31 27 25 20 18 15 13 10 8 0 62 3 60 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1350;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"675 -10 LINE",
"910 -10 OFFCURVE",
"1150 182 OFFCURVE",
"1150 359 QCURVE SMOOTH",
"1150 513 OFFCURVE",
"914 658 OFFCURVE",
"675 658 QCURVE SMOOTH",
"576 658 OFFCURVE",
"455 684 OFFCURVE",
"388 764 OFFCURVE",
"388 842 QCURVE SMOOTH",
"388 941 OFFCURVE",
"534 1055 OFFCURVE",
"675 1055 QCURVE SMOOTH",
"817 1055 OFFCURVE",
"963 979 OFFCURVE",
"963 910 QCURVE SMOOTH",
"963 851 OFFCURVE",
"922 851 QCURVE SMOOTH",
"862 851 OFFCURVE",
"862 793 QCURVE SMOOTH",
"862 734 OFFCURVE",
"922 734 QCURVE SMOOTH",
"1001 734 OFFCURVE",
"1099 763 OFFCURVE",
"1150 840 OFFCURVE",
"1150 910 QCURVE SMOOTH",
"1150 1057 OFFCURVE",
"911 1210 OFFCURVE",
"675 1210 QCURVE SMOOTH",
"440 1210 OFFCURVE",
"200 1019 OFFCURVE",
"200 842 QCURVE SMOOTH",
"200 688 OFFCURVE",
"436 543 OFFCURVE",
"675 543 QCURVE SMOOTH",
"775 543 OFFCURVE",
"895 518 OFFCURVE",
"963 438 OFFCURVE",
"963 360 QCURVE SMOOTH",
"963 260 OFFCURVE",
"817 146 OFFCURVE",
"675 146 QCURVE SMOOTH",
"533 146 OFFCURVE",
"388 222 OFFCURVE",
"388 292 QCURVE SMOOTH",
"388 350 OFFCURVE",
"429 350 QCURVE SMOOTH",
"458 350 OFFCURVE",
"489 380 OFFCURVE",
"489 408 QCURVE SMOOTH",
"489 468 OFFCURVE",
"429 468 QCURVE SMOOTH",
"350 468 OFFCURVE",
"251 439 OFFCURVE",
"200 363 OFFCURVE",
"200 293 QCURVE SMOOTH",
"200 145 OFFCURVE",
"438 -10 OFFCURVE",
"675 -10 QCURVE",
"675 -10 LINE",
"675 -10 LINE",
"675 -10 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */\0120 7 0 6 9 7 6 105 0 9 0 4 1 9 4 105 0 1 0 2 3 1 2 105 0 8 8 5 97 0 5 5 17 77 0 3 3 0 97 10 1 0 0 19 0 78 3 0 56 54 49 47 44 42 40 38 33 31 27 25 20 18 15 13 10 8 0 62 3 60 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1350;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"675 -10 LINE",
"910 -10 OFFCURVE",
"1150 182 OFFCURVE",
"1150 359 QCURVE SMOOTH",
"1150 513 OFFCURVE",
"914 658 OFFCURVE",
"675 658 QCURVE SMOOTH",
"576 658 OFFCURVE",
"455 684 OFFCURVE",
"388 764 OFFCURVE",
"388 842 QCURVE SMOOTH",
"388 941 OFFCURVE",
"534 1055 OFFCURVE",
"675 1055 QCURVE SMOOTH",
"817 1055 OFFCURVE",
"963 979 OFFCURVE",
"963 910 QCURVE SMOOTH",
"963 851 OFFCURVE",
"922 851 QCURVE SMOOTH",
"862 851 OFFCURVE",
"862 793 QCURVE SMOOTH",
"862 734 OFFCURVE",
"922 734 QCURVE SMOOTH",
"1001 734 OFFCURVE",
"1099 763 OFFCURVE",
"1150 840 OFFCURVE",
"1150 910 QCURVE SMOOTH",
"1150 1057 OFFCURVE",
"911 1210 OFFCURVE",
"675 1210 QCURVE SMOOTH",
"440 1210 OFFCURVE",
"200 1019 OFFCURVE",
"200 842 QCURVE SMOOTH",
"200 688 OFFCURVE",
"436 543 OFFCURVE",
"675 543 QCURVE SMOOTH",
"775 543 OFFCURVE",
"895 518 OFFCURVE",
"963 438 OFFCURVE",
"963 360 QCURVE SMOOTH",
"963 260 OFFCURVE",
"817 146 OFFCURVE",
"675 146 QCURVE SMOOTH",
"533 146 OFFCURVE",
"388 222 OFFCURVE",
"388 292 QCURVE SMOOTH",
"388 350 OFFCURVE",
"429 350 QCURVE SMOOTH",
"458 350 OFFCURVE",
"489 380 OFFCURVE",
"489 408 QCURVE SMOOTH",
"489 468 OFFCURVE",
"429 468 QCURVE SMOOTH",
"350 468 OFFCURVE",
"251 439 OFFCURVE",
"200 363 OFFCURVE",
"200 293 QCURVE SMOOTH",
"200 145 OFFCURVE",
"438 -10 OFFCURVE",
"675 -10 QCURVE",
"675 -10 LINE",
"675 -10 LINE",
"675 -10 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */\0120 7 0 6 9 7 6 105 0 9 0 4 1 9 4 105 0 1 0 2 3 1 2 105 0 8 8 5 97 0 5 5 17 77 0 3 3 0 97 10 1 0 0 19 0 78 3 0 56 54 49 47 44 42 40 38 33 31 27 25 20 18 15 13 10 8 0 62 3 60 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1350;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"675 -10 LINE",
"910 -10 OFFCURVE",
"1150 182 OFFCURVE",
"1150 359 QCURVE SMOOTH",
"1150 513 OFFCURVE",
"914 658 OFFCURVE",
"675 658 QCURVE SMOOTH",
"576 658 OFFCURVE",
"455 684 OFFCURVE",
"388 764 OFFCURVE",
"388 842 QCURVE SMOOTH",
"388 941 OFFCURVE",
"534 1055 OFFCURVE",
"675 1055 QCURVE SMOOTH",
"817 1055 OFFCURVE",
"963 979 OFFCURVE",
"963 910 QCURVE SMOOTH",
"963 851 OFFCURVE",
"922 851 QCURVE SMOOTH",
"862 851 OFFCURVE",
"862 793 QCURVE SMOOTH",
"862 734 OFFCURVE",
"922 734 QCURVE SMOOTH",
"1001 734 OFFCURVE",
"1099 763 OFFCURVE",
"1150 840 OFFCURVE",
"1150 910 QCURVE SMOOTH",
"1150 1057 OFFCURVE",
"911 1210 OFFCURVE",
"675 1210 QCURVE SMOOTH",
"440 1210 OFFCURVE",
"200 1019 OFFCURVE",
"200 842 QCURVE SMOOTH",
"200 688 OFFCURVE",
"436 543 OFFCURVE",
"675 543 QCURVE SMOOTH",
"775 543 OFFCURVE",
"895 518 OFFCURVE",
"963 438 OFFCURVE",
"963 360 QCURVE SMOOTH",
"963 260 OFFCURVE",
"817 146 OFFCURVE",
"675 146 QCURVE SMOOTH",
"533 146 OFFCURVE",
"388 222 OFFCURVE",
"388 292 QCURVE SMOOTH",
"388 350 OFFCURVE",
"429 350 QCURVE SMOOTH",
"458 350 OFFCURVE",
"489 380 OFFCURVE",
"489 408 QCURVE SMOOTH",
"489 468 OFFCURVE",
"429 468 QCURVE SMOOTH",
"350 468 OFFCURVE",
"251 439 OFFCURVE",
"200 363 OFFCURVE",
"200 293 QCURVE SMOOTH",
"200 145 OFFCURVE",
"438 -10 OFFCURVE",
"675 -10 QCURVE",
"675 -10 LINE",
"675 -10 LINE",
"675 -10 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */\0120 7 0 6 9 7 6 105 0 9 0 4 1 9 4 105 0 1 0 2 3 1 2 105 0 8 8 5 97 0 5 5 17 77 0 3 3 0 97 10 1 0 0 19 0 78 3 0 56 54 49 47 44 42 40 38 33 31 27 25 20 18 15 13 10 8 0 62 3 60 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 1350;
}
);
note = uni17DC;
unicode = 17DC;
},
{
glyphname = uni17DD;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-992 1689 OFFCURVE",
"-651 1689 QCURVE SMOOTH",
"-308 1689 OFFCURVE",
"-308 1470 QCURVE",
"-250 1470 LINE",
"-250 1741 OFFCURVE",
"-650 1741 QCURVE SMOOTH",
"-1050 1741 OFFCURVE",
"-1050 1470 QCURVE",
"-992 1470 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-948 1681 OFFCURVE",
"-645 1681 QCURVE SMOOTH",
"-343 1681 OFFCURVE",
"-343 1470 QCURVE",
"-229 1470 LINE",
"-229 1771 OFFCURVE",
"-644 1771 QCURVE SMOOTH",
"-1059 1771 OFFCURVE",
"-1059 1470 QCURVE",
"-948 1470 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1089 1470 LINE",
"-898 1470 LINE",
"-898 1651 OFFCURVE",
"-645 1651 QCURVE SMOOTH",
"-393 1651 OFFCURVE",
"-393 1470 QCURVE",
"-199 1470 LINE",
"-199 1771 OFFCURVE",
"-644 1771 QCURVE SMOOTH",
"-1089 1771 OFFCURVE",
"-1089 1470 QCURVE",
"-1089 1470 LINE",
"-1089 1470 LINE",
"-1089 1470 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 2 2 1 113 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 33 17 35 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1089 1470 LINE",
"-898 1470 LINE",
"-898 1651 OFFCURVE",
"-645 1651 QCURVE SMOOTH",
"-393 1651 OFFCURVE",
"-393 1470 QCURVE",
"-199 1470 LINE",
"-199 1771 OFFCURVE",
"-644 1771 QCURVE SMOOTH",
"-1089 1771 OFFCURVE",
"-1089 1470 QCURVE",
"-1089 1470 LINE",
"-1089 1470 LINE",
"-1089 1470 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 2 2 1 113 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 33 17 35 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1089 1470 LINE",
"-898 1470 LINE",
"-898 1651 OFFCURVE",
"-645 1651 QCURVE SMOOTH",
"-393 1651 OFFCURVE",
"-393 1470 QCURVE",
"-199 1470 LINE",
"-199 1771 OFFCURVE",
"-644 1771 QCURVE SMOOTH",
"-1089 1771 OFFCURVE",
"-1089 1470 QCURVE",
"-1089 1470 LINE",
"-1089 1470 LINE",
"-1089 1470 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0123 1 1 2 2 1 113 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 2 1 134 0 0 2 2 0 89 0 0 0 2 97 0 2 0 2 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 33 17 35 4 7 26 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 0;
}
);
note = uni17DD;
unicode = 17DD;
},
{
glyphname = uni17E0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 820 QCURVE SMOOTH",
"992 380 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 380 QCURVE SMOOTH",
"308 820 LINE SMOOTH",
"308 1150 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 380 QCURVE SMOOTH",
"1050 820 LINE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 820 QCURVE SMOOTH",
"250 380 LINE SMOOTH",
"250 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 820 QCURVE SMOOTH",
"962 380 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 380 QCURVE SMOOTH",
"338 820 LINE SMOOTH",
"338 1112 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 380 QCURVE SMOOTH",
"1070 820 LINE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 820 QCURVE SMOOTH",
"230 380 LINE SMOOTH",
"230 0 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 1062 QCURVE SMOOTH",
"912 1062 OFFCURVE",
"912 820 QCURVE SMOOTH",
"912 380 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 380 QCURVE SMOOTH",
"388 820 LINE SMOOTH",
"388 1062 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 380 QCURVE SMOOTH",
"1100 820 LINE SMOOTH",
"1100 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 820 QCURVE SMOOTH",
"200 380 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0120 1 1 2 97 0 2 2 17 77 0 0 0 3 97 0 3 3 19 3 78 35 35 35 34 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 820 LINE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 820 QCURVE SMOOTH",
"862 380 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 380 QCURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 380 QCURVE SMOOTH",
"1150 820 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 820 QCURVE SMOOTH",
"150 380 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 854 QCURVE SMOOTH",
"812 396 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 396 QCURVE SMOOTH",
"488 854 LINE SMOOTH",
"488 1012 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 396 QCURVE SMOOTH",
"1200 854 LINE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 854 QCURVE SMOOTH",
"100 396 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17E0;
unicode = 17E0;
},
{
glyphname = uni17E1;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 320 QCURVE",
"250 320 LINE",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 320 QCURVE SMOOTH",
"1050 880 LINE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 880 QCURVE SMOOTH",
"250 760 LINE SMOOTH",
"250 550 OFFCURVE",
"515 550 QCURVE SMOOTH",
"650 550 LINE",
"650 602 LINE",
"515 602 LINE SMOOTH",
"308 602 OFFCURVE",
"308 760 QCURVE SMOOTH",
"308 880 LINE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 880 QCURVE SMOOTH",
"992 320 LINE SMOOTH",
"992 50 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 320 QCURVE",
"230 320 LINE",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 320 QCURVE SMOOTH",
"1070 880 LINE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 880 QCURVE SMOOTH",
"230 760 LINE SMOOTH",
"230 540 OFFCURVE",
"515 540 QCURVE SMOOTH",
"650 540 LINE",
"650 630 LINE",
"515 630 LINE SMOOTH",
"338 630 OFFCURVE",
"338 760 QCURVE SMOOTH",
"338 880 LINE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 880 QCURVE SMOOTH",
"962 320 LINE SMOOTH",
"962 88 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 320 QCURVE",
"200 320 LINE",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 320 QCURVE SMOOTH",
"1100 880 LINE SMOOTH",
"1100 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 880 QCURVE SMOOTH",
"200 760 LINE SMOOTH",
"200 520 OFFCURVE",
"515 520 QCURVE SMOOTH",
"650 520 LINE",
"650 680 LINE",
"515 680 LINE SMOOTH",
"388 680 OFFCURVE",
"388 760 QCURVE SMOOTH",
"388 880 LINE SMOOTH",
"388 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"912 1062 OFFCURVE",
"912 880 QCURVE SMOOTH",
"912 320 LINE SMOOTH",
"912 138 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 5 2 6 6 5 114 0 1 0 2 5 1 2 105 0 0 0 3 97 0 3 3 17 77 0 6 6 4 98 0 4 4 19 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 5 2 6 2 5 6 128 0 1 0 2 5 1 2 105 0 0 0 3 97 0 3 3 17 77 0 6 6 4 98 0 4 4 19 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01233 17 35 35 33 35 34 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 320 QCURVE",
"150 320 LINE",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 320 QCURVE SMOOTH",
"1150 880 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 880 QCURVE SMOOTH",
"150 760 LINE SMOOTH",
"150 520 OFFCURVE",
"515 520 QCURVE SMOOTH",
"650 520 LINE",
"650 680 LINE",
"515 680 LINE SMOOTH",
"438 680 OFFCURVE",
"438 760 QCURVE SMOOTH",
"438 880 LINE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 880 QCURVE SMOOTH",
"862 320 LINE SMOOTH",
"862 188 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 333 QCURVE",
"100 333 LINE",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 333 QCURVE SMOOTH",
"1200 917 LINE SMOOTH",
"1200 1250 OFFCURVE",
"650 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 917 QCURVE SMOOTH",
"100 792 LINE SMOOTH",
"100 542 OFFCURVE",
"515 542 QCURVE SMOOTH",
"650 542 LINE",
"650 708 LINE",
"565 708 LINE SMOOTH",
"488 708 OFFCURVE",
"488 792 QCURVE SMOOTH",
"488 917 LINE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 917 QCURVE SMOOTH",
"812 333 LINE SMOOTH",
"812 238 OFFCURVE"
);
}
);
width = 1300;
}
);
note = uni17E1;
unicode = 17E1;
},
{
glyphname = uni17E2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"920 976 LINE",
"630 1200 LINE",
"572 1200 LINE",
"572 620 LINE",
"730 620 LINE",
"730 682 LINE",
"630 682 LINE",
"630 1122 LINE",
"920 898 LINE",
"1230 1122 LINE",
"1230 400 LINE SMOOTH",
"1230 50 OFFCURVE",
"769 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 400 QCURVE SMOOTH",
"308 1300 LINE SMOOTH",
"308 1450 OFFCURVE",
"185 1450 QCURVE SMOOTH",
"120 1450 LINE",
"120 1400 LINE",
"185 1400 LINE SMOOTH",
"250 1400 OFFCURVE",
"250 1300 QCURVE SMOOTH",
"250 400 LINE SMOOTH",
"250 0 OFFCURVE",
"769 0 QCURVE SMOOTH",
"1288 0 OFFCURVE",
"1288 400 QCURVE SMOOTH",
"1288 1200 LINE",
"1230 1200 LINE"
);
}
);
width = 1538;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"930 976 LINE",
"670 1200 LINE",
"552 1200 LINE",
"552 620 LINE",
"770 620 LINE",
"770 720 LINE",
"670 720 LINE",
"670 1082 LINE",
"930 858 LINE",
"1200 1082 LINE",
"1200 400 LINE SMOOTH",
"1200 88 OFFCURVE",
"769 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 400 QCURVE SMOOTH",
"338 1300 LINE SMOOTH",
"338 1450 OFFCURVE",
"165 1450 QCURVE SMOOTH",
"100 1450 LINE",
"100 1350 LINE",
"165 1350 LINE SMOOTH",
"230 1350 OFFCURVE",
"230 1300 QCURVE SMOOTH",
"230 400 LINE SMOOTH",
"230 0 OFFCURVE",
"769 0 QCURVE SMOOTH",
"1308 0 OFFCURVE",
"1308 400 QCURVE SMOOTH",
"1308 1200 LINE",
"1200 1200 LINE"
);
}
);
width = 1538;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"940 1026 LINE",
"740 1200 LINE",
"542 1200 LINE",
"542 600 LINE",
"790 600 LINE",
"790 750 LINE",
"740 750 LINE",
"740 1032 LINE",
"940 858 LINE",
"1150 1032 LINE",
"1150 400 LINE SMOOTH",
"1150 138 OFFCURVE",
"769 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 400 QCURVE SMOOTH",
"388 1300 LINE SMOOTH",
"388 1450 OFFCURVE",
"200 1450 QCURVE SMOOTH",
"100 1450 LINE",
"100 1300 LINE",
"200 1300 LINE",
"200 400 LINE SMOOTH",
"200 0 OFFCURVE",
"769 0 QCURVE SMOOTH",
"1338 0 OFFCURVE",
"1338 400 QCURVE SMOOTH",
"1338 1200 LINE",
"1150 1200 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01226 19 18 17 4 4 6 1 76 0 2 0 1 6 2 1 103 0 4 0 5 3 4 5 104 8 7 2 6 6 17 77 0 3 3 0 97 0 0 0 19 0 78 0 0 0 27 0 27 17 17 21 35 33 18 34 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1538;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1170 1200 LINE",
"1010 1076 LINE",
"860 1200 LINE",
"562 1200 LINE",
"562 600 LINE",
"910 600 LINE",
"910 750 LINE",
"860 750 LINE",
"860 982 LINE",
"1010 858 LINE",
"1170 982 LINE",
"1170 400 LINE SMOOTH",
"1170 188 OFFCURVE",
"804 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 400 QCURVE SMOOTH",
"438 1300 LINE SMOOTH",
"438 1450 OFFCURVE",
"150 1450 QCURVE SMOOTH",
"50 1450 LINE",
"50 1300 LINE",
"150 1300 LINE",
"150 400 LINE SMOOTH",
"150 0 OFFCURVE",
"804 0 QCURVE SMOOTH",
"1458 0 OFFCURVE",
"1458 400 QCURVE SMOOTH",
"1458 1200 LINE"
);
}
);
width = 1608;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"612 1250 LINE",
"612 600 LINE",
"1010 600 LINE",
"1010 750 LINE",
"960 750 LINE",
"960 982 LINE",
"1036 888 LINE",
"1120 982 LINE",
"1120 400 LINE SMOOTH",
"1120 238 OFFCURVE",
"804 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 400 QCURVE SMOOTH",
"488 1300 LINE SMOOTH",
"488 1450 OFFCURVE",
"150 1450 QCURVE SMOOTH",
"20 1450 LINE",
"20 1300 LINE",
"100 1300 LINE",
"100 400 LINE SMOOTH",
"100 0 OFFCURVE",
"804 0 QCURVE SMOOTH",
"1508 0 OFFCURVE",
"1508 400 QCURVE SMOOTH",
"1508 1250 LINE",
"1120 1250 LINE",
"1036 1156 LINE",
"960 1250 LINE"
);
}
);
width = 1608;
}
);
note = uni17E2;
unicode = 17E2;
},
{
glyphname = uni17E3;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"911 0 LINE",
"911 840 LINE SMOOTH",
"911 1150 OFFCURVE",
"1176 1150 QCURVE SMOOTH",
"1456 1150 OFFCURVE",
"1456 840 QCURVE SMOOTH",
"1456 0 LINE",
"1514 0 LINE",
"1514 840 LINE SMOOTH",
"1514 1200 OFFCURVE",
"1176 1200 QCURVE SMOOTH",
"955 1200 OFFCURVE",
"881 1021 QCURVE",
"807 1200 OFFCURVE",
"588 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 850 QCURVE SMOOTH",
"250 0 LINE",
"458 0 LINE",
"458 50 LINE",
"308 50 LINE",
"308 840 LINE SMOOTH",
"308 1150 OFFCURVE",
"588 1150 QCURVE SMOOTH",
"853 1150 OFFCURVE",
"853 840 QCURVE SMOOTH",
"853 0 LINE"
);
}
);
width = 1764;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1176 1112 QCURVE SMOOTH",
"1426 1112 OFFCURVE",
"1426 840 QCURVE SMOOTH",
"1426 0 LINE",
"1534 0 LINE",
"1534 840 LINE SMOOTH",
"1534 1200 OFFCURVE",
"1176 1200 QCURVE SMOOTH",
"975 1200 OFFCURVE",
"881 1071 QCURVE",
"787 1200 OFFCURVE",
"588 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 850 QCURVE SMOOTH",
"230 0 LINE",
"488 0 LINE",
"488 88 LINE",
"338 88 LINE",
"338 840 LINE SMOOTH",
"338 1112 OFFCURVE",
"588 1112 QCURVE SMOOTH",
"828 1112 OFFCURVE",
"828 840 QCURVE SMOOTH",
"828 0 LINE",
"936 0 LINE",
"936 840 LINE SMOOTH",
"936 1112 OFFCURVE"
);
}
);
width = 1764;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"1176 1062 QCURVE SMOOTH",
"1376 1062 OFFCURVE",
"1376 840 QCURVE SMOOTH",
"1376 0 LINE",
"1564 0 LINE",
"1564 840 LINE SMOOTH",
"1564 1200 OFFCURVE",
"1176 1200 QCURVE SMOOTH",
"975 1200 OFFCURVE",
"881 1111 QCURVE",
"787 1200 OFFCURVE",
"588 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 850 QCURVE SMOOTH",
"200 0 LINE",
"488 0 LINE",
"488 138 LINE",
"388 138 LINE",
"388 840 LINE SMOOTH",
"388 1062 OFFCURVE",
"588 1062 QCURVE SMOOTH",
"788 1062 OFFCURVE",
"788 840 QCURVE SMOOTH",
"788 0 LINE",
"976 0 LINE",
"976 840 LINE SMOOTH",
"976 1062 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\01216 1 1 4 1 76 7 1 1 1 4 97 5 1 4 4 17 77 0 2 2 0 95 6 3 2 0 0 19 0 78 34 18 34 34 17 18 34 17 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1764;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1026 1012 OFFCURVE",
"1176 1012 QCURVE SMOOTH",
"1326 1012 OFFCURVE",
"1326 840 QCURVE SMOOTH",
"1326 0 LINE",
"1614 0 LINE",
"1614 840 LINE SMOOTH",
"1614 1200 OFFCURVE",
"1176 1200 QCURVE SMOOTH",
"975 1200 OFFCURVE",
"881 1111 QCURVE",
"787 1200 OFFCURVE",
"588 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 850 QCURVE SMOOTH",
"150 0 LINE",
"538 0 LINE",
"538 138 LINE",
"438 138 LINE",
"438 840 LINE SMOOTH",
"438 1012 OFFCURVE",
"588 1012 QCURVE SMOOTH",
"738 1012 OFFCURVE",
"738 840 QCURVE SMOOTH",
"738 0 LINE",
"1026 0 LINE",
"1026 840 LINE SMOOTH"
);
}
);
width = 1764;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1076 1012 OFFCURVE",
"1176 1012 QCURVE SMOOTH",
"1276 1012 OFFCURVE",
"1276 840 QCURVE SMOOTH",
"1276 0 LINE",
"1664 0 LINE",
"1664 840 LINE SMOOTH",
"1664 1250 OFFCURVE",
"1206 1250 QCURVE SMOOTH",
"975 1250 OFFCURVE",
"881 1141 QCURVE",
"787 1250 OFFCURVE",
"558 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 850 QCURVE SMOOTH",
"100 0 LINE",
"568 0 LINE",
"568 138 LINE",
"488 138 LINE",
"488 840 LINE SMOOTH",
"488 1012 OFFCURVE",
"588 1012 QCURVE SMOOTH",
"688 1012 OFFCURVE",
"688 840 QCURVE SMOOTH",
"688 0 LINE",
"1076 0 LINE",
"1076 840 LINE SMOOTH"
);
}
);
width = 1764;
}
);
note = uni17E3;
unicode = 17E3;
},
{
glyphname = uni17E4;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"200 1460 QCURVE SMOOTH",
"120 1460 LINE",
"120 1418 LINE",
"200 1418 LINE SMOOTH",
"250 1418 OFFCURVE",
"250 1310 QCURVE SMOOTH",
"250 400 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1000 0 LINE",
"1050 50 LINE",
"838 448 LINE",
"838 800 LINE SMOOTH",
"838 888 OFFCURVE",
"900 888 QCURVE SMOOTH",
"1050 888 LINE",
"1050 938 LINE",
"900 938 LINE SMOOTH",
"780 938 OFFCURVE",
"780 800 QCURVE SMOOTH",
"780 448 LINE",
"1000 50 LINE",
"650 50 LINE SMOOTH",
"308 50 OFFCURVE",
"308 400 QCURVE SMOOTH",
"308 1310 LINE SMOOTH",
"308 1460 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"180 1460 QCURVE SMOOTH",
"100 1460 LINE",
"100 1380 LINE",
"180 1380 LINE SMOOTH",
"230 1380 OFFCURVE",
"230 1310 QCURVE SMOOTH",
"230 400 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1020 0 LINE",
"1070 88 LINE",
"858 448 LINE",
"858 800 LINE SMOOTH",
"858 850 OFFCURVE",
"920 850 QCURVE SMOOTH",
"1070 850 LINE",
"1070 938 LINE",
"920 938 LINE SMOOTH",
"750 938 OFFCURVE",
"750 800 QCURVE SMOOTH",
"750 448 LINE",
"970 88 LINE",
"650 88 LINE SMOOTH",
"338 88 OFFCURVE",
"338 400 QCURVE SMOOTH",
"338 1310 LINE SMOOTH",
"338 1460 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"200 1460 QCURVE SMOOTH",
"100 1460 LINE",
"100 1300 LINE",
"200 1300 LINE",
"200 400 LINE SMOOTH",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 LINE",
"1100 138 LINE",
"888 498 LINE",
"888 800 LINE",
"1100 800 LINE",
"1100 938 LINE",
"900 938 LINE SMOOTH",
"800 938 OFFCURVE",
"700 875 OFFCURVE",
"700 800 QCURVE SMOOTH",
"700 448 LINE",
"970 138 LINE",
"650 138 LINE SMOOTH",
"388 138 OFFCURVE",
"388 400 QCURVE SMOOTH",
"388 1310 LINE SMOOTH",
"388 1460 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */\01213 5 2 0 2 1 76 14 1 0 1 75 0 5 0 4 1 5 4 103 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 33 18 35 17 36 34 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 1310 LINE SMOOTH",
"438 1460 OFFCURVE",
"150 1460 QCURVE SMOOTH",
"50 1460 LINE",
"50 1300 LINE",
"150 1300 LINE",
"150 400 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1100 0 LINE",
"1150 138 LINE",
"988 498 LINE",
"988 750 LINE",
"1150 750 LINE",
"1150 938 LINE",
"1000 938 LINE SMOOTH",
"850 938 OFFCURVE",
"700 875 OFFCURVE",
"700 800 QCURVE SMOOTH",
"700 448 LINE",
"920 188 LINE",
"650 188 LINE SMOOTH",
"438 188 OFFCURVE",
"438 400 QCURVE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 1310 LINE SMOOTH",
"488 1460 OFFCURVE",
"150 1460 QCURVE SMOOTH",
"20 1460 LINE",
"20 1250 LINE",
"100 1250 LINE",
"100 400 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 LINE",
"1200 188 LINE",
"1038 498 LINE",
"1038 750 LINE",
"1200 750 LINE",
"1200 988 LINE",
"950 988 LINE SMOOTH",
"800 988 OFFCURVE",
"650 875 OFFCURVE",
"650 800 QCURVE SMOOTH",
"650 448 LINE",
"920 238 LINE",
"650 238 LINE SMOOTH",
"488 238 OFFCURVE",
"488 400 QCURVE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17E4;
unicode = 17E4;
},
{
glyphname = uni17E5;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"376 1055 OFFCURVE",
"472 1092 QCURVE",
"614 1023 OFFCURVE",
"770 1023 QCURVE SMOOTH",
"1050 1023 OFFCURVE",
"1050 1209 QCURVE SMOOTH",
"1050 1570 LINE",
"992 1570 LINE",
"992 1209 LINE SMOOTH",
"992 1073 OFFCURVE",
"770 1073 QCURVE SMOOTH",
"656 1073 OFFCURVE",
"535 1118 QCURVE",
"650 1174 OFFCURVE",
"650 1236 QCURVE SMOOTH",
"650 1370 OFFCURVE",
"480 1370 QCURVE SMOOTH",
"320 1370 OFFCURVE",
"320 1236 QCURVE SMOOTH",
"320 1164 OFFCURVE",
"408 1117 QCURVE",
"357 1100 OFFCURVE",
"250 987 OFFCURVE",
"250 890 QCURVE SMOOTH",
"250 330 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"998 0 LINE",
"1050 50 LINE",
"838 398 LINE",
"838 650 LINE SMOOTH",
"838 750 OFFCURVE",
"888 750 QCURVE SMOOTH",
"1050 750 LINE",
"1050 800 LINE",
"888 800 LINE SMOOTH",
"780 800 OFFCURVE",
"780 650 QCURVE SMOOTH",
"780 368 LINE",
"1000 50 LINE",
"650 50 LINE SMOOTH",
"308 50 OFFCURVE",
"308 330 QCURVE SMOOTH",
"308 890 LINE SMOOTH",
"308 939 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"587 1236 QCURVE SMOOTH",
"587 1190 OFFCURVE",
"460 1140 QCURVE",
"380 1190 OFFCURVE",
"380 1236 QCURVE SMOOTH",
"380 1314 OFFCURVE",
"484 1314 QCURVE SMOOTH",
"587 1314 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"386 1025 OFFCURVE",
"472 1054 QCURVE",
"614 985 OFFCURVE",
"770 985 QCURVE SMOOTH",
"1070 985 OFFCURVE",
"1070 1209 QCURVE SMOOTH",
"1070 1570 LINE",
"962 1570 LINE",
"962 1209 LINE SMOOTH",
"962 1073 OFFCURVE",
"770 1073 QCURVE SMOOTH",
"696 1073 OFFCURVE",
"565 1103 QCURVE",
"670 1174 OFFCURVE",
"670 1226 QCURVE SMOOTH",
"670 1370 OFFCURVE",
"480 1370 QCURVE SMOOTH",
"300 1370 OFFCURVE",
"300 1226 QCURVE SMOOTH",
"300 1164 OFFCURVE",
"368 1107 QCURVE",
"337 1100 OFFCURVE",
"230 987 OFFCURVE",
"230 890 QCURVE SMOOTH",
"230 330 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1018 0 LINE",
"1070 88 LINE",
"858 398 LINE",
"858 650 LINE SMOOTH",
"858 712 OFFCURVE",
"908 712 QCURVE SMOOTH",
"1070 712 LINE",
"1070 800 LINE",
"908 800 LINE SMOOTH",
"750 800 OFFCURVE",
"750 650 QCURVE SMOOTH",
"750 368 LINE",
"970 88 LINE",
"650 88 LINE SMOOTH",
"338 88 OFFCURVE",
"338 330 QCURVE SMOOTH",
"338 890 LINE SMOOTH",
"338 939 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"567 1226 QCURVE SMOOTH",
"567 1190 OFFCURVE",
"460 1140 QCURVE",
"400 1190 OFFCURVE",
"400 1226 QCURVE SMOOTH",
"400 1276 OFFCURVE",
"484 1276 QCURVE SMOOTH",
"567 1276 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"436 985 OFFCURVE",
"472 1004 QCURVE",
"614 955 OFFCURVE",
"770 955 QCURVE SMOOTH",
"928 955 OFFCURVE",
"1011 1025 QCURVE",
"1100 1086 OFFCURVE",
"1100 1209 QCURVE SMOOTH",
"1100 1570 LINE",
"912 1570 LINE",
"912 1209 LINE SMOOTH",
"912 1159 OFFCURVE",
"840 1093 OFFCURVE",
"770 1093 QCURVE SMOOTH",
"696 1093 OFFCURVE",
"595 1123 QCURVE",
"670 1174 OFFCURVE",
"670 1226 QCURVE SMOOTH",
"670 1370 OFFCURVE",
"480 1370 QCURVE SMOOTH",
"300 1370 OFFCURVE",
"300 1226 QCURVE SMOOTH",
"300 1164 OFFCURVE",
"368 1107 QCURVE",
"347 1100 OFFCURVE",
"325 1090 QCURVE SMOOTH",
"200 1037 OFFCURVE",
"200 890 QCURVE SMOOTH",
"200 330 LINE SMOOTH",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1048 0 LINE",
"1100 138 LINE",
"888 398 LINE",
"888 662 LINE",
"1100 662 LINE",
"1100 800 LINE",
"888 800 LINE SMOOTH",
"800 800 OFFCURVE",
"700 675 OFFCURVE",
"700 600 QCURVE SMOOTH",
"700 368 LINE",
"950 138 LINE",
"650 138 LINE SMOOTH",
"388 138 OFFCURVE",
"388 330 QCURVE SMOOTH",
"388 890 LINE SMOOTH",
"388 939 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01231 23 2 5 4 45 1 7 5 13 5 2 0 2 3 76 14 1 0 1 75 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 6 4 6 133 0 4 5 5 4 112 0 5 0 7 1 5 7 106 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 37 values pushed */\0120 6 4 6 133 0 4 5 4 133 0 5 0 7 1 5 7 106 0 1 0 2 0 1 2 103 0 0 0 3 95 0 3 3 19 3 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01236 19 36 41 35 17 36 34 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 939 OFFCURVE",
"472 984 QCURVE",
"614 925 OFFCURVE",
"770 925 QCURVE SMOOTH",
"1150 925 OFFCURVE",
"1150 1209 QCURVE SMOOTH",
"1150 1570 LINE",
"862 1570 LINE",
"862 1209 LINE SMOOTH",
"862 1113 OFFCURVE",
"770 1113 QCURVE SMOOTH",
"696 1113 OFFCURVE",
"595 1123 QCURVE",
"670 1174 OFFCURVE",
"670 1226 QCURVE SMOOTH",
"670 1370 OFFCURVE",
"480 1370 QCURVE SMOOTH",
"250 1370 OFFCURVE",
"250 1226 QCURVE SMOOTH",
"250 1164 OFFCURVE",
"318 1107 QCURVE",
"297 1100 OFFCURVE",
"275 1090 QCURVE SMOOTH",
"150 1037 OFFCURVE",
"150 890 QCURVE SMOOTH",
"150 330 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1098 0 LINE",
"1150 138 LINE",
"988 398 LINE",
"988 612 LINE",
"1150 612 LINE",
"1150 800 LINE",
"888 800 LINE SMOOTH",
"700 800 OFFCURVE",
"700 600 QCURVE SMOOTH",
"700 368 LINE",
"900 188 LINE",
"650 188 LINE SMOOTH",
"438 188 OFFCURVE",
"438 330 QCURVE SMOOTH",
"438 890 LINE SMOOTH"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"488 939 OFFCURVE",
"522 984 QCURVE",
"614 925 OFFCURVE",
"840 925 QCURVE SMOOTH",
"1200 925 OFFCURVE",
"1200 1259 QCURVE SMOOTH",
"1200 1570 LINE",
"812 1570 LINE",
"812 1259 LINE SMOOTH",
"812 1163 OFFCURVE",
"740 1163 QCURVE SMOOTH",
"696 1163 OFFCURVE",
"625 1173 QCURVE",
"670 1224 OFFCURVE",
"670 1276 QCURVE SMOOTH",
"670 1420 OFFCURVE",
"435 1420 QCURVE SMOOTH",
"200 1420 OFFCURVE",
"200 1276 QCURVE SMOOTH",
"200 1214 OFFCURVE",
"268 1157 QCURVE",
"247 1150 OFFCURVE",
"225 1140 QCURVE SMOOTH",
"100 1087 OFFCURVE",
"100 940 QCURVE SMOOTH",
"100 330 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1148 0 LINE",
"1200 188 LINE",
"1038 398 LINE",
"1038 612 LINE",
"1200 612 LINE",
"1200 800 LINE",
"838 800 LINE SMOOTH",
"650 800 OFFCURVE",
"650 600 QCURVE SMOOTH",
"650 368 LINE",
"850 238 LINE",
"650 238 LINE SMOOTH",
"488 238 OFFCURVE",
"488 330 QCURVE SMOOTH",
"488 890 LINE SMOOTH"
);
}
);
width = 1300;
}
);
note = uni17E5;
unicode = 17E5;
},
{
glyphname = uni17E6;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 800 QCURVE SMOOTH",
"992 400 LINE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 350 QCURVE SMOOTH",
"308 620 OFFCURVE",
"550 620 QCURVE SMOOTH",
"700 620 LINE",
"700 670 LINE",
"550 670 LINE SMOOTH",
"250 670 OFFCURVE",
"250 350 QCURVE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 400 QCURVE SMOOTH",
"1050 800 LINE SMOOTH",
"1050 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"356 1200 OFFCURVE",
"308 1046 QCURVE",
"308 1550 LINE",
"250 1550 LINE",
"250 860 LINE",
"308 860 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 800 QCURVE SMOOTH",
"962 400 LINE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 350 QCURVE SMOOTH",
"338 592 OFFCURVE",
"550 592 QCURVE SMOOTH",
"700 592 LINE",
"700 680 LINE",
"550 680 LINE SMOOTH",
"230 680 OFFCURVE",
"230 350 QCURVE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 400 QCURVE SMOOTH",
"1070 800 LINE SMOOTH",
"1070 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"406 1200 OFFCURVE",
"338 1086 QCURVE",
"338 1550 LINE",
"230 1550 LINE",
"230 860 LINE",
"338 860 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"388 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"912 1062 OFFCURVE",
"912 800 QCURVE SMOOTH",
"912 400 LINE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 350 QCURVE SMOOTH",
"388 562 OFFCURVE",
"550 562 QCURVE SMOOTH",
"700 562 LINE",
"700 700 LINE",
"550 700 LINE SMOOTH",
"200 700 OFFCURVE",
"200 350 QCURVE SMOOTH",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 400 QCURVE SMOOTH",
"1100 800 LINE SMOOTH",
"1100 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"516 1200 OFFCURVE",
"388 1146 QCURVE",
"388 1550 LINE",
"200 1550 LINE",
"200 860 LINE",
"388 860 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */\0123 1 6 1 1 76 0 0 8 1 7 3 0 7 103 0 3 0 4 5 3 4 103 0 6 6 1 97 0 1 1 17 77 0 5 5 2 97 0 2 2 19 2 78 0 0 0 28 0 28 35 34 33 34 35 34 17 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 860 LINE",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 800 QCURVE SMOOTH",
"862 400 LINE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 350 QCURVE SMOOTH",
"438 562 OFFCURVE",
"550 562 QCURVE SMOOTH",
"700 562 LINE",
"700 700 LINE",
"550 700 LINE SMOOTH",
"150 700 OFFCURVE",
"150 350 QCURVE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 400 QCURVE SMOOTH",
"1150 800 LINE SMOOTH",
"1150 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"516 1200 OFFCURVE",
"438 1146 QCURVE",
"438 1550 LINE",
"150 1550 LINE",
"150 860 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 1550 LINE",
"100 896 LINE",
"488 896 LINE",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 833 QCURVE SMOOTH",
"812 417 LINE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 365 QCURVE SMOOTH",
"488 585 OFFCURVE",
"600 585 QCURVE SMOOTH",
"700 585 LINE",
"700 729 LINE",
"550 729 LINE SMOOTH",
"100 729 OFFCURVE",
"100 365 QCURVE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 417 QCURVE SMOOTH",
"1200 833 LINE SMOOTH",
"1200 1250 OFFCURVE",
"730 1250 QCURVE SMOOTH",
"566 1250 OFFCURVE",
"488 1194 QCURVE",
"488 1550 LINE"
);
}
);
width = 1300;
}
);
note = uni17E6;
unicode = 17E6;
},
{
glyphname = uni17E7;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 138 LINE SMOOTH",
"992 0 OFFCURVE",
"1171 0 QCURVE SMOOTH",
"1350 0 OFFCURVE",
"1350 138 QCURVE SMOOTH",
"1350 1500 LINE",
"1292 1500 LINE",
"1292 138 LINE SMOOTH",
"1292 50 OFFCURVE",
"1171 50 QCURVE SMOOTH",
"1050 50 OFFCURVE",
"1050 138 QCURVE SMOOTH",
"1050 923 LINE SMOOTH",
"1050 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 0 LINE",
"470 0 LINE",
"470 50 LINE",
"308 50 LINE",
"308 923 LINE SMOOTH"
);
}
);
width = 1600;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"1020 1036 OFFCURVE",
"908 1200 OFFCURVE",
"820 1200 QCURVE SMOOTH",
"730 1200 OFFCURVE",
"625 1066 QCURVE",
"521 1200 OFFCURVE",
"432 1200 QCURVE SMOOTH",
"343 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 0 LINE",
"500 0 LINE",
"500 88 LINE",
"338 88 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"432 1100 QCURVE SMOOTH",
"493 1100 OFFCURVE",
"570 984 QCURVE SMOOTH",
"595 945 OFFCURVE",
"625 945 QCURVE SMOOTH",
"655 945 OFFCURVE",
"680 984 QCURVE SMOOTH",
"758 1100 OFFCURVE",
"820 1100 QCURVE SMOOTH",
"912 1100 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 138 LINE SMOOTH",
"912 0 OFFCURVE",
"1141 0 QCURVE SMOOTH",
"1370 0 OFFCURVE",
"1370 138 QCURVE SMOOTH",
"1370 1500 LINE",
"1262 1500 LINE",
"1262 138 LINE SMOOTH",
"1262 88 OFFCURVE",
"1141 88 QCURVE SMOOTH",
"1020 88 OFFCURVE",
"1020 138 QCURVE SMOOTH",
"1020 923 LINE SMOOTH"
);
}
);
width = 1600;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"980 1118 QCURVE SMOOTH",
"909 1200 OFFCURVE",
"821 1200 QCURVE SMOOTH",
"731 1200 OFFCURVE",
"625 1076 QCURVE",
"520 1200 OFFCURVE",
"431 1200 QCURVE SMOOTH",
"342 1200 OFFCURVE",
"271 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 0 LINE",
"550 0 LINE",
"550 138 LINE",
"388 138 LINE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"447 1050 QCURVE SMOOTH",
"493 1050 OFFCURVE",
"569 956 QCURVE SMOOTH",
"595 925 OFFCURVE",
"625 925 QCURVE SMOOTH",
"655 925 OFFCURVE",
"681 956 QCURVE SMOOTH",
"758 1050 OFFCURVE",
"804 1050 QCURVE SMOOTH",
"862 1050 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 138 LINE SMOOTH",
"862 0 OFFCURVE",
"1125 0 QCURVE SMOOTH",
"1400 0 OFFCURVE",
"1400 138 QCURVE SMOOTH",
"1400 1500 LINE",
"1212 1500 LINE",
"1212 138 LINE",
"1050 138 LINE",
"1050 923 LINE SMOOTH",
"1050 1036 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */\01233 1 3 8 1 76 0 1 8 1 133 0 4 3 0 3 4 0 128 5 1 3 3 8 97 9 1 8 8 17 77 6 1 0 0 2 97 7 1 2 2 19 2 78 36 34 36 17 18 34 34 35 34 17 17 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1600;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"1100 1200 OFFCURVE",
"821 1200 QCURVE SMOOTH",
"731 1200 OFFCURVE",
"625 1076 QCURVE",
"520 1200 OFFCURVE",
"431 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 0 LINE",
"550 0 LINE",
"550 188 LINE",
"438 188 LINE",
"438 873 LINE SMOOTH",
"438 1000 OFFCURVE",
"466 1000 QCURVE SMOOTH",
"493 1000 OFFCURVE",
"569 906 QCURVE SMOOTH",
"595 875 OFFCURVE",
"625 875 QCURVE SMOOTH",
"655 875 OFFCURVE",
"681 906 QCURVE SMOOTH",
"758 1000 OFFCURVE",
"785 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 873 QCURVE SMOOTH",
"812 188 LINE SMOOTH",
"812 0 OFFCURVE",
"1156 0 QCURVE SMOOTH",
"1500 0 OFFCURVE",
"1500 188 QCURVE SMOOTH",
"1500 1500 LINE",
"1212 1500 LINE",
"1212 188 LINE",
"1100 188 LINE",
"1100 923 LINE SMOOTH"
);
}
);
width = 1650;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"1100 1250 OFFCURVE",
"851 1250 QCURVE SMOOTH",
"731 1250 OFFCURVE",
"625 1126 QCURVE",
"520 1250 OFFCURVE",
"401 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 0 LINE",
"580 0 LINE",
"580 238 LINE",
"488 238 LINE",
"488 923 LINE SMOOTH",
"488 1000 OFFCURVE",
"516 1000 QCURVE SMOOTH",
"543 1000 OFFCURVE",
"595 925 OFFCURVE",
"625 925 QCURVE SMOOTH",
"655 925 OFFCURVE",
"708 1000 OFFCURVE",
"735 1000 QCURVE SMOOTH",
"762 1000 OFFCURVE",
"762 923 QCURVE SMOOTH",
"762 188 LINE SMOOTH",
"762 0 OFFCURVE",
"1156 0 QCURVE SMOOTH",
"1550 0 OFFCURVE",
"1550 188 QCURVE SMOOTH",
"1550 1500 LINE",
"1212 1500 LINE",
"1212 238 LINE",
"1100 238 LINE",
"1100 973 LINE SMOOTH"
);
}
);
width = 1650;
}
);
note = uni17E7;
unicode = 17E7;
},
{
glyphname = uni17E8;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"651 280 LINE",
"992 0 LINE",
"1050 0 LINE",
"1050 520 LINE SMOOTH",
"1050 720 OFFCURVE",
"860 720 QCURVE SMOOTH",
"680 720 LINE",
"680 668 LINE",
"860 668 LINE SMOOTH",
"992 668 OFFCURVE",
"992 520 QCURVE SMOOTH",
"992 77 LINE",
"651 355 LINE",
"308 76 LINE",
"308 880 LINE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 880 QCURVE",
"1050 880 LINE",
"1050 1550 LINE",
"992 1550 LINE",
"992 1076 LINE",
"894 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 880 QCURVE SMOOTH",
"250 0 LINE",
"309 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"651 240 LINE",
"962 0 LINE",
"1070 0 LINE",
"1070 520 LINE SMOOTH",
"1070 720 OFFCURVE",
"860 720 QCURVE SMOOTH",
"680 720 LINE",
"680 630 LINE",
"860 630 LINE SMOOTH",
"962 630 OFFCURVE",
"962 520 QCURVE SMOOTH",
"962 117 LINE",
"651 355 LINE",
"338 116 LINE",
"338 880 LINE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 880 QCURVE",
"1070 880 LINE",
"1070 1550 LINE",
"962 1550 LINE",
"962 1096 LINE",
"834 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 880 QCURVE SMOOTH",
"230 0 LINE",
"339 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"651 210 LINE",
"882 0 LINE",
"1100 0 LINE",
"1100 520 LINE SMOOTH",
"1100 750 OFFCURVE",
"860 750 QCURVE SMOOTH",
"680 750 LINE",
"680 600 LINE",
"860 600 LINE SMOOTH",
"912 600 OFFCURVE",
"912 520 QCURVE SMOOTH",
"912 167 LINE",
"651 405 LINE",
"388 166 LINE",
"388 880 LINE SMOOTH",
"388 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"912 1062 OFFCURVE",
"912 880 QCURVE",
"1100 880 LINE",
"1100 1550 LINE",
"912 1550 LINE",
"912 1146 LINE",
"784 1200 OFFCURVE",
"650 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 880 QCURVE SMOOTH",
"200 0 LINE",
"419 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */\0125 1 3 0 27 16 15 14 4 6 4 2 76 0 1 0 2 5 1 2 103 0 5 0 4 6 5 4 103 0 3 3 0 97 0 0 0 17 77 8 7 2 6 6 19 6 78 0 0 0 28 0 28 18 33 38 33 17 18 34 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"419 0 LINE",
"651 210 LINE",
"882 0 LINE",
"1150 0 LINE",
"1150 520 LINE SMOOTH",
"1150 750 OFFCURVE",
"910 750 QCURVE SMOOTH",
"680 750 LINE",
"680 600 LINE",
"810 600 LINE SMOOTH",
"862 600 OFFCURVE",
"862 520 QCURVE SMOOTH",
"862 263 LINE",
"651 455 LINE",
"438 261 LINE",
"438 880 LINE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 880 QCURVE",
"1150 880 LINE",
"1150 1550 LINE",
"862 1550 LINE",
"862 1146 LINE",
"754 1200 OFFCURVE",
"590 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 880 QCURVE SMOOTH",
"150 0 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"469 0 LINE",
"651 180 LINE",
"832 0 LINE",
"1200 0 LINE",
"1200 520 LINE SMOOTH",
"1200 750 OFFCURVE",
"960 750 QCURVE SMOOTH",
"680 750 LINE",
"680 600 LINE",
"760 600 LINE SMOOTH",
"812 600 OFFCURVE",
"812 520 QCURVE SMOOTH",
"812 293 LINE",
"651 455 LINE",
"488 291 LINE",
"488 880 LINE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 880 QCURVE",
"1200 880 LINE",
"1200 1550 LINE",
"812 1550 LINE",
"812 1196 LINE",
"704 1250 OFFCURVE",
"570 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 880 QCURVE SMOOTH",
"100 0 LINE"
);
}
);
width = 1300;
}
);
note = uni17E8;
unicode = 17E8;
},
{
glyphname = uni17E9;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"650 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 902 QCURVE",
"259 759 OFFCURVE",
"418 715 QCURVE",
"250 672 OFFCURVE",
"250 526 QCURVE SMOOTH",
"250 300 LINE SMOOTH",
"250 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1050 0 OFFCURVE",
"1050 293 QCURVE SMOOTH",
"1050 506 OFFCURVE",
"750 506 QCURVE SMOOTH",
"650 506 LINE",
"650 466 LINE",
"750 466 LINE SMOOTH",
"992 466 OFFCURVE",
"992 298 QCURVE SMOOTH",
"992 50 OFFCURVE",
"650 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 300 QCURVE SMOOTH",
"308 526 LINE SMOOTH",
"308 681 OFFCURVE",
"650 681 QCURVE SMOOTH",
"950 681 LINE",
"950 731 LINE",
"650 731 LINE SMOOTH",
"308 731 OFFCURVE",
"308 902 QCURVE SMOOTH",
"308 1150 OFFCURVE",
"650 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 942 QCURVE",
"1050 942 LINE",
"1050 1510 LINE",
"992 1510 LINE",
"992 1082 LINE",
"914 1200 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"650 1200 QCURVE SMOOTH",
"230 1200 OFFCURVE",
"230 902 QCURVE",
"269 759 OFFCURVE",
"368 715 QCURVE",
"269 672 OFFCURVE",
"230 526 QCURVE",
"230 300 LINE SMOOTH",
"230 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1070 0 OFFCURVE",
"1070 293 QCURVE SMOOTH",
"1070 506 OFFCURVE",
"750 506 QCURVE SMOOTH",
"650 506 LINE",
"650 428 LINE",
"750 428 LINE SMOOTH",
"962 428 OFFCURVE",
"962 298 QCURVE SMOOTH",
"962 88 OFFCURVE",
"650 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 300 QCURVE SMOOTH",
"338 526 LINE SMOOTH",
"338 662 OFFCURVE",
"650 662 QCURVE SMOOTH",
"950 662 LINE",
"950 750 LINE",
"650 750 LINE SMOOTH",
"338 750 OFFCURVE",
"338 902 QCURVE SMOOTH",
"338 1112 OFFCURVE",
"650 1112 QCURVE SMOOTH",
"962 1112 OFFCURVE",
"962 942 QCURVE",
"1070 942 LINE",
"1070 1510 LINE",
"962 1510 LINE",
"962 1102 LINE",
"884 1200 OFFCURVE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"650 1200 QCURVE SMOOTH",
"200 1200 OFFCURVE",
"200 902 QCURVE",
"239 759 OFFCURVE",
"338 715 QCURVE",
"239 672 OFFCURVE",
"200 526 QCURVE",
"200 300 LINE SMOOTH",
"200 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1100 0 OFFCURVE",
"1100 293 QCURVE SMOOTH",
"1100 526 OFFCURVE",
"750 526 QCURVE SMOOTH",
"650 526 LINE",
"650 398 LINE",
"750 398 LINE SMOOTH",
"912 398 OFFCURVE",
"912 298 QCURVE SMOOTH",
"912 138 OFFCURVE",
"650 138 QCURVE SMOOTH",
"388 138 OFFCURVE",
"388 300 QCURVE SMOOTH",
"388 526 LINE SMOOTH",
"388 642 OFFCURVE",
"650 642 QCURVE SMOOTH",
"950 642 LINE",
"950 780 LINE",
"650 780 LINE SMOOTH",
"388 780 OFFCURVE",
"388 902 QCURVE SMOOTH",
"388 1062 OFFCURVE",
"650 1062 QCURVE SMOOTH",
"912 1062 OFFCURVE",
"912 942 QCURVE",
"1100 942 LINE",
"1100 1510 LINE",
"912 1510 LINE",
"912 1162 LINE",
"784 1200 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 78 values pushed */\0120 1 2 9 36 1 3 1 34 1 4 3 3 76 32 1 7 1 75 0 0 0 1 3 0 1 103 0 3 0 4 7 3 4 103 0 7 0 6 5 7 6 105 0 2 2 9 97 0 9 9 17 77 0 5 5 8 97 0 8 8 19 8 78 39 37 34 33 34 35 33 34 33 17 17 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"784 1200 OFFCURVE",
"600 1200 QCURVE SMOOTH",
"150 1200 OFFCURVE",
"150 902 QCURVE",
"189 759 OFFCURVE",
"338 715 QCURVE",
"189 672 OFFCURVE",
"150 526 QCURVE",
"150 300 LINE SMOOTH",
"150 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1150 0 OFFCURVE",
"1150 293 QCURVE SMOOTH",
"1150 526 OFFCURVE",
"750 526 QCURVE SMOOTH",
"650 526 LINE",
"650 398 LINE",
"750 398 LINE SMOOTH",
"862 398 OFFCURVE",
"862 298 QCURVE SMOOTH",
"862 188 OFFCURVE",
"650 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 300 QCURVE SMOOTH",
"438 526 LINE SMOOTH",
"438 642 OFFCURVE",
"650 642 QCURVE SMOOTH",
"950 642 LINE",
"950 780 LINE",
"650 780 LINE SMOOTH",
"438 780 OFFCURVE",
"438 902 QCURVE SMOOTH",
"438 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"862 1012 OFFCURVE",
"862 942 QCURVE",
"1150 942 LINE",
"1150 1510 LINE",
"862 1510 LINE",
"862 1162 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"734 1250 OFFCURVE",
"580 1250 QCURVE SMOOTH",
"100 1250 OFFCURVE",
"100 932 QCURVE",
"139 759 OFFCURVE",
"288 715 QCURVE",
"139 672 OFFCURVE",
"100 526 QCURVE",
"100 300 LINE SMOOTH",
"100 0 OFFCURVE",
"650 0 QCURVE SMOOTH",
"1200 0 OFFCURVE",
"1200 293 QCURVE SMOOTH",
"1200 526 OFFCURVE",
"750 526 QCURVE SMOOTH",
"650 526 LINE",
"650 398 LINE",
"700 398 LINE SMOOTH",
"812 398 OFFCURVE",
"812 298 QCURVE SMOOTH",
"812 238 OFFCURVE",
"650 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 300 QCURVE SMOOTH",
"488 526 LINE SMOOTH",
"488 622 OFFCURVE",
"650 622 QCURVE SMOOTH",
"1000 622 LINE",
"1000 800 LINE",
"650 800 LINE SMOOTH",
"488 800 OFFCURVE",
"488 902 QCURVE SMOOTH",
"488 1012 OFFCURVE",
"650 1012 QCURVE SMOOTH",
"812 1012 OFFCURVE",
"812 942 QCURVE",
"1200 942 LINE",
"1200 1510 LINE",
"812 1510 LINE",
"812 1212 LINE"
);
}
);
width = 1300;
}
);
note = uni17E9;
unicode = 17E9;
},
{
glyphname = uni17D2_1780;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-250 -470 LINE",
"-250 -273 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -273 QCURVE SMOOTH",
"-1050 -470 LINE",
"-992 -470 LINE",
"-992 -273 LINE SMOOTH",
"-992 -110 OFFCURVE",
"-650 -110 QCURVE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -273 QCURVE SMOOTH",
"-308 -470 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -500 LINE",
"-953 -500 LINE",
"-953 -283 LINE SMOOTH",
"-953 -148 OFFCURVE",
"-650 -148 QCURVE SMOOTH",
"-347 -148 OFFCURVE",
"-347 -283 QCURVE SMOOTH",
"-347 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-883 -283 LINE SMOOTH",
"-883 -217 OFFCURVE",
"-830 -183 QCURVE SMOOTH",
"-779 -150 OFFCURVE",
"-650 -150 QCURVE SMOOTH",
"-521 -150 OFFCURVE",
"-469 -183 QCURVE SMOOTH",
"-417 -217 OFFCURVE",
"-417 -283 QCURVE SMOOTH",
"-417 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -184 OFFCURVE",
"-339 -116 QCURVE SMOOTH",
"-428 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-872 -50 OFFCURVE",
"-961 -116 QCURVE SMOOTH",
"-1050 -184 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -500 LINE",
"-883 -500 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 2 1 0 2 105 4 3 2 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0120 2 2 0 97 0 0 0 18 77 4 3 2 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 21 0 21 36 20 36 5 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-833 -500 LINE",
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-200 -500 LINE",
"-200 -283 LINE SMOOTH",
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -283 QCURVE SMOOTH",
"-1100 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-823 -500 LINE",
"-823 -283 LINE SMOOTH",
"-823 -210 OFFCURVE",
"-650 -210 QCURVE SMOOTH",
"-477 -210 OFFCURVE",
"-477 -283 QCURVE SMOOTH",
"-477 -500 LINE",
"-100 -500 LINE",
"-100 -283 LINE SMOOTH",
"-100 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -283 QCURVE SMOOTH",
"-1200 -500 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1780;
},
{
glyphname = uni17D2_1781;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-650 -110 QCURVE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -167 QCURVE SMOOTH",
"-308 -217 OFFCURVE",
"-1050 -269 OFFCURVE",
"-1050 -353 QCURVE SMOOTH",
"-1050 -470 OFFCURVE",
"-650 -470 QCURVE SMOOTH",
"-250 -470 OFFCURVE",
"-250 -344 QCURVE SMOOTH",
"-250 -286 LINE",
"-308 -324 LINE",
"-308 -420 OFFCURVE",
"-650 -420 QCURVE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -353 QCURVE SMOOTH",
"-992 -298 OFFCURVE",
"-250 -251 OFFCURVE",
"-250 -162 QCURVE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -149 QCURVE SMOOTH",
"-1050 -196 OFFCURVE",
"-1015 -196 QCURVE SMOOTH",
"-992 -196 LINE",
"-992 -110 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-650 -125 QCURVE SMOOTH",
"-347 -125 OFFCURVE",
"-347 -175 QCURVE SMOOTH",
"-347 -218 OFFCURVE",
"-1050 -284 OFFCURVE",
"-1050 -336 QCURVE SMOOTH",
"-1050 -387 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-650 -500 QCURVE SMOOTH",
"-250 -500 OFFCURVE",
"-250 -365 QCURVE SMOOTH",
"-250 -303 LINE",
"-347 -343 LINE",
"-347 -435 OFFCURVE",
"-650 -435 QCURVE SMOOTH",
"-953 -435 OFFCURVE",
"-953 -374 QCURVE SMOOTH",
"-953 -326 OFFCURVE",
"-250 -265 OFFCURVE",
"-250 -169 QCURVE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -155 QCURVE SMOOTH",
"-1050 -180 LINE SMOOTH",
"-1050 -206 OFFCURVE",
"-976 -206 QCURVE SMOOTH",
"-953 -206 LINE",
"-953 -125 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-650 -125 QCURVE SMOOTH",
"-428 -125 OFFCURVE",
"-428 -175 QCURVE SMOOTH",
"-428 -218 OFFCURVE",
"-1050 -284 OFFCURVE",
"-1050 -336 QCURVE SMOOTH",
"-1050 -387 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-650 -500 QCURVE SMOOTH",
"-250 -500 OFFCURVE",
"-250 -365 QCURVE SMOOTH",
"-250 -303 LINE",
"-428 -343 LINE",
"-428 -425 OFFCURVE",
"-650 -425 QCURVE SMOOTH",
"-872 -425 OFFCURVE",
"-872 -374 QCURVE SMOOTH",
"-872 -346 OFFCURVE",
"-250 -265 OFFCURVE",
"-250 -169 QCURVE SMOOTH",
"-250 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1050 -50 OFFCURVE",
"-1050 -155 QCURVE SMOOTH",
"-1050 -180 LINE SMOOTH",
"-1050 -206 OFFCURVE",
"-976 -206 QCURVE SMOOTH",
"-872 -206 LINE",
"-872 -125 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01216 15 2 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 4 2 4 0 114 0 1 0 4 0 1 4 105 0 2 2 3 97 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 4 2 4 0 114 0 4 4 1 97 0 1 1 18 77 0 2 2 3 97 0 3 3 20 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 0 4 2 4 0 2 128 0 4 4 1 97 0 1 1 18 77 0 2 2 3 97 0 3 3 20 3 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01238 36 37 35 32 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-650 -155 QCURVE SMOOTH",
"-478 -155 OFFCURVE",
"-478 -175 QCURVE SMOOTH",
"-478 -218 OFFCURVE",
"-1100 -284 OFFCURVE",
"-1100 -336 QCURVE SMOOTH",
"-1100 -387 LINE SMOOTH",
"-1100 -500 OFFCURVE",
"-650 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -365 QCURVE SMOOTH",
"-200 -303 LINE",
"-478 -343 LINE",
"-478 -395 OFFCURVE",
"-650 -395 QCURVE SMOOTH",
"-822 -395 OFFCURVE",
"-822 -374 QCURVE SMOOTH",
"-822 -346 OFFCURVE",
"-200 -265 OFFCURVE",
"-200 -169 QCURVE SMOOTH",
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -155 QCURVE SMOOTH",
"-1100 -180 LINE SMOOTH",
"-1100 -206 OFFCURVE",
"-976 -206 QCURVE SMOOTH",
"-822 -206 LINE",
"-822 -155 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-650 -155 QCURVE SMOOTH",
"-488 -155 OFFCURVE",
"-488 -175 QCURVE SMOOTH",
"-488 -218 OFFCURVE",
"-1200 -284 OFFCURVE",
"-1200 -336 QCURVE SMOOTH",
"-1200 -387 LINE SMOOTH",
"-1200 -500 OFFCURVE",
"-650 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -365 QCURVE SMOOTH",
"-100 -303 LINE",
"-488 -343 LINE",
"-488 -395 OFFCURVE",
"-650 -395 QCURVE SMOOTH",
"-812 -395 OFFCURVE",
"-812 -374 QCURVE SMOOTH",
"-812 -346 OFFCURVE",
"-100 -265 OFFCURVE",
"-100 -169 QCURVE SMOOTH",
"-100 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -155 QCURVE SMOOTH",
"-1200 -180 LINE SMOOTH",
"-1200 -206 OFFCURVE",
"-1076 -206 QCURVE SMOOTH",
"-812 -206 LINE",
"-812 -155 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_1781;
},
{
glyphname = uni17D2_1782;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-847 -310 OFFCURVE",
"-694 -310 QCURVE",
"-694 -260 LINE",
"-933 -260 OFFCURVE",
"-992 -391 QCURVE",
"-992 -273 LINE SMOOTH",
"-992 -110 OFFCURVE",
"-650 -110 QCURVE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -273 QCURVE SMOOTH",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -273 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -273 QCURVE SMOOTH",
"-1050 -470 LINE",
"-992 -470 LINE",
"-992 -465 LINE",
"-962 -400 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-953 -148 OFFCURVE",
"-650 -148 QCURVE SMOOTH",
"-347 -148 OFFCURVE",
"-347 -283 QCURVE SMOOTH",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -500 LINE",
"-953 -500 LINE",
"-953 -481 LINE",
"-700 -340 LINE",
"-742 -285 LINE",
"-953 -395 LINE",
"-953 -283 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 -183 QCURVE SMOOTH",
"-779 -150 OFFCURVE",
"-650 -150 QCURVE SMOOTH",
"-521 -150 OFFCURVE",
"-469 -183 QCURVE SMOOTH",
"-417 -217 OFFCURVE",
"-417 -283 QCURVE SMOOTH",
"-417 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -184 OFFCURVE",
"-339 -116 QCURVE SMOOTH",
"-428 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-872 -50 OFFCURVE",
"-961 -116 QCURVE SMOOTH",
"-1050 -184 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -500 LINE",
"-883 -500 LINE",
"-883 -481 LINE",
"-630 -340 LINE",
"-702 -235 LINE",
"-883 -315 LINE",
"-883 -283 LINE SMOOTH",
"-883 -217 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0123 2 1 3 1 2 1 76 6 1 1 73 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 2 1 0 2 105 0 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 6 values pushed */\01236 20 42 3 7 25 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-833 -484 LINE",
"-610 -360 LINE",
"-682 -255 LINE",
"-833 -322 LINE",
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-200 -500 LINE",
"-200 -283 LINE SMOOTH",
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -283 QCURVE SMOOTH",
"-1100 -500 LINE",
"-833 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-823 -484 LINE",
"-610 -360 LINE",
"-682 -255 LINE",
"-823 -322 LINE",
"-823 -283 LINE SMOOTH",
"-823 -210 OFFCURVE",
"-650 -210 QCURVE SMOOTH",
"-477 -210 OFFCURVE",
"-477 -283 QCURVE SMOOTH",
"-477 -500 LINE",
"-100 -500 LINE",
"-100 -283 LINE SMOOTH",
"-100 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -283 QCURVE SMOOTH",
"-1200 -500 LINE",
"-823 -500 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1782;
},
{
glyphname = uni17D21783;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 -237 LINE SMOOTH",
"280 -410 OFFCURVE",
"100 -410 QCURVE SMOOTH",
"-69 -410 OFFCURVE",
"-69 -237 QCURVE SMOOTH",
"-69 -60 LINE",
"-131 -60 LINE",
"-131 -237 LINE SMOOTH",
"-131 -410 OFFCURVE",
"-290 -410 QCURVE SMOOTH",
"-449 -410 OFFCURVE",
"-449 -237 QCURVE SMOOTH",
"-449 -60 LINE",
"-620 -60 LINE",
"-620 -118 LINE",
"-511 -118 LINE",
"-511 -237 LINE SMOOTH",
"-511 -470 OFFCURVE",
"-290 -470 QCURVE SMOOTH",
"-157 -470 OFFCURVE",
"-99 -363 QCURVE",
"-32 -470 OFFCURVE",
"100 -470 QCURVE SMOOTH",
"338 -470 OFFCURVE",
"338 -237 QCURVE SMOOTH",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -237 LINE SMOOTH",
"250 -400 OFFCURVE",
"100 -400 QCURVE SMOOTH",
"-50 -400 OFFCURVE",
"-50 -237 QCURVE SMOOTH",
"-50 -60 LINE",
"-150 -60 LINE",
"-150 -237 LINE SMOOTH",
"-150 -400 OFFCURVE",
"-290 -400 QCURVE SMOOTH",
"-430 -400 OFFCURVE",
"-430 -237 QCURVE SMOOTH",
"-430 -60 LINE",
"-620 -60 LINE",
"-620 -148 LINE",
"-530 -148 LINE",
"-530 -237 LINE SMOOTH",
"-530 -500 OFFCURVE",
"-290 -500 QCURVE SMOOTH",
"-177 -500 OFFCURVE",
"-99 -423 QCURVE",
"-12 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -237 QCURVE SMOOTH",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 -237 LINE SMOOTH",
"200 -350 OFFCURVE",
"100 -350 QCURVE SMOOTH",
"-10 -350 OFFCURVE",
"-10 -237 QCURVE SMOOTH",
"-10 -50 LINE",
"-190 -50 LINE",
"-190 -237 LINE SMOOTH",
"-190 -350 OFFCURVE",
"-290 -350 QCURVE SMOOTH",
"-390 -350 OFFCURVE",
"-390 -237 QCURVE SMOOTH",
"-390 -50 LINE",
"-620 -50 LINE",
"-620 -140 LINE",
"-570 -140 LINE",
"-570 -237 LINE SMOOTH",
"-570 -500 OFFCURVE",
"-290 -500 QCURVE SMOOTH",
"-177 -500 OFFCURVE",
"-99 -443 QCURVE",
"-12 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"388 -500 OFFCURVE",
"388 -237 QCURVE SMOOTH",
"388 840 LINE",
"140 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01226 0 2 3 8 5 1 0 4 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0125 1 3 0 2 4 3 2 103 0 8 8 7 95 0 7 7 17 77 6 1 4 4 0 98 1 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 8 8 7 95 0 7 7 17 77 0 2 2 3 95 5 1 3 3 18 77 6 1 4 4 0 98 1 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01217 26 34 18 34 17 18 34 34 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -237 LINE SMOOTH",
"150 -320 OFFCURVE",
"85 -320 QCURVE SMOOTH",
"20 -320 OFFCURVE",
"20 -237 QCURVE SMOOTH",
"20 -50 LINE",
"-220 -50 LINE",
"-220 -237 LINE SMOOTH",
"-220 -320 OFFCURVE",
"-290 -320 QCURVE SMOOTH",
"-360 -320 OFFCURVE",
"-360 -237 QCURVE SMOOTH",
"-360 -50 LINE",
"-670 -50 LINE",
"-670 -140 LINE",
"-620 -140 LINE",
"-620 -237 LINE SMOOTH",
"-620 -500 OFFCURVE",
"-290 -500 QCURVE SMOOTH",
"-177 -500 OFFCURVE",
"-99 -443 QCURVE",
"-12 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -237 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -237 LINE SMOOTH",
"100 -320 OFFCURVE",
"35 -320 QCURVE SMOOTH",
"-30 -320 OFFCURVE",
"-30 -237 QCURVE SMOOTH",
"-30 -50 LINE",
"-370 -50 LINE",
"-370 -237 LINE SMOOTH",
"-370 -320 OFFCURVE",
"-440 -320 QCURVE SMOOTH",
"-510 -320 OFFCURVE",
"-510 -237 QCURVE SMOOTH",
"-510 -50 LINE",
"-920 -50 LINE",
"-920 -140 LINE",
"-870 -140 LINE",
"-870 -237 LINE SMOOTH",
"-870 -500 OFFCURVE",
"-440 -500 QCURVE SMOOTH",
"-277 -500 OFFCURVE",
"-199 -443 QCURVE",
"-112 -500 OFFCURVE",
"50 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -237 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D21783;
},
{
glyphname = uni17D2_1784;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-250 -50 QCURVE",
"-308 -50 LINE",
"-308 -420 OFFCURVE",
"-756 -420 QCURVE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -285 QCURVE SMOOTH",
"-992 -150 OFFCURVE",
"-783 -150 QCURVE SMOOTH",
"-694 -150 LINE",
"-694 -100 LINE",
"-783 -100 LINE SMOOTH",
"-1050 -100 OFFCURVE",
"-1050 -285 QCURVE SMOOTH",
"-1050 -470 OFFCURVE",
"-756 -470 QCURVE SMOOTH",
"-250 -470 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-250 -50 QCURVE",
"-347 -50 LINE",
"-347 -412 OFFCURVE",
"-696 -412 QCURVE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -290 QCURVE SMOOTH",
"-953 -183 OFFCURVE",
"-783 -183 QCURVE SMOOTH",
"-694 -183 LINE",
"-694 -95 LINE",
"-783 -95 LINE SMOOTH",
"-1050 -95 OFFCURVE",
"-1050 -290 QCURVE SMOOTH",
"-1050 -500 OFFCURVE",
"-696 -500 QCURVE SMOOTH",
"-250 -500 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-250 -50 QCURVE",
"-417 -50 LINE",
"-417 -370 OFFCURVE",
"-696 -370 QCURVE SMOOTH",
"-883 -370 OFFCURVE",
"-883 -290 QCURVE SMOOTH",
"-883 -215 OFFCURVE",
"-694 -215 QCURVE",
"-694 -95 LINE",
"-783 -95 LINE SMOOTH",
"-1050 -95 OFFCURVE",
"-1050 -290 QCURVE SMOOTH",
"-1050 -500 OFFCURVE",
"-696 -500 QCURVE SMOOTH",
"-250 -500 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 4 1 4 133 0 1 0 2 3 1 2 105 0 3 3 0 98 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01223 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 4 18 77 0 2 2 1 97 0 1 1 18 77 0 3 3 0 98 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 25 values pushed */\0120 1 0 2 3 1 2 105 0 4 4 18 77 0 3 3 0 98 5 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0121 0 13 12 11 9 7 6 5 3 0 14 1 14 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 -50 QCURVE",
"-467 -50 LINE",
"-467 -340 OFFCURVE",
"-696 -340 QCURVE SMOOTH",
"-833 -340 OFFCURVE",
"-833 -290 QCURVE SMOOTH",
"-833 -215 OFFCURVE",
"-694 -215 QCURVE",
"-694 -95 LINE",
"-783 -95 LINE SMOOTH",
"-1100 -95 OFFCURVE",
"-1100 -290 QCURVE SMOOTH",
"-1100 -500 OFFCURVE",
"-696 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-100 -50 QCURVE",
"-477 -50 LINE",
"-477 -340 OFFCURVE",
"-696 -340 QCURVE SMOOTH",
"-823 -340 OFFCURVE",
"-823 -290 QCURVE SMOOTH",
"-823 -215 OFFCURVE",
"-664 -215 QCURVE",
"-664 -95 LINE",
"-783 -95 LINE SMOOTH",
"-1200 -95 OFFCURVE",
"-1200 -290 QCURVE SMOOTH",
"-1200 -500 OFFCURVE",
"-696 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_1784;
},
{
glyphname = uni17D2_1785;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-469 -315 QCURVE SMOOTH",
"-630 -420 OFFCURVE",
"-827 -420 QCURVE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -296 QCURVE",
"-731 -246 OFFCURVE",
"-701 -80 QCURVE",
"-748 -60 LINE",
"-768 -211 OFFCURVE",
"-1050 -263 QCURVE",
"-1050 -296 LINE SMOOTH",
"-1050 -470 OFFCURVE",
"-827 -470 QCURVE SMOOTH",
"-598 -470 OFFCURVE",
"-424 -354 QCURVE SMOOTH",
"-397 -336 OFFCURVE",
"-374 -319 QCURVE",
"-300 -367 OFFCURVE",
"-300 -470 QCURVE",
"-250 -448 LINE",
"-250 -340 OFFCURVE",
"-334 -289 QCURVE",
"-250 -218 OFFCURVE",
"-250 -169 QCURVE SMOOTH",
"-250 -70 OFFCURVE",
"-379 -70 QCURVE SMOOTH",
"-500 -70 OFFCURVE",
"-500 -187 QCURVE SMOOTH",
"-500 -248 OFFCURVE",
"-431 -289 QCURVE",
"-448 -302 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-308 -169 QCURVE SMOOTH",
"-308 -198 OFFCURVE",
"-388 -259 QCURVE",
"-450 -221 OFFCURVE",
"-450 -187 QCURVE SMOOTH",
"-450 -120 OFFCURVE",
"-379 -120 QCURVE SMOOTH",
"-308 -120 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-300 -400 OFFCURVE",
"-300 -500 QCURVE",
"-207 -478 LINE",
"-207 -330 OFFCURVE",
"-321 -285 QCURVE",
"-250 -219 OFFCURVE",
"-250 -169 QCURVE SMOOTH",
"-250 -70 OFFCURVE",
"-385 -70 QCURVE SMOOTH",
"-521 -70 OFFCURVE",
"-521 -187 QCURVE SMOOTH",
"-521 -260 OFFCURVE",
"-477 -286 QCURVE",
"-660 -412 OFFCURVE",
"-857 -412 QCURVE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -316 QCURVE",
"-701 -276 OFFCURVE",
"-671 -80 QCURVE",
"-768 -60 LINE",
"-788 -211 OFFCURVE",
"-1050 -263 QCURVE",
"-1050 -316 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-857 -500 QCURVE SMOOTH",
"-628 -500 OFFCURVE",
"-414 -347 QCURVE"
);
},
{
closed = 1;
nodes = (
"-429 -187 QCURVE SMOOTH",
"-429 -143 OFFCURVE",
"-381 -143 QCURVE SMOOTH",
"-343 -143 OFFCURVE",
"-343 -169 QCURVE SMOOTH",
"-343 -190 OFFCURVE",
"-400 -238 QCURVE",
"-429 -220 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-290 -275 QCURVE SMOOTH",
"-261 -248 OFFCURVE",
"-261 -212 QCURVE SMOOTH",
"-261 -207 LINE SMOOTH",
"-263 -168 OFFCURVE",
"-315 -142 QCURVE SMOOTH",
"-376 -112 OFFCURVE",
"-432 -112 QCURVE SMOOTH",
"-438 -112 LINE SMOOTH",
"-539 -112 OFFCURVE",
"-579 -182 QCURVE SMOOTH",
"-596 -211 OFFCURVE",
"-596 -233 QCURVE SMOOTH",
"-596 -268 OFFCURVE",
"-559 -288 QCURVE",
"-551 -296 OFFCURVE",
"-531 -305 QCURVE",
"-544 -314 OFFCURVE",
"-559 -322 QCURVE SMOOTH",
"-609 -348 OFFCURVE",
"-689 -362 QCURVE SMOOTH",
"-728 -368 OFFCURVE",
"-764 -368 QCURVE SMOOTH",
"-807 -368 OFFCURVE",
"-849 -360 QCURVE",
"-760 -325 OFFCURVE",
"-653 -206 OFFCURVE",
"-637 -155 QCURVE SMOOTH",
"-624 -108 LINE",
"-791 -50 LINE",
"-806 -115 LINE",
"-817 -149 OFFCURVE",
"-905 -227 OFFCURVE",
"-998 -270 QCURVE SMOOTH",
"-1075 -305 OFFCURVE",
"-1093 -348 QCURVE SMOOTH",
"-1099 -362 OFFCURVE",
"-1099 -376 QCURVE SMOOTH",
"-1099 -406 OFFCURVE",
"-1074 -439 QCURVE SMOOTH",
"-1050 -468 OFFCURVE",
"-947 -484 QCURVE",
"-887 -498 OFFCURVE",
"-791 -498 QCURVE SMOOTH",
"-783 -498 LINE SMOOTH",
"-698 -498 OFFCURVE",
"-625 -482 QCURVE SMOOTH",
"-551 -464 OFFCURVE",
"-489 -430 QCURVE SMOOTH",
"-447 -407 OFFCURVE",
"-414 -385 QCURVE",
"-348 -409 OFFCURVE",
"-348 -482 QCURVE SMOOTH",
"-348 -500 LINE",
"-199 -484 LINE",
"-199 -364 OFFCURVE",
"-233 -336 QCURVE",
"-263 -315 OFFCURVE",
"-312 -297 QCURVE",
"-300 -286 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */\01242 34 0 3 1 2 21 8 4 3 0 1 2 76 30 29 2 2 74 5 1 0 73 0 2 1 2 133 0 1 1 0 97 0 0 0 20 0 78 52 49 37 35 61 3 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-261 -215 QCURVE SMOOTH",
"-261 -82 OFFCURVE",
"-428 -82 QCURVE SMOOTH",
"-596 -82 OFFCURVE",
"-596 -200 QCURVE SMOOTH",
"-596 -268 OFFCURVE",
"-551 -305 QCURVE",
"-669 -360 OFFCURVE",
"-799 -360 QCURVE",
"-676 -246 OFFCURVE",
"-654 -158 QCURVE",
"-891 -50 LINE",
"-933 -169 OFFCURVE",
"-1149 -305 OFFCURVE",
"-1149 -401 QCURVE SMOOTH",
"-1149 -498 OFFCURVE",
"-923 -498 QCURVE SMOOTH",
"-698 -498 OFFCURVE",
"-540 -442 OFFCURVE",
"-464 -405 QCURVE",
"-398 -449 OFFCURVE",
"-398 -500 QCURVE",
"-199 -484 LINE",
"-199 -324 OFFCURVE",
"-302 -307 QCURVE",
"-261 -258 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-111 -215 QCURVE SMOOTH",
"-111 -82 OFFCURVE",
"-328 -82 QCURVE SMOOTH",
"-546 -82 OFFCURVE",
"-546 -200 QCURVE SMOOTH",
"-546 -268 OFFCURVE",
"-501 -305 QCURVE",
"-619 -360 OFFCURVE",
"-749 -360 QCURVE",
"-626 -246 OFFCURVE",
"-604 -158 QCURVE",
"-941 -50 LINE",
"-983 -169 OFFCURVE",
"-1199 -305 OFFCURVE",
"-1199 -401 QCURVE SMOOTH",
"-1199 -498 OFFCURVE",
"-973 -498 QCURVE SMOOTH",
"-648 -498 OFFCURVE",
"-470 -462 OFFCURVE",
"-394 -425 QCURVE",
"-348 -449 OFFCURVE",
"-348 -500 QCURVE",
"-49 -484 LINE",
"-49 -324 OFFCURVE",
"-152 -307 QCURVE",
"-111 -258 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_1785;
},
{
glyphname = uni17D2_1786;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1120 -250 OFFCURVE",
"-1120 -356 QCURVE SMOOTH",
"-1120 -470 OFFCURVE",
"-1011 -470 QCURVE SMOOTH",
"-922 -470 OFFCURVE",
"-922 -355 QCURVE SMOOTH",
"-922 -300 LINE",
"-814 -300 LINE SMOOTH",
"-711 -300 OFFCURVE",
"-593 -411 OFFCURVE",
"-486 -470 OFFCURVE",
"-432 -470 QCURVE SMOOTH",
"-250 -470 OFFCURVE",
"-250 -312 QCURVE SMOOTH",
"-250 -60 LINE",
"-437 -60 LINE",
"-437 -110 LINE",
"-308 -110 LINE",
"-308 -312 LINE SMOOTH",
"-308 -422 OFFCURVE",
"-432 -422 QCURVE SMOOTH",
"-508 -422 OFFCURVE",
"-649 -294 OFFCURVE",
"-746 -250 OFFCURVE",
"-814 -250 QCURVE SMOOTH",
"-922 -250 LINE",
"-922 -60 LINE",
"-980 -60 LINE",
"-980 -250 LINE",
"-1000 -250 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-980 -355 LINE SMOOTH",
"-980 -420 OFFCURVE",
"-1011 -420 QCURVE SMOOTH",
"-1070 -420 OFFCURVE",
"-1070 -356 QCURVE SMOOTH",
"-1070 -300 OFFCURVE",
"-1000 -300 QCURVE SMOOTH",
"-980 -300 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1200 -252 OFFCURVE",
"-1200 -376 QCURVE SMOOTH",
"-1200 -500 OFFCURVE",
"-1081 -500 QCURVE SMOOTH",
"-953 -500 OFFCURVE",
"-953 -385 QCURVE SMOOTH",
"-953 -332 LINE",
"-884 -332 LINE SMOOTH",
"-801 -332 OFFCURVE",
"-683 -441 OFFCURVE",
"-536 -500 OFFCURVE",
"-462 -500 QCURVE SMOOTH",
"-378 -500 OFFCURVE",
"-250 -423 OFFCURVE",
"-250 -312 QCURVE SMOOTH",
"-250 -60 LINE",
"-437 -60 LINE",
"-437 -148 LINE",
"-347 -148 LINE",
"-347 -312 LINE SMOOTH",
"-347 -412 OFFCURVE",
"-462 -412 QCURVE SMOOTH",
"-578 -412 OFFCURVE",
"-699 -294 OFFCURVE",
"-816 -252 OFFCURVE",
"-884 -252 QCURVE SMOOTH",
"-953 -252 LINE",
"-953 -60 LINE",
"-1050 -60 LINE",
"-1050 -252 LINE",
"-1080 -252 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-1050 -385 LINE SMOOTH",
"-1050 -412 OFFCURVE",
"-1081 -412 QCURVE SMOOTH",
"-1112 -412 OFFCURVE",
"-1112 -376 QCURVE SMOOTH",
"-1112 -332 OFFCURVE",
"-1080 -332 QCURVE SMOOTH",
"-1050 -332 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1141 -252 OFFCURVE",
"-1179 -286 QCURVE SMOOTH",
"-1202 -306 OFFCURVE",
"-1202 -340 QCURVE SMOOTH",
"-1202 -354 OFFCURVE",
"-1198 -370 QCURVE",
"-1197 -379 OFFCURVE",
"-1193 -390 QCURVE SMOOTH",
"-1174 -444 OFFCURVE",
"-1119 -472 QCURVE SMOOTH",
"-1066 -500 OFFCURVE",
"-977 -500 QCURVE SMOOTH",
"-873 -500 OFFCURVE",
"-873 -435 QCURVE SMOOTH",
"-873 -372 LINE",
"-847 -372 LINE SMOOTH",
"-801 -372 OFFCURVE",
"-683 -441 OFFCURVE",
"-536 -500 OFFCURVE",
"-474 -500 QCURVE SMOOTH",
"-378 -500 OFFCURVE",
"-250 -423 OFFCURVE",
"-250 -312 QCURVE SMOOTH",
"-250 -50 LINE",
"-517 -50 LINE",
"-517 -162 LINE",
"-428 -162 LINE",
"-428 -312 LINE SMOOTH",
"-428 -375 OFFCURVE",
"-501 -377 QCURVE",
"-505 -378 OFFCURVE",
"-510 -378 QCURVE SMOOTH",
"-578 -378 OFFCURVE",
"-637 -336 QCURVE SMOOTH",
"-699 -294 OFFCURVE",
"-758 -273 QCURVE SMOOTH",
"-816 -252 OFFCURVE",
"-873 -252 QCURVE",
"-873 -50 LINE",
"-1051 -50 LINE",
"-1051 -252 LINE",
"-1100 -252 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0124 1 0 0 3 1 0 3 103 9 8 2 1 0 6 2 1 6 106 0 2 2 5 97 7 1 5 5 20 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0129 8 2 1 0 6 2 1 6 106 0 3 3 0 95 4 1 0 0 18 77 0 2 2 5 97 7 1 5 5 20 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 0 41 0 40 34 34 35 17 18 68 17 17 10 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1200 -252 OFFCURVE",
"-1200 -336 QCURVE SMOOTH",
"-1200 -500 OFFCURVE",
"-977 -500 QCURVE SMOOTH",
"-823 -500 OFFCURVE",
"-823 -402 QCURVE",
"-751 -402 OFFCURVE",
"-536 -500 OFFCURVE",
"-414 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -262 QCURVE SMOOTH",
"-200 -50 LINE",
"-567 -50 LINE",
"-567 -162 LINE",
"-478 -162 LINE",
"-478 -262 LINE SMOOTH",
"-478 -325 OFFCURVE",
"-528 -325 QCURVE SMOOTH",
"-578 -325 OFFCURVE",
"-736 -252 OFFCURVE",
"-823 -252 QCURVE",
"-823 -50 LINE",
"-1101 -50 LINE",
"-1101 -252 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1300 -222 OFFCURVE",
"-1300 -336 QCURVE SMOOTH",
"-1300 -500 OFFCURVE",
"-1047 -500 QCURVE SMOOTH",
"-823 -500 OFFCURVE",
"-823 -402 QCURVE",
"-721 -402 OFFCURVE",
"-536 -500 OFFCURVE",
"-414 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -262 QCURVE SMOOTH",
"-100 -50 LINE",
"-597 -50 LINE",
"-597 -162 LINE",
"-488 -162 LINE",
"-488 -262 LINE SMOOTH",
"-488 -295 OFFCURVE",
"-558 -295 QCURVE SMOOTH",
"-608 -295 OFFCURVE",
"-706 -222 OFFCURVE",
"-823 -222 QCURVE",
"-823 -50 LINE",
"-1201 -50 LINE",
"-1201 -222 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1786;
},
{
glyphname = uni17D2_1787;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-550 -170 QCURVE SMOOTH",
"-550 -280 OFFCURVE",
"-357 -280 QCURVE SMOOTH",
"-308 -280 LINE",
"-316 -420 OFFCURVE",
"-464 -420 QCURVE SMOOTH",
"-527 -420 OFFCURVE",
"-650 -278 QCURVE",
"-773 -420 OFFCURVE",
"-836 -420 QCURVE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -265 QCURVE SMOOTH",
"-992 -110 OFFCURVE",
"-834 -110 QCURVE SMOOTH",
"-778 -110 LINE",
"-778 -60 LINE",
"-834 -60 LINE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -265 QCURVE SMOOTH",
"-1050 -470 OFFCURVE",
"-836 -470 QCURVE SMOOTH",
"-741 -470 OFFCURVE",
"-650 -344 QCURVE",
"-559 -470 OFFCURVE",
"-464 -470 QCURVE SMOOTH",
"-258 -470 OFFCURVE",
"-250 -280 QCURVE",
"-127 -280 LINE",
"-127 -230 LINE",
"-251 -230 LINE",
"-266 -60 OFFCURVE",
"-430 -60 QCURVE SMOOTH",
"-550 -60 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-500 -230 OFFCURVE",
"-500 -170 QCURVE SMOOTH",
"-500 -110 OFFCURVE",
"-430 -110 QCURVE SMOOTH",
"-323 -110 OFFCURVE",
"-310 -230 QCURVE",
"-357 -230 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-462 -174 QCURVE SMOOTH",
"-462 -148 OFFCURVE",
"-430 -148 QCURVE SMOOTH",
"-376 -148 OFFCURVE",
"-357 -200 QCURVE",
"-462 -199 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-430 -60 QCURVE SMOOTH",
"-550 -60 OFFCURVE",
"-550 -174 QCURVE SMOOTH",
"-550 -288 OFFCURVE",
"-358 -288 QCURVE SMOOTH",
"-348 -288 LINE",
"-355 -412 OFFCURVE",
"-464 -412 QCURVE SMOOTH",
"-527 -412 OFFCURVE",
"-650 -288 QCURVE",
"-773 -412 OFFCURVE",
"-836 -412 QCURVE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -270 QCURVE SMOOTH",
"-953 -148 OFFCURVE",
"-834 -148 QCURVE SMOOTH",
"-778 -148 LINE",
"-778 -60 LINE",
"-834 -60 LINE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -270 QCURVE SMOOTH",
"-1050 -500 OFFCURVE",
"-836 -500 QCURVE SMOOTH",
"-741 -500 OFFCURVE",
"-650 -394 QCURVE",
"-559 -500 OFFCURVE",
"-464 -500 QCURVE SMOOTH",
"-259 -500 OFFCURVE",
"-250 -288 QCURVE",
"-127 -288 LINE",
"-127 -200 LINE",
"-256 -200 LINE",
"-283 -60 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-264 -91 QCURVE SMOOTH",
"-321 -50 OFFCURVE",
"-407 -50 QCURVE SMOOTH",
"-464 -50 OFFCURVE",
"-528 -98 OFFCURVE",
"-528 -145 QCURVE SMOOTH",
"-528 -148 LINE SMOOTH",
"-528 -208 OFFCURVE",
"-459 -286 OFFCURVE",
"-344 -295 QCURVE",
"-351 -356 OFFCURVE",
"-406 -356 QCURVE SMOOTH",
"-501 -356 OFFCURVE",
"-613 -266 OFFCURVE",
"-638 -266 QCURVE SMOOTH",
"-664 -266 OFFCURVE",
"-767 -356 OFFCURVE",
"-836 -356 QCURVE SMOOTH",
"-879 -356 OFFCURVE",
"-933 -287 QCURVE",
"-939 -265 OFFCURVE",
"-939 -247 QCURVE SMOOTH",
"-939 -225 OFFCURVE",
"-930 -209 QCURVE SMOOTH",
"-914 -181 OFFCURVE",
"-842 -181 QCURVE SMOOTH",
"-778 -181 LINE",
"-778 -50 LINE",
"-881 -50 LINE SMOOTH",
"-987 -50 OFFCURVE",
"-1040 -94 QCURVE SMOOTH",
"-1091 -137 OFFCURVE",
"-1091 -221 QCURVE SMOOTH",
"-1091 -238 LINE SMOOTH",
"-1091 -278 OFFCURVE",
"-1083 -313 QCURVE SMOOTH",
"-1079 -329 OFFCURVE",
"-1074 -345 QCURVE SMOOTH",
"-1058 -396 OFFCURVE",
"-1023 -432 QCURVE SMOOTH",
"-958 -500 OFFCURVE",
"-825 -500 QCURVE SMOOTH",
"-687 -500 OFFCURVE",
"-622 -410 QCURVE",
"-519 -498 OFFCURVE",
"-414 -498 QCURVE SMOOTH",
"-295 -498 OFFCURVE",
"-249 -428 QCURVE SMOOTH",
"-221 -386 OFFCURVE",
"-208 -316 QCURVE",
"-57 -316 LINE",
"-57 -172 LINE",
"-199 -172 LINE",
"-205 -132 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01231 1 7 5 9 1 2 6 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 38 values pushed */\0120 7 5 1 5 7 1 128 9 1 4 0 5 7 4 5 105 0 0 0 1 6 0 1 103 8 1 6 6 2 98 3 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 7 5 1 5 7 1 128 0 0 0 1 6 0 1 103 0 5 5 4 97 9 1 4 4 18 77 8 1 6 6 2 98 3 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01251 49 33 33 38 33 43 34 35 17 16 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-407 -50 QCURVE SMOOTH",
"-528 -50 OFFCURVE",
"-528 -145 QCURVE SMOOTH",
"-528 -148 LINE SMOOTH",
"-528 -286 OFFCURVE",
"-394 -295 QCURVE",
"-401 -336 OFFCURVE",
"-456 -336 QCURVE SMOOTH",
"-501 -336 OFFCURVE",
"-613 -266 OFFCURVE",
"-638 -266 QCURVE SMOOTH",
"-664 -266 OFFCURVE",
"-767 -336 OFFCURVE",
"-836 -336 QCURVE SMOOTH",
"-889 -336 OFFCURVE",
"-889 -258 QCURVE SMOOTH",
"-889 -181 OFFCURVE",
"-842 -181 QCURVE SMOOTH",
"-778 -181 LINE",
"-778 -50 LINE",
"-881 -50 LINE SMOOTH",
"-1150 -50 OFFCURVE",
"-1150 -275 QCURVE SMOOTH",
"-1150 -500 OFFCURVE",
"-825 -500 QCURVE SMOOTH",
"-687 -500 OFFCURVE",
"-622 -410 QCURVE",
"-519 -498 OFFCURVE",
"-414 -498 QCURVE SMOOTH",
"-195 -498 OFFCURVE",
"-158 -316 QCURVE",
"-7 -316 LINE",
"-7 -172 LINE",
"-149 -172 LINE",
"-171 -50 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-357 -50 QCURVE SMOOTH",
"-528 -50 OFFCURVE",
"-528 -145 QCURVE SMOOTH",
"-528 -148 LINE SMOOTH",
"-528 -286 OFFCURVE",
"-424 -295 QCURVE",
"-431 -336 OFFCURVE",
"-466 -336 QCURVE SMOOTH",
"-501 -336 OFFCURVE",
"-613 -266 OFFCURVE",
"-638 -266 QCURVE SMOOTH",
"-664 -266 OFFCURVE",
"-767 -336 OFFCURVE",
"-813 -336 QCURVE SMOOTH",
"-859 -336 OFFCURVE",
"-859 -258 QCURVE SMOOTH",
"-859 -181 OFFCURVE",
"-812 -181 QCURVE SMOOTH",
"-778 -181 LINE",
"-778 -50 LINE",
"-881 -50 LINE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -275 QCURVE SMOOTH",
"-1200 -500 OFFCURVE",
"-825 -500 QCURVE SMOOTH",
"-687 -500 OFFCURVE",
"-622 -410 QCURVE",
"-519 -498 OFFCURVE",
"-414 -498 QCURVE SMOOTH",
"-145 -498 OFFCURVE",
"-108 -316 QCURVE",
"-7 -316 LINE",
"-7 -172 LINE",
"-99 -172 LINE",
"-121 -50 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_1787;
},
{
glyphname = uni17D21788;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 -304 LINE SMOOTH",
"280 -420 OFFCURVE",
"105 -420 QCURVE SMOOTH",
"-50 -420 OFFCURVE",
"-50 -304 QCURVE SMOOTH",
"-50 -60 LINE",
"-110 -60 LINE",
"-110 -304 LINE SMOOTH",
"-110 -420 OFFCURVE",
"-245 -420 QCURVE SMOOTH",
"-380 -420 OFFCURVE",
"-380 -304 QCURVE SMOOTH",
"-380 -237 LINE SMOOTH",
"-380 -60 OFFCURVE",
"-580 -60 QCURVE SMOOTH",
"-780 -60 OFFCURVE",
"-780 -237 QCURVE SMOOTH",
"-780 -470 LINE",
"-600 -470 LINE",
"-600 -420 LINE",
"-720 -420 LINE",
"-720 -237 LINE SMOOTH",
"-720 -104 OFFCURVE",
"-580 -104 QCURVE SMOOTH",
"-440 -104 OFFCURVE",
"-440 -237 QCURVE SMOOTH",
"-440 -304 LINE SMOOTH",
"-440 -470 OFFCURVE",
"-250 -470 QCURVE SMOOTH",
"-157 -470 OFFCURVE",
"-79 -393 QCURVE",
"-2 -470 OFFCURVE",
"100 -470 QCURVE SMOOTH",
"338 -470 OFFCURVE",
"338 -304 QCURVE SMOOTH",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -304 LINE SMOOTH",
"250 -412 OFFCURVE",
"105 -412 QCURVE SMOOTH",
"-30 -412 OFFCURVE",
"-30 -304 QCURVE SMOOTH",
"-30 -60 LINE",
"-130 -60 LINE",
"-130 -304 LINE SMOOTH",
"-130 -412 OFFCURVE",
"-245 -412 QCURVE SMOOTH",
"-360 -412 OFFCURVE",
"-360 -304 QCURVE SMOOTH",
"-360 -237 LINE SMOOTH",
"-360 -60 OFFCURVE",
"-580 -60 QCURVE SMOOTH",
"-800 -60 OFFCURVE",
"-800 -237 QCURVE SMOOTH",
"-800 -500 LINE",
"-600 -500 LINE",
"-600 -412 LINE",
"-700 -412 LINE",
"-700 -237 LINE SMOOTH",
"-700 -142 OFFCURVE",
"-580 -142 QCURVE SMOOTH",
"-460 -142 OFFCURVE",
"-460 -237 QCURVE SMOOTH",
"-460 -304 LINE SMOOTH",
"-460 -500 OFFCURVE",
"-250 -500 QCURVE SMOOTH",
"-157 -500 OFFCURVE",
"-79 -423 QCURVE",
"-2 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -304 QCURVE SMOOTH",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"105 -350 QCURVE SMOOTH",
"10 -350 OFFCURVE",
"10 -237 QCURVE SMOOTH",
"10 -50 LINE",
"-170 -50 LINE",
"-170 -237 LINE SMOOTH",
"-170 -350 OFFCURVE",
"-245 -350 QCURVE SMOOTH",
"-320 -350 OFFCURVE",
"-320 -237 QCURVE SMOOTH",
"-320 -50 OFFCURVE",
"-580 -50 QCURVE SMOOTH",
"-840 -50 OFFCURVE",
"-840 -237 QCURVE SMOOTH",
"-840 -500 LINE",
"-580 -500 LINE",
"-580 -387 LINE",
"-660 -387 LINE",
"-660 -237 LINE SMOOTH",
"-660 -162 OFFCURVE",
"-580 -162 QCURVE SMOOTH",
"-500 -162 OFFCURVE",
"-500 -237 QCURVE SMOOTH",
"-500 -500 OFFCURVE",
"-250 -500 QCURVE SMOOTH",
"-157 -500 OFFCURVE",
"-79 -443 QCURVE",
"-2 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"388 -500 OFFCURVE",
"388 -237 QCURVE SMOOTH",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 -237 LINE SMOOTH",
"200 -350 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01213 1 2 7 1 18 1 2 5 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0129 1 7 0 4 8 7 4 105 0 1 1 0 95 0 0 0 17 77 10 1 8 8 2 98 6 3 2 2 2 20 77 0 5 5 2 97 6 3 2 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 47 values pushed */\0120 1 1 0 95 0 0 0 17 77 0 4 4 7 97 9 1 7 7 18 77 10 1 8 8 2 98 6 3 2 2 2 20 77 0 5 5 2 97 6 3 2 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\01245 43 41 40 34 34 17 18 34 34 35 17 25 11 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -237 LINE SMOOTH",
"150 -350 OFFCURVE",
"95 -350 QCURVE SMOOTH",
"40 -350 OFFCURVE",
"40 -237 QCURVE SMOOTH",
"40 -50 LINE",
"-200 -50 LINE",
"-200 -237 LINE SMOOTH",
"-200 -350 OFFCURVE",
"-250 -350 QCURVE SMOOTH",
"-300 -350 OFFCURVE",
"-300 -237 QCURVE SMOOTH",
"-300 -50 OFFCURVE",
"-595 -50 QCURVE SMOOTH",
"-890 -50 OFFCURVE",
"-890 -237 QCURVE SMOOTH",
"-890 -500 LINE",
"-580 -500 LINE",
"-580 -387 LINE",
"-640 -387 LINE",
"-640 -237 LINE SMOOTH",
"-640 -192 OFFCURVE",
"-585 -192 QCURVE SMOOTH",
"-530 -192 OFFCURVE",
"-530 -237 QCURVE SMOOTH",
"-530 -500 OFFCURVE",
"-233 -500 QCURVE SMOOTH",
"-157 -500 OFFCURVE",
"-79 -443 QCURVE",
"-2 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -237 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -237 LINE SMOOTH",
"100 -320 OFFCURVE",
"45 -320 QCURVE SMOOTH",
"-10 -320 OFFCURVE",
"-10 -237 QCURVE SMOOTH",
"-10 -50 LINE",
"-350 -50 LINE",
"-350 -237 LINE SMOOTH",
"-350 -320 OFFCURVE",
"-400 -320 QCURVE SMOOTH",
"-450 -320 OFFCURVE",
"-450 -237 QCURVE SMOOTH",
"-450 -50 OFFCURVE",
"-845 -50 QCURVE SMOOTH",
"-1240 -50 OFFCURVE",
"-1240 -237 QCURVE SMOOTH",
"-1240 -500 LINE",
"-830 -500 LINE",
"-830 -387 LINE",
"-890 -387 LINE",
"-890 -267 LINE SMOOTH",
"-890 -222 OFFCURVE",
"-835 -222 QCURVE SMOOTH",
"-780 -222 OFFCURVE",
"-780 -267 QCURVE SMOOTH",
"-780 -500 OFFCURVE",
"-383 -500 QCURVE SMOOTH",
"-257 -500 OFFCURVE",
"-179 -443 QCURVE",
"-102 -500 OFFCURVE",
"100 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -237 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D21788;
},
{
glyphname = uni17D2_1789;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-913 -222 OFFCURVE",
"-626 -470 OFFCURVE",
"-460 -470 QCURVE SMOOTH",
"-250 -470 OFFCURVE",
"-250 -260 QCURVE SMOOTH",
"-250 -100 OFFCURVE",
"-454 -100 QCURVE SMOOTH",
"-538 -100 LINE",
"-538 -150 LINE",
"-454 -150 LINE SMOOTH",
"-300 -150 OFFCURVE",
"-300 -260 QCURVE SMOOTH",
"-300 -420 OFFCURVE",
"-460 -420 QCURVE SMOOTH",
"-620 -420 OFFCURVE",
"-892 -180 OFFCURVE",
"-1063 -180 QCURVE SMOOTH",
"-1120 -180 LINE",
"-1120 -222 LINE",
"-1063 -222 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-913 -260 OFFCURVE",
"-646 -500 OFFCURVE",
"-460 -500 QCURVE SMOOTH",
"-250 -500 OFFCURVE",
"-250 -260 QCURVE SMOOTH",
"-250 -100 OFFCURVE",
"-454 -100 QCURVE SMOOTH",
"-538 -100 LINE",
"-538 -190 LINE",
"-454 -190 LINE SMOOTH",
"-347 -190 OFFCURVE",
"-347 -260 QCURVE SMOOTH",
"-347 -412 OFFCURVE",
"-460 -412 QCURVE SMOOTH",
"-600 -412 OFFCURVE",
"-872 -180 OFFCURVE",
"-1063 -180 QCURVE SMOOTH",
"-1120 -180 LINE",
"-1120 -260 LINE",
"-1063 -260 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-913 -300 OFFCURVE",
"-646 -500 OFFCURVE",
"-460 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -260 QCURVE SMOOTH",
"-200 -100 LINE",
"-538 -100 LINE",
"-538 -240 LINE",
"-350 -240 LINE",
"-350 -364 OFFCURVE",
"-460 -364 QCURVE SMOOTH",
"-600 -364 OFFCURVE",
"-731 -248 QCURVE SMOOTH",
"-862 -140 OFFCURVE",
"-1067 -140 QCURVE SMOOTH",
"-1150 -140 LINE",
"-1150 -300 LINE",
"-1023 -300 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\0120 3 0 2 5 3 2 103 0 0 6 1 5 1 0 5 105 0 1 1 4 97 0 4 4 20 4 78 0 0 0 17 0 16 34 17 17 34 33 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1023 -350 LINE SMOOTH",
"-913 -350 OFFCURVE",
"-646 -500 OFFCURVE",
"-490 -500 QCURVE SMOOTH",
"-150 -500 OFFCURVE",
"-150 -260 QCURVE SMOOTH",
"-150 -100 LINE",
"-538 -100 LINE",
"-538 -240 LINE",
"-400 -240 LINE",
"-400 -334 OFFCURVE",
"-490 -334 QCURVE SMOOTH",
"-600 -334 OFFCURVE",
"-862 -140 OFFCURVE",
"-1067 -140 QCURVE SMOOTH",
"-1200 -140 LINE",
"-1200 -350 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1063 -350 LINE SMOOTH",
"-953 -350 OFFCURVE",
"-696 -500 OFFCURVE",
"-540 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -260 QCURVE SMOOTH",
"-100 -100 LINE",
"-588 -100 LINE",
"-588 -240 LINE",
"-470 -240 LINE",
"-470 -334 OFFCURVE",
"-540 -334 QCURVE SMOOTH",
"-650 -334 OFFCURVE",
"-902 -140 OFFCURVE",
"-1107 -140 QCURVE SMOOTH",
"-1200 -140 LINE",
"-1200 -350 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1789;
},
{
glyphname = coeng_1789khmer.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1236 -363 OFFCURVE",
"-729 -470 OFFCURVE",
"-526 -470 QCURVE SMOOTH",
"-250 -470 OFFCURVE",
"-250 -336 QCURVE SMOOTH",
"-250 -300 LINE",
"-585 -300 LINE",
"-585 -347 LINE",
"-308 -347 LINE",
"-308 -420 OFFCURVE",
"-527 -420 QCURVE SMOOTH",
"-666 -420 OFFCURVE",
"-1221 -316 OFFCURVE",
"-1468 -316 QCURVE SMOOTH",
"-1700 -316 LINE",
"-1700 -363 LINE",
"-1468 -363 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-1700 -50 LINE",
"-1700 -269 LINE",
"-1478 -269 LINE",
"-1478 -227 LINE",
"-1642 -227 LINE",
"-1642 -104 LINE",
"-1280 -240 LINE",
"-963 -104 LINE",
"-963 -269 LINE",
"-905 -269 LINE",
"-905 -98 LINE",
"-308 -98 LINE",
"-308 -269 LINE",
"-250 -269 LINE",
"-250 -50 LINE",
"-963 -50 LINE",
"-1280 -187 LINE",
"-1642 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1236 -423 OFFCURVE",
"-729 -500 OFFCURVE",
"-576 -500 QCURVE SMOOTH",
"-230 -500 OFFCURVE",
"-230 -396 QCURVE SMOOTH",
"-230 -330 LINE",
"-585 -330 LINE",
"-585 -407 LINE",
"-338 -407 LINE",
"-338 -438 OFFCURVE",
"-527 -438 QCURVE SMOOTH",
"-666 -438 OFFCURVE",
"-1221 -346 OFFCURVE",
"-1468 -346 QCURVE SMOOTH",
"-1720 -346 LINE",
"-1720 -423 LINE",
"-1468 -423 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-1720 -50 LINE",
"-1720 -299 LINE",
"-1478 -299 LINE",
"-1478 -227 LINE",
"-1612 -227 LINE",
"-1612 -134 LINE",
"-1280 -240 LINE",
"-988 -134 LINE",
"-988 -299 LINE",
"-880 -299 LINE",
"-880 -135 LINE",
"-338 -135 LINE",
"-338 -299 LINE",
"-230 -299 LINE",
"-230 -50 LINE",
"-988 -50 LINE",
"-1280 -157 LINE",
"-1612 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1236 -443 OFFCURVE",
"-809 -500 OFFCURVE",
"-576 -500 QCURVE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -396 QCURVE SMOOTH",
"-200 -330 LINE",
"-585 -330 LINE",
"-585 -407 LINE",
"-388 -407 LINE",
"-388 -438 OFFCURVE",
"-527 -438 QCURVE SMOOTH",
"-666 -438 OFFCURVE",
"-1141 -346 OFFCURVE",
"-1468 -346 QCURVE SMOOTH",
"-1750 -346 LINE",
"-1750 -443 LINE",
"-1468 -443 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-1750 -50 LINE",
"-1750 -299 LINE",
"-1478 -299 LINE",
"-1478 -207 LINE",
"-1562 -207 LINE",
"-1562 -154 LINE",
"-1280 -240 LINE",
"-1037 -154 LINE",
"-1037 -299 LINE",
"-850 -299 LINE",
"-850 -155 LINE",
"-388 -155 LINE",
"-388 -299 LINE",
"-200 -299 LINE",
"-200 -50 LINE",
"-1037 -50 LINE",
"-1280 -137 LINE",
"-1562 -50 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01228 26 2 8 6 27 1 7 10 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 46 values pushed */\01212 1 6 0 8 10 6 8 103 0 10 11 9 2 7 0 10 7 104 0 2 1 0 2 87 3 1 0 13 1 5 4 0 5 103 0 1 1 4 97 0 4 4 20 4 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 48 values pushed */\0120 10 11 9 2 7 0 10 7 104 0 2 1 0 2 87 3 1 0 13 1 5 4 0 5 103 0 8 8 6 95 12 1 6 6 18 77 0 1 1 4 97 0 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 49 values pushed */\0120 10 11 9 2 7 3 10 7 104 0 3 0 2 1 3 2 103 0 0 13 1 5 4 0 5 103 0 8 8 6 95 12 1 6 6 18 77 0 1 1 4 97 0 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 28 values pushed */\0120 0 34 33 32 31 30 29 25 24 23 22 21 20 19 18 0 16 0 15 34 17 17 33 33 14 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1468 -443 LINE SMOOTH",
"-1236 -443 OFFCURVE",
"-809 -500 OFFCURVE",
"-576 -500 QCURVE SMOOTH",
"-150 -500 OFFCURVE",
"-150 -396 QCURVE SMOOTH",
"-150 -330 LINE",
"-585 -330 LINE",
"-585 -407 LINE",
"-438 -407 LINE",
"-438 -438 OFFCURVE",
"-527 -438 QCURVE SMOOTH",
"-666 -438 OFFCURVE",
"-1141 -346 OFFCURVE",
"-1468 -346 QCURVE SMOOTH",
"-1800 -346 LINE",
"-1800 -443 LINE"
);
},
{
closed = 1;
nodes = (
"-1280 -137 LINE",
"-1512 -50 LINE",
"-1800 -50 LINE",
"-1800 -299 LINE",
"-1428 -299 LINE",
"-1428 -207 LINE",
"-1512 -207 LINE",
"-1512 -154 LINE",
"-1280 -240 LINE",
"-1087 -154 LINE",
"-1087 -299 LINE",
"-800 -299 LINE",
"-800 -155 LINE",
"-438 -155 LINE",
"-438 -299 LINE",
"-150 -299 LINE",
"-150 -50 LINE",
"-1087 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1468 -443 LINE SMOOTH",
"-1236 -443 OFFCURVE",
"-809 -500 OFFCURVE",
"-576 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -396 QCURVE SMOOTH",
"-100 -330 LINE",
"-585 -330 LINE",
"-585 -407 LINE",
"-488 -407 LINE",
"-488 -438 OFFCURVE",
"-527 -438 QCURVE SMOOTH",
"-666 -438 OFFCURVE",
"-1141 -346 OFFCURVE",
"-1468 -346 QCURVE SMOOTH",
"-1850 -346 LINE",
"-1850 -443 LINE"
);
},
{
closed = 1;
nodes = (
"-1280 -137 LINE",
"-1462 -50 LINE",
"-1850 -50 LINE",
"-1850 -299 LINE",
"-1378 -299 LINE",
"-1378 -207 LINE",
"-1462 -207 LINE",
"-1462 -154 LINE",
"-1280 -240 LINE",
"-1137 -154 LINE",
"-1137 -299 LINE",
"-750 -299 LINE",
"-750 -155 LINE",
"-488 -155 LINE",
"-488 -299 LINE",
"-100 -299 LINE",
"-100 -50 LINE",
"-1137 -50 LINE"
);
}
);
width = 0;
}
);
note = coeng_1789khmer.a;
},
{
glyphname = uni17D2_178A;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-250 -470 LINE",
"-250 -273 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -273 QCURVE SMOOTH",
"-1050 -326 LINE SMOOTH",
"-1050 -470 OFFCURVE",
"-860 -470 QCURVE SMOOTH",
"-696 -470 LINE",
"-696 -420 LINE",
"-860 -420 LINE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -326 QCURVE SMOOTH",
"-992 -273 LINE SMOOTH",
"-992 -110 OFFCURVE",
"-650 -110 QCURVE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -273 QCURVE SMOOTH",
"-308 -470 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-650 -148 QCURVE SMOOTH",
"-347 -148 OFFCURVE",
"-347 -283 QCURVE SMOOTH",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -356 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-860 -500 QCURVE SMOOTH",
"-696 -500 LINE",
"-696 -412 LINE",
"-860 -412 LINE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -356 QCURVE SMOOTH",
"-953 -283 LINE SMOOTH",
"-953 -148 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-917 -500 QCURVE SMOOTH",
"-696 -500 LINE",
"-696 -400 LINE",
"-829 -400 LINE SMOOTH",
"-883 -400 OFFCURVE",
"-883 -366 QCURVE SMOOTH",
"-883 -283 LINE SMOOTH",
"-883 -217 OFFCURVE",
"-830 -183 QCURVE SMOOTH",
"-779 -150 OFFCURVE",
"-650 -150 QCURVE SMOOTH",
"-521 -150 OFFCURVE",
"-469 -183 QCURVE SMOOTH",
"-417 -217 OFFCURVE",
"-417 -283 QCURVE SMOOTH",
"-417 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -184 OFFCURVE",
"-339 -116 QCURVE SMOOTH",
"-428 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-872 -50 OFFCURVE",
"-961 -116 QCURVE SMOOTH",
"-1050 -184 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -386 LINE SMOOTH",
"-1050 -500 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 0 0 2 3 0 2 105 0 3 3 1 95 4 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 2 2 0 97 0 0 0 18 77 0 3 3 1 95 4 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01233 37 36 20 36 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -283 QCURVE SMOOTH",
"-1100 -386 LINE SMOOTH",
"-1100 -500 OFFCURVE",
"-967 -500 QCURVE SMOOTH",
"-696 -500 LINE",
"-696 -350 LINE",
"-779 -350 LINE SMOOTH",
"-833 -350 OFFCURVE",
"-833 -316 QCURVE SMOOTH",
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-200 -500 LINE",
"-200 -283 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-100 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -283 QCURVE SMOOTH",
"-1200 -386 LINE SMOOTH",
"-1200 -500 OFFCURVE",
"-1067 -500 QCURVE SMOOTH",
"-696 -500 LINE",
"-696 -350 LINE",
"-749 -350 LINE SMOOTH",
"-823 -350 OFFCURVE",
"-823 -316 QCURVE SMOOTH",
"-823 -283 LINE SMOOTH",
"-823 -210 OFFCURVE",
"-650 -210 QCURVE SMOOTH",
"-477 -210 OFFCURVE",
"-477 -283 QCURVE SMOOTH",
"-477 -500 LINE",
"-100 -500 LINE",
"-100 -283 LINE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17D2_178A;
},
{
glyphname = uni17D2_178B;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -150 LINE",
"-157 -150 LINE",
"-157 -100 LINE",
"-250 -100 LINE",
"-250 -20 LINE",
"-308 -20 LINE",
"-308 -100 LINE",
"-1050 -100 LINE",
"-1050 -470 LINE",
"-992 -470 LINE",
"-649 -335 LINE"
);
},
{
closed = 1;
nodes = (
"-308 -150 LINE",
"-308 -416 LINE",
"-649 -285 LINE",
"-992 -416 LINE",
"-992 -150 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-347 -491 LINE",
"-250 -491 LINE",
"-250 -188 LINE",
"-157 -188 LINE",
"-157 -100 LINE",
"-250 -100 LINE",
"-250 -20 LINE",
"-347 -20 LINE",
"-347 -100 LINE",
"-1050 -100 LINE",
"-1050 -491 LINE",
"-953 -491 LINE",
"-649 -355 LINE"
);
},
{
closed = 1;
nodes = (
"-347 -188 LINE",
"-347 -396 LINE",
"-649 -265 LINE",
"-953 -396 LINE",
"-953 -188 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-425 -491 LINE",
"-246 -491 LINE",
"-246 -205 LINE",
"-157 -205 LINE",
"-157 -82 LINE",
"-246 -82 LINE",
"-246 0 LINE",
"-425 0 LINE",
"-425 -82 LINE",
"-1052 -82 LINE",
"-1052 -491 LINE",
"-873 -491 LINE",
"-649 -385 LINE"
);
},
{
closed = 1;
nodes = (
"-425 -205 LINE",
"-425 -336 LINE",
"-649 -245 LINE",
"-873 -336 LINE",
"-873 -205 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01215 14 13 12 4 0 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 6 1 4 0 1 4 103 0 2 2 0 95 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0126 1 4 4 1 95 3 1 1 1 18 77 0 2 2 0 95 5 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 6 1 4 0 1 4 103 0 2 2 0 95 5 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01221 17 17 17 17 17 16 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-823 -491 LINE",
"-649 -385 LINE",
"-475 -491 LINE",
"-196 -491 LINE",
"-196 -235 LINE",
"-107 -235 LINE",
"-107 -82 LINE",
"-196 -82 LINE",
"-196 0 LINE",
"-475 0 LINE",
"-475 -82 LINE",
"-1102 -82 LINE",
"-1102 -491 LINE"
);
},
{
closed = 1;
nodes = (
"-823 -336 LINE",
"-823 -235 LINE",
"-475 -235 LINE",
"-475 -336 LINE",
"-649 -245 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-813 -491 LINE",
"-649 -385 LINE",
"-485 -491 LINE",
"-96 -491 LINE",
"-96 -235 LINE",
"-7 -235 LINE",
"-7 -82 LINE",
"-96 -82 LINE",
"-96 0 LINE",
"-485 0 LINE",
"-485 -82 LINE",
"-1202 -82 LINE",
"-1202 -491 LINE"
);
},
{
closed = 1;
nodes = (
"-813 -336 LINE",
"-813 -235 LINE",
"-485 -235 LINE",
"-485 -336 LINE",
"-649 -245 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_178B;
},
{
glyphname = uni17D2_178C;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-650 -156 LINE",
"-992 -60 LINE",
"-1050 -60 LINE",
"-1050 -221 LINE",
"-992 -221 LINE",
"-992 -110 LINE",
"-650 -204 LINE",
"-308 -110 LINE",
"-308 -183 LINE SMOOTH",
"-308 -218 OFFCURVE",
"-1050 -284 QCURVE",
"-1050 -470 LINE",
"-992 -470 LINE",
"-308 -400 LINE",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -312 LINE",
"-308 -312 LINE",
"-308 -352 LINE",
"-992 -422 LINE",
"-992 -324 LINE",
"-250 -260 OFFCURVE",
"-250 -208 QCURVE SMOOTH",
"-250 -60 LINE",
"-308 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-650 -136 LINE",
"-953 -60 LINE",
"-1050 -60 LINE",
"-1050 -221 LINE",
"-953 -221 LINE",
"-953 -135 LINE",
"-650 -204 LINE",
"-347 -135 LINE",
"-347 -183 LINE SMOOTH",
"-347 -218 OFFCURVE",
"-1050 -284 QCURVE",
"-1050 -500 LINE",
"-953 -500 LINE",
"-347 -430 LINE",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -312 LINE",
"-347 -312 LINE",
"-347 -352 LINE",
"-953 -422 LINE",
"-953 -344 LINE",
"-250 -280 OFFCURVE",
"-250 -228 QCURVE SMOOTH",
"-250 -60 LINE",
"-347 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-650 -116 LINE",
"-872 -50 LINE",
"-1050 -50 LINE",
"-1050 -221 LINE",
"-872 -221 LINE",
"-872 -155 LINE",
"-650 -204 LINE",
"-428 -155 LINE",
"-428 -183 LINE SMOOTH",
"-428 -218 OFFCURVE",
"-1050 -284 QCURVE",
"-1050 -500 LINE",
"-872 -500 LINE",
"-428 -440 LINE",
"-428 -500 LINE",
"-250 -500 LINE",
"-250 -312 LINE",
"-428 -312 LINE",
"-428 -352 LINE",
"-872 -402 LINE",
"-872 -354 LINE",
"-250 -280 OFFCURVE",
"-250 -228 QCURVE SMOOTH",
"-250 -50 LINE",
"-428 -50 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01223 18 17 16 4 3 4 13 1 0 3 10 5 4 3 4 1 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0126 5 2 4 0 3 0 4 3 103 0 0 0 1 96 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 3 4 95 6 5 2 4 4 18 77 0 0 0 1 96 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 24 0 24 17 23 18 17 22 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-478 -50 LINE",
"-650 -116 LINE",
"-822 -50 LINE",
"-1100 -50 LINE",
"-1100 -221 LINE",
"-822 -221 LINE",
"-822 -155 LINE",
"-650 -204 LINE",
"-478 -155 LINE",
"-478 -183 LINE SMOOTH",
"-478 -218 OFFCURVE",
"-1100 -284 QCURVE",
"-1100 -500 LINE",
"-822 -500 LINE",
"-478 -440 LINE",
"-478 -500 LINE",
"-200 -500 LINE",
"-200 -312 LINE",
"-478 -312 LINE",
"-478 -352 LINE",
"-822 -402 LINE",
"-822 -354 LINE",
"-200 -280 OFFCURVE",
"-200 -228 QCURVE SMOOTH",
"-200 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-488 -50 LINE",
"-650 -116 LINE",
"-812 -50 LINE",
"-1200 -50 LINE",
"-1200 -221 LINE",
"-812 -221 LINE",
"-812 -155 LINE",
"-650 -204 LINE",
"-488 -155 LINE",
"-488 -183 LINE SMOOTH",
"-488 -218 OFFCURVE",
"-1200 -284 QCURVE",
"-1200 -500 LINE",
"-812 -500 LINE",
"-488 -440 LINE",
"-488 -500 LINE",
"-100 -500 LINE",
"-100 -312 LINE",
"-488 -312 LINE",
"-488 -352 LINE",
"-812 -402 LINE",
"-812 -354 LINE",
"-100 -280 OFFCURVE",
"-100 -228 QCURVE SMOOTH",
"-100 -50 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_178C;
},
{
glyphname = uni17D2178D;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 -409 LINE",
"107 -300 OFFCURVE",
"-100 -300 QCURVE SMOOTH",
"-250 -300 LINE",
"-250 -60 LINE",
"-308 -60 LINE",
"-650 -208 LINE",
"-992 -60 LINE",
"-1050 -60 LINE",
"-1050 -470 LINE",
"-803 -470 LINE",
"-803 -420 LINE",
"-992 -420 LINE",
"-992 -119 LINE",
"-650 -266 LINE",
"-308 -119 LINE",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -350 LINE",
"-100 -350 LINE SMOOTH",
"16 -350 OFFCURVE",
"280 -443 OFFCURVE",
"280 -500 QCURVE",
"338 -500 LINE",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -359 LINE",
"47 -300 OFFCURVE",
"-100 -300 QCURVE SMOOTH",
"-250 -300 LINE",
"-250 -60 LINE",
"-347 -60 LINE",
"-650 -208 LINE",
"-953 -60 LINE",
"-1050 -60 LINE",
"-1050 -500 LINE",
"-803 -500 LINE",
"-803 -412 LINE",
"-953 -412 LINE",
"-953 -149 LINE",
"-650 -296 LINE",
"-347 -149 LINE",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -388 LINE",
"-100 -388 LINE SMOOTH",
"-4 -388 OFFCURVE",
"250 -443 OFFCURVE",
"250 -500 QCURVE",
"358 -500 LINE",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"200 -443 OFFCURVE",
"200 -500 QCURVE",
"388 -500 LINE",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 -329 LINE",
"47 -290 OFFCURVE",
"-100 -290 QCURVE SMOOTH",
"-250 -290 LINE",
"-250 -50 LINE",
"-428 -50 LINE",
"-650 -168 LINE",
"-872 -50 LINE",
"-1050 -50 LINE",
"-1050 -500 LINE",
"-783 -500 LINE",
"-783 -387 LINE",
"-872 -387 LINE",
"-872 -189 LINE",
"-650 -306 LINE",
"-428 -189 LINE",
"-428 -500 LINE",
"-250 -500 LINE",
"-250 -390 LINE",
"-100 -390 LINE SMOOTH",
"-4 -390 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01232 20 2 4 8 13 6 4 3 6 4 19 5 2 2 6 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 45 values pushed */\0120 6 10 1 0 1 6 0 103 0 8 8 7 95 0 7 7 17 77 5 1 4 4 1 95 9 3 2 1 1 20 77 0 2 2 1 96 9 3 2 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 38 values pushed */\0120 6 10 1 0 1 6 0 103 0 8 8 7 95 0 7 7 17 77 5 1 4 4 18 77 0 2 2 1 96 9 3 2 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\0121 0 34 33 31 30 29 28 18 16 15 14 12 11 10 9 8 7 3 2 0 36 1 36 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -329 LINE",
"47 -290 OFFCURVE",
"-100 -290 QCURVE SMOOTH",
"-200 -290 LINE",
"-200 -50 LINE",
"-478 -50 LINE",
"-650 -168 LINE",
"-822 -50 LINE",
"-1100 -50 LINE",
"-1100 -500 LINE",
"-733 -500 LINE",
"-733 -387 LINE",
"-822 -387 LINE",
"-822 -219 LINE",
"-650 -336 LINE",
"-478 -219 LINE",
"-478 -500 LINE",
"-200 -500 LINE",
"-200 -420 LINE",
"-100 -420 LINE SMOOTH",
"-4 -420 OFFCURVE",
"150 -443 OFFCURVE",
"150 -500 QCURVE",
"438 -500 LINE",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -299 LINE",
"17 -260 OFFCURVE",
"-100 -260 QCURVE",
"-100 -50 LINE",
"-488 -50 LINE",
"-650 -168 LINE",
"-812 -50 LINE",
"-1200 -50 LINE",
"-1200 -500 LINE",
"-723 -500 LINE",
"-723 -367 LINE",
"-812 -367 LINE",
"-812 -219 LINE",
"-650 -336 LINE",
"-488 -219 LINE",
"-488 -500 LINE",
"-100 -500 LINE",
"-100 -420 LINE",
"-4 -420 OFFCURVE",
"100 -443 OFFCURVE",
"100 -500 QCURVE",
"488 -500 LINE",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D2178D;
},
{
glyphname = uni17D2_178E;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1269 -320 LINE",
"-973 -470 LINE",
"-915 -470 LINE",
"-915 -237 LINE SMOOTH",
"-915 -112 OFFCURVE",
"-628 -112 QCURVE SMOOTH",
"-308 -112 OFFCURVE",
"-308 -237 QCURVE SMOOTH",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -237 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-628 -60 QCURVE SMOOTH",
"-973 -60 OFFCURVE",
"-973 -230 QCURVE SMOOTH",
"-973 -407 LINE",
"-1269 -262 LINE",
"-1565 -407 LINE",
"-1565 -230 LINE SMOOTH",
"-1565 -60 OFFCURVE",
"-1910 -60 QCURVE SMOOTH",
"-2288 -60 OFFCURVE",
"-2288 -237 QCURVE SMOOTH",
"-2288 -470 LINE",
"-2050 -470 LINE",
"-2050 -420 LINE",
"-2230 -420 LINE",
"-2230 -237 LINE SMOOTH",
"-2230 -112 OFFCURVE",
"-1906 -112 QCURVE SMOOTH",
"-1623 -112 OFFCURVE",
"-1623 -237 QCURVE SMOOTH",
"-1623 -470 LINE",
"-1565 -470 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1269 -350 LINE",
"-998 -500 LINE",
"-890 -500 LINE",
"-890 -237 LINE SMOOTH",
"-890 -152 OFFCURVE",
"-628 -152 QCURVE SMOOTH",
"-338 -152 OFFCURVE",
"-338 -237 QCURVE SMOOTH",
"-338 -500 LINE",
"-230 -500 LINE",
"-230 -237 LINE SMOOTH",
"-230 -60 OFFCURVE",
"-628 -60 QCURVE SMOOTH",
"-998 -60 OFFCURVE",
"-998 -230 QCURVE SMOOTH",
"-998 -387 LINE",
"-1269 -252 LINE",
"-1540 -387 LINE",
"-1540 -230 LINE SMOOTH",
"-1540 -60 OFFCURVE",
"-1910 -60 QCURVE SMOOTH",
"-2308 -60 OFFCURVE",
"-2308 -237 QCURVE SMOOTH",
"-2308 -500 LINE",
"-2050 -500 LINE",
"-2050 -412 LINE",
"-2200 -412 LINE",
"-2200 -237 LINE SMOOTH",
"-2200 -152 OFFCURVE",
"-1906 -152 QCURVE SMOOTH",
"-1648 -152 OFFCURVE",
"-1648 -237 QCURVE SMOOTH",
"-1648 -500 LINE",
"-1540 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1269 -380 LINE",
"-1038 -500 LINE",
"-850 -500 LINE",
"-850 -237 LINE SMOOTH",
"-850 -162 OFFCURVE",
"-628 -162 QCURVE SMOOTH",
"-388 -162 OFFCURVE",
"-388 -237 QCURVE SMOOTH",
"-388 -500 LINE",
"-200 -500 LINE",
"-200 -237 LINE SMOOTH",
"-200 -50 OFFCURVE",
"-628 -50 QCURVE SMOOTH",
"-1038 -50 OFFCURVE",
"-1038 -230 QCURVE SMOOTH",
"-1038 -357 LINE",
"-1269 -252 LINE",
"-1500 -357 LINE",
"-1500 -230 LINE SMOOTH",
"-1500 -50 OFFCURVE",
"-1910 -50 QCURVE SMOOTH",
"-2338 -50 OFFCURVE",
"-2338 -237 QCURVE SMOOTH",
"-2338 -500 LINE",
"-2050 -500 LINE",
"-2050 -387 LINE",
"-2150 -387 LINE",
"-2150 -237 LINE SMOOTH",
"-2150 -162 OFFCURVE",
"-1906 -162 QCURVE SMOOTH",
"-1688 -162 OFFCURVE",
"-1688 -237 QCURVE SMOOTH",
"-1688 -500 LINE",
"-1500 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01232 17 16 15 4 1 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0124 1 3 6 1 0 1 3 0 105 0 1 1 2 95 9 8 7 5 4 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0126 1 0 0 3 97 4 1 3 3 18 77 0 1 1 2 95 9 8 7 5 4 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 17 values pushed */\0120 0 0 33 0 33 18 34 18 38 34 17 18 34 10 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1738 -500 LINE",
"-1450 -500 LINE",
"-1269 -380 LINE",
"-1088 -500 LINE",
"-800 -500 LINE",
"-800 -287 LINE SMOOTH",
"-800 -212 OFFCURVE",
"-628 -212 QCURVE SMOOTH",
"-438 -212 OFFCURVE",
"-438 -287 QCURVE SMOOTH",
"-438 -500 LINE",
"-150 -500 LINE",
"-150 -237 LINE SMOOTH",
"-150 -50 OFFCURVE",
"-628 -50 QCURVE SMOOTH",
"-1088 -50 OFFCURVE",
"-1088 -230 QCURVE SMOOTH",
"-1088 -307 LINE",
"-1269 -202 LINE",
"-1450 -307 LINE",
"-1450 -230 LINE SMOOTH",
"-1450 -50 OFFCURVE",
"-1910 -50 QCURVE SMOOTH",
"-2388 -50 OFFCURVE",
"-2388 -237 QCURVE SMOOTH",
"-2388 -500 LINE",
"-2000 -500 LINE",
"-2000 -387 LINE",
"-2100 -387 LINE",
"-2100 -287 LINE SMOOTH",
"-2100 -212 OFFCURVE",
"-1906 -212 QCURVE SMOOTH",
"-1738 -212 OFFCURVE",
"-1738 -287 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1788 -500 LINE",
"-1400 -500 LINE",
"-1269 -380 LINE",
"-1138 -500 LINE",
"-750 -500 LINE",
"-750 -287 LINE SMOOTH",
"-750 -212 OFFCURVE",
"-628 -212 QCURVE SMOOTH",
"-488 -212 OFFCURVE",
"-488 -287 QCURVE SMOOTH",
"-488 -500 LINE",
"-100 -500 LINE",
"-100 -237 LINE SMOOTH",
"-100 -50 OFFCURVE",
"-628 -50 QCURVE SMOOTH",
"-1138 -50 OFFCURVE",
"-1138 -230 QCURVE SMOOTH",
"-1138 -307 LINE",
"-1269 -202 LINE",
"-1400 -307 LINE",
"-1400 -230 LINE SMOOTH",
"-1400 -50 OFFCURVE",
"-1910 -50 QCURVE SMOOTH",
"-2438 -50 OFFCURVE",
"-2438 -237 QCURVE SMOOTH",
"-2438 -500 LINE",
"-1950 -500 LINE",
"-1950 -387 LINE",
"-2050 -387 LINE",
"-2050 -287 LINE SMOOTH",
"-2050 -212 OFFCURVE",
"-1906 -212 QCURVE SMOOTH",
"-1788 -212 OFFCURVE",
"-1788 -287 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17D2_178E;
},
{
glyphname = uni17D2_178F;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_178A;
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -283 QCURVE SMOOTH",
"-1100 -386 LINE SMOOTH",
"-1100 -500 OFFCURVE",
"-967 -500 QCURVE SMOOTH",
"-696 -500 LINE",
"-696 -350 LINE",
"-779 -350 LINE SMOOTH",
"-833 -350 OFFCURVE",
"-833 -316 QCURVE SMOOTH",
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-200 -500 LINE",
"-200 -283 LINE SMOOTH"
);
}
);
width = 0;
},
{
components = (
{
name = uni17D2_178A;
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17D2_178F;
},
{
glyphname = uni17D2_1790;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-372 -380 OFFCURVE",
"-608 -60 OFFCURVE",
"-780 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -323 QCURVE SMOOTH",
"-1050 -469 LINE",
"-798 -469 LINE",
"-798 -420 LINE",
"-992 -420 LINE",
"-992 -323 LINE SMOOTH",
"-992 -110 OFFCURVE",
"-780 -110 QCURVE SMOOTH",
"-626 -110 OFFCURVE",
"-393 -430 OFFCURVE",
"-278 -430 QCURVE SMOOTH",
"-230 -430 LINE",
"-230 -380 LINE",
"-278 -380 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-372 -376 OFFCURVE",
"-608 -60 OFFCURVE",
"-780 -60 QCURVE SMOOTH",
"-1070 -60 OFFCURVE",
"-1070 -323 QCURVE SMOOTH",
"-1070 -499 LINE",
"-798 -499 LINE",
"-798 -412 LINE",
"-982 -412 LINE",
"-982 -323 LINE SMOOTH",
"-982 -148 OFFCURVE",
"-780 -148 QCURVE SMOOTH",
"-656 -148 OFFCURVE",
"-413 -464 OFFCURVE",
"-278 -464 QCURVE SMOOTH",
"-230 -464 LINE",
"-230 -376 LINE",
"-278 -376 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-372 -366 OFFCURVE",
"-608 -50 OFFCURVE",
"-769 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -323 QCURVE SMOOTH",
"-1100 -499 LINE",
"-768 -499 LINE",
"-768 -368 LINE",
"-930 -368 LINE",
"-930 -323 LINE SMOOTH",
"-930 -189 OFFCURVE",
"-779 -189 QCURVE SMOOTH",
"-686 -189 OFFCURVE",
"-627 -263 QCURVE",
"-453 -500 OFFCURVE",
"-278 -500 QCURVE SMOOTH",
"-200 -500 LINE",
"-200 -366 LINE",
"-278 -366 LINE SMOOTH"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 4 0 1 2 4 1 105 6 5 2 2 2 0 97 3 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 1 1 4 97 0 4 4 18 77 6 5 2 2 2 0 97 3 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 18 0 17 34 17 18 34 33 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-228 -316 LINE SMOOTH",
"-322 -316 OFFCURVE",
"-558 -50 OFFCURVE",
"-819 -50 QCURVE SMOOTH",
"-1150 -50 OFFCURVE",
"-1150 -499 QCURVE",
"-718 -499 LINE",
"-718 -368 LINE",
"-880 -368 LINE",
"-880 -239 OFFCURVE",
"-729 -239 QCURVE SMOOTH",
"-636 -239 OFFCURVE",
"-403 -480 OFFCURVE",
"-228 -480 QCURVE SMOOTH",
"-150 -480 LINE",
"-150 -316 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-178 -286 LINE SMOOTH",
"-322 -286 OFFCURVE",
"-558 -50 OFFCURVE",
"-819 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -499 QCURVE",
"-718 -499 LINE",
"-718 -368 LINE",
"-830 -368 LINE",
"-830 -269 OFFCURVE",
"-729 -269 QCURVE SMOOTH",
"-636 -269 OFFCURVE",
"-403 -480 OFFCURVE",
"-178 -480 QCURVE SMOOTH",
"-100 -480 LINE",
"-100 -286 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1790;
},
{
glyphname = uni17D2_1791;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-992 -459 LINE",
"-308 -347 LINE",
"-308 -429 LINE",
"-395 -470 LINE",
"-320 -470 LINE SMOOTH",
"-250 -470 OFFCURVE",
"-250 -417 QCURVE SMOOTH",
"-250 -285 LINE",
"-992 -410 LINE",
"-992 -280 LINE",
"-426 -236 LINE SMOOTH",
"-250 -218 OFFCURVE",
"-250 -109 QCURVE SMOOTH",
"-250 -60 LINE",
"-528 -60 LINE",
"-528 -110 LINE",
"-308 -110 LINE",
"-308 -180 OFFCURVE",
"-523 -193 QCURVE SMOOTH",
"-1050 -233 LINE",
"-1050 -459 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-953 -459 LINE",
"-347 -377 LINE",
"-347 -459 LINE",
"-435 -500 LINE",
"-320 -500 LINE SMOOTH",
"-250 -500 OFFCURVE",
"-250 -417 QCURVE SMOOTH",
"-250 -285 LINE",
"-953 -380 LINE",
"-953 -280 LINE",
"-426 -236 LINE SMOOTH",
"-250 -218 OFFCURVE",
"-250 -124 QCURVE SMOOTH",
"-250 -50 LINE",
"-528 -50 LINE",
"-528 -125 LINE",
"-347 -125 LINE",
"-347 -160 OFFCURVE",
"-523 -173 QCURVE SMOOTH",
"-1050 -213 LINE",
"-1050 -459 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-873 -459 LINE",
"-437 -417 LINE",
"-437 -459 LINE",
"-495 -500 LINE",
"-380 -500 LINE SMOOTH",
"-250 -500 OFFCURVE",
"-250 -417 QCURVE SMOOTH",
"-250 -295 LINE",
"-872 -360 LINE",
"-872 -300 LINE",
"-454 -249 LINE SMOOTH",
"-250 -228 OFFCURVE",
"-250 -124 QCURVE SMOOTH",
"-250 -50 LINE",
"-528 -50 LINE",
"-528 -125 LINE",
"-428 -125 LINE",
"-428 -160 OFFCURVE",
"-583 -175 QCURVE SMOOTH",
"-1050 -213 LINE",
"-1050 -459 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01218 12 11 10 0 5 3 0 1 76 17 1 3 1 75 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 0 0 3 1 0 103 0 3 3 20 77 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 0 1 95 0 1 1 18 77 0 3 3 20 77 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 0 2 0 3 2 128 0 0 0 1 95 0 1 1 18 77 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01219 40 17 19 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1100 -459 LINE",
"-823 -459 LINE",
"-487 -417 LINE",
"-487 -459 LINE",
"-545 -500 LINE",
"-330 -500 LINE SMOOTH",
"-200 -500 OFFCURVE",
"-200 -417 QCURVE SMOOTH",
"-200 -265 LINE",
"-822 -350 LINE",
"-822 -290 LINE",
"-200 -188 LINE",
"-200 -50 LINE",
"-487 -50 LINE",
"-487 -125 LINE",
"-1100 -213 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1200 -459 LINE",
"-823 -459 LINE",
"-487 -417 LINE",
"-487 -459 LINE",
"-545 -500 LINE",
"-230 -500 LINE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -417 QCURVE SMOOTH",
"-100 -265 LINE",
"-822 -350 LINE",
"-822 -290 LINE",
"-100 -188 LINE",
"-100 -50 LINE",
"-487 -50 LINE",
"-487 -125 LINE",
"-1200 -213 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1791;
},
{
glyphname = uni17D2_1792;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-654 -420 OFFCURVE",
"-831 -420 QCURVE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -330 QCURVE SMOOTH",
"-992 -282 LINE",
"-654 -218 LINE",
"-654 -281 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-308 -215 LINE SMOOTH",
"-308 -328 OFFCURVE",
"-410 -328 QCURVE SMOOTH",
"-482 -328 OFFCURVE",
"-621 -212 QCURVE",
"-308 -153 LINE"
);
},
{
closed = 1;
nodes = (
"-308 -60 LINE",
"-308 -80 LINE SMOOTH",
"-308 -100 OFFCURVE",
"-523 -142 QCURVE SMOOTH",
"-1050 -241 LINE",
"-1050 -330 LINE SMOOTH",
"-1050 -470 OFFCURVE",
"-834 -470 QCURVE SMOOTH",
"-704 -470 OFFCURVE",
"-604 -360 OFFCURVE",
"-604 -293 QCURVE",
"-477 -380 OFFCURVE",
"-408 -380 QCURVE SMOOTH",
"-250 -380 OFFCURVE",
"-250 -215 QCURVE SMOOTH",
"-250 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-684 -412 OFFCURVE",
"-831 -412 QCURVE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -330 QCURVE SMOOTH",
"-953 -294 LINE",
"-684 -236 LINE",
"-684 -321 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-347 -235 LINE SMOOTH",
"-347 -309 OFFCURVE",
"-410 -309 QCURVE SMOOTH",
"-462 -309 OFFCURVE",
"-651 -230 QCURVE",
"-347 -166 LINE"
);
},
{
closed = 1;
nodes = (
"-347 -60 LINE",
"-347 -70 LINE SMOOTH",
"-347 -90 OFFCURVE",
"-523 -127 QCURVE SMOOTH",
"-1050 -237 LINE",
"-1050 -330 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-834 -500 QCURVE SMOOTH",
"-704 -500 OFFCURVE",
"-650 -455 QCURVE SMOOTH",
"-594 -410 OFFCURVE",
"-594 -343 QCURVE",
"-477 -398 OFFCURVE",
"-408 -398 QCURVE SMOOTH",
"-372 -398 OFFCURVE",
"-339 -380 QCURVE SMOOTH",
"-250 -330 OFFCURVE",
"-250 -235 QCURVE SMOOTH",
"-250 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-796 -168 OFFCURVE",
"-1050 -219 QCURVE",
"-1050 -360 LINE SMOOTH",
"-1050 -500 OFFCURVE",
"-814 -500 QCURVE SMOOTH",
"-698 -500 OFFCURVE",
"-650 -455 QCURVE SMOOTH",
"-600 -410 OFFCURVE",
"-600 -363 QCURVE",
"-502 -389 LINE",
"-356 -389 OFFCURVE",
"-250 -332 OFFCURVE",
"-250 -275 QCURVE SMOOTH",
"-250 -50 LINE",
"-416 -50 LINE",
"-416 -84 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-698 -351 OFFCURVE",
"-722 -372 QCURVE SMOOTH",
"-747 -395 OFFCURVE",
"-811 -395 QCURVE SMOOTH",
"-888 -395 OFFCURVE",
"-888 -356 QCURVE SMOOTH",
"-888 -316 LINE",
"-698 -265 LINE",
"-698 -321 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"-416 -185 LINE",
"-416 -282 LINE",
"-632 -246 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01227 26 25 17 16 13 6 7 1 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 1 3 0 1 105 0 3 3 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 0 95 0 0 0 18 77 0 3 3 2 97 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01240 36 19 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-796 -168 OFFCURVE",
"-1100 -219 QCURVE",
"-1100 -360 LINE SMOOTH",
"-1100 -500 OFFCURVE",
"-814 -500 QCURVE SMOOTH",
"-698 -500 OFFCURVE",
"-600 -410 OFFCURVE",
"-600 -363 QCURVE",
"-502 -389 LINE",
"-200 -389 OFFCURVE",
"-200 -275 QCURVE SMOOTH",
"-200 -50 LINE",
"-466 -50 LINE",
"-466 -84 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-466 -282 LINE",
"-632 -246 LINE",
"-466 -185 LINE"
);
},
{
closed = 1;
nodes = (
"-698 -321 LINE SMOOTH",
"-698 -351 OFFCURVE",
"-747 -395 OFFCURVE",
"-811 -395 QCURVE SMOOTH",
"-838 -395 OFFCURVE",
"-838 -356 QCURVE SMOOTH",
"-838 -316 LINE",
"-698 -265 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-796 -168 OFFCURVE",
"-1200 -219 QCURVE",
"-1200 -360 LINE SMOOTH",
"-1200 -500 OFFCURVE",
"-814 -500 QCURVE SMOOTH",
"-698 -500 OFFCURVE",
"-600 -410 OFFCURVE",
"-600 -363 QCURVE",
"-502 -389 LINE",
"-100 -389 OFFCURVE",
"-100 -275 QCURVE SMOOTH",
"-100 -50 LINE",
"-466 -50 LINE",
"-466 -84 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-466 -282 LINE",
"-632 -246 LINE",
"-466 -185 LINE"
);
},
{
closed = 1;
nodes = (
"-698 -321 LINE SMOOTH",
"-698 -351 OFFCURVE",
"-747 -395 OFFCURVE",
"-811 -395 QCURVE SMOOTH",
"-838 -395 OFFCURVE",
"-838 -356 QCURVE SMOOTH",
"-838 -316 LINE",
"-698 -265 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1792;
},
{
glyphname = uni17D2_1793;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-755 -451 OFFCURVE",
"-747 -450 QCURVE",
"-720 -450 LINE",
"-338 -380 LINE",
"-338 -470 OFFCURVE",
"-264 -470 QCURVE SMOOTH",
"-190 -470 OFFCURVE",
"-190 -395 QCURVE SMOOTH",
"-190 -320 OFFCURVE",
"-280 -320 QCURVE",
"-280 -200 LINE",
"-130 -200 LINE",
"-130 -150 LINE",
"-280 -150 LINE",
"-280 -60 LINE",
"-338 -60 LINE",
"-338 -150 LINE",
"-770 -150 LINE SMOOTH",
"-1050 -150 OFFCURVE",
"-1050 -295 QCURVE SMOOTH",
"-1050 -452 OFFCURVE",
"-820 -452 QCURVE SMOOTH",
"-768 -452 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-770 -200 QCURVE SMOOTH",
"-338 -200 LINE",
"-338 -320 LINE",
"-720 -390 LINE",
"-747 -393 OFFCURVE",
"-820 -393 QCURVE SMOOTH",
"-992 -393 OFFCURVE",
"-992 -295 QCURVE SMOOTH",
"-992 -200 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-755 -451 OFFCURVE",
"-747 -450 QCURVE",
"-720 -450 LINE",
"-367 -400 LINE",
"-367 -500 OFFCURVE",
"-273 -500 QCURVE SMOOTH",
"-180 -500 OFFCURVE",
"-180 -410 QCURVE SMOOTH",
"-180 -320 OFFCURVE",
"-270 -320 QCURVE",
"-270 -220 LINE",
"-130 -220 LINE",
"-130 -150 LINE",
"-270 -150 LINE",
"-270 -60 LINE",
"-367 -60 LINE",
"-367 -150 LINE",
"-770 -150 LINE SMOOTH",
"-1070 -150 OFFCURVE",
"-1070 -295 QCURVE SMOOTH",
"-1070 -452 OFFCURVE",
"-820 -452 QCURVE SMOOTH",
"-768 -452 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-770 -220 QCURVE SMOOTH",
"-367 -220 LINE",
"-367 -320 LINE",
"-720 -370 LINE SMOOTH",
"-747 -373 OFFCURVE",
"-820 -373 QCURVE SMOOTH",
"-973 -373 OFFCURVE",
"-973 -295 QCURVE SMOOTH",
"-973 -220 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-785 -441 OFFCURVE",
"-777 -440 QCURVE",
"-750 -440 LINE",
"-450 -410 LINE",
"-450 -435 OFFCURVE",
"-418 -467 QCURVE SMOOTH",
"-387 -500 OFFCURVE",
"-325 -500 QCURVE SMOOTH",
"-263 -500 OFFCURVE",
"-231 -474 QCURVE SMOOTH",
"-200 -448 OFFCURVE",
"-200 -410 QCURVE SMOOTH",
"-200 -372 OFFCURVE",
"-225 -341 QCURVE SMOOTH",
"-250 -310 OFFCURVE",
"-300 -310 QCURVE",
"-300 -230 LINE",
"-150 -230 LINE",
"-150 -130 LINE",
"-300 -130 LINE",
"-300 -50 LINE",
"-450 -50 LINE",
"-450 -130 LINE",
"-800 -130 LINE SMOOTH",
"-1100 -130 OFFCURVE",
"-1100 -285 QCURVE SMOOTH",
"-1100 -442 OFFCURVE",
"-850 -442 QCURVE SMOOTH",
"-798 -442 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-800 -230 QCURVE SMOOTH",
"-450 -230 LINE",
"-450 -310 LINE",
"-750 -340 LINE SMOOTH",
"-777 -343 OFFCURVE",
"-850 -343 QCURVE SMOOTH",
"-950 -343 OFFCURVE",
"-950 -285 QCURVE SMOOTH",
"-950 -230 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01224 1 0 8 1 76 34 1 5 1 75 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 37 values pushed */\0120 2 1 5 2 112 3 1 1 9 1 4 5 1 4 103 0 8 7 10 2 0 6 8 0 105 0 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 1 2 133 3 1 1 9 1 4 5 1 4 103 0 8 7 10 2 0 6 8 0 105 0 5 5 6 98 0 6 6 20 6 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0123 1 1 9 1 4 5 1 4 103 0 8 7 10 2 0 6 8 0 105 0 2 2 18 77 0 5 5 6 98 0 6 6 20 6 78 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 27 values pushed */\0121 0 37 35 32 30 26 25 21 19 13 12 11 10 9 8 7 6 5 3 0 28 1 28 11 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-500 -410 QCURVE",
"-500 -500 OFFCURVE",
"-325 -500 QCURVE SMOOTH",
"-150 -500 OFFCURVE",
"-150 -410 QCURVE SMOOTH",
"-150 -310 OFFCURVE",
"-250 -310 QCURVE",
"-250 -260 LINE",
"-100 -260 LINE",
"-100 -130 LINE",
"-250 -130 LINE",
"-250 -50 LINE",
"-500 -50 LINE",
"-500 -130 LINE",
"-800 -130 LINE SMOOTH",
"-1150 -130 OFFCURVE",
"-1150 -285 QCURVE SMOOTH",
"-1150 -442 OFFCURVE",
"-850 -442 QCURVE SMOOTH",
"-778 -442 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-800 -260 QCURVE SMOOTH",
"-500 -260 LINE",
"-500 -310 LINE",
"-777 -343 OFFCURVE",
"-800 -343 QCURVE SMOOTH",
"-900 -343 OFFCURVE",
"-900 -285 QCURVE SMOOTH",
"-900 -260 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-480 -410 QCURVE",
"-480 -500 OFFCURVE",
"-225 -500 QCURVE SMOOTH",
"-50 -500 OFFCURVE",
"-50 -410 QCURVE SMOOTH",
"-50 -310 OFFCURVE",
"-150 -310 QCURVE",
"-150 -260 LINE",
"0 -260 LINE",
"0 -130 LINE",
"-150 -130 LINE",
"-150 -50 LINE",
"-480 -50 LINE",
"-480 -130 LINE",
"-800 -130 LINE SMOOTH",
"-1200 -130 OFFCURVE",
"-1200 -285 QCURVE SMOOTH",
"-1200 -442 OFFCURVE",
"-850 -442 QCURVE SMOOTH",
"-778 -442 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-800 -260 QCURVE SMOOTH",
"-480 -260 LINE",
"-480 -310 LINE",
"-777 -343 OFFCURVE",
"-800 -343 QCURVE SMOOTH",
"-850 -343 OFFCURVE",
"-850 -285 QCURVE SMOOTH",
"-850 -260 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_1793;
},
{
glyphname = uni17D21794;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-283 -470 LINE",
"-1 -275 LINE",
"280 -470 LINE",
"338 -470 LINE",
"338 833 LINE",
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 -413 LINE",
"-1 -220 LINE",
"-284 -414 LINE",
"-284 -106 LINE",
"-104 -106 LINE",
"-104 -60 LINE",
"-342 -60 LINE",
"-342 -470 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -403 LINE",
"-1 -220 LINE",
"-254 -404 LINE",
"-254 -144 LINE",
"-104 -144 LINE",
"-104 -60 LINE",
"-362 -60 LINE",
"-362 -500 LINE",
"-233 -500 LINE",
"-1 -325 LINE",
"230 -500 LINE",
"358 -500 LINE",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1 -365 LINE",
"170 -490 LINE",
"388 -490 LINE",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 -343 LINE",
"-1 -190 LINE",
"-204 -344 LINE",
"-204 -144 LINE",
"-104 -144 LINE",
"-104 -50 LINE",
"-392 -50 LINE",
"-392 -490 LINE",
"-173 -490 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\01220 8 2 0 3 23 7 6 5 4 4 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 0 0 1 4 0 1 103 0 3 3 2 95 0 2 2 17 77 6 5 2 4 4 20 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 3 2 95 0 2 2 17 77 0 1 1 0 95 0 0 0 18 77 6 5 2 4 4 20 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 24 0 24 18 17 28 17 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -275 LINE",
"-1 -160 LINE",
"-154 -276 LINE",
"-154 -144 LINE",
"-104 -144 LINE",
"-104 -50 LINE",
"-442 -50 LINE",
"-442 -490 LINE",
"-173 -490 LINE",
"-1 -365 LINE",
"170 -490 LINE",
"438 -490 LINE",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -275 LINE",
"-1 -180 LINE",
"-104 -276 LINE",
"-104 -144 LINE",
"-54 -144 LINE",
"-54 -50 LINE",
"-492 -50 LINE",
"-492 -490 LINE",
"-123 -490 LINE",
"-1 -385 LINE",
"120 -490 LINE",
"488 -490 LINE",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D21794;
},
{
glyphname = uni17D2_1795;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-308 -112 LINE",
"-308 -405 LINE",
"-650 -223 LINE",
"-992 -405 LINE",
"-992 -60 LINE",
"-1050 -60 LINE",
"-1050 -470 LINE",
"-992 -470 LINE",
"-650 -288 LINE",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -60 LINE",
"-561 -60 LINE",
"-561 -112 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-347 -150 LINE",
"-347 -395 LINE",
"-650 -223 LINE",
"-953 -395 LINE",
"-953 -60 LINE",
"-1050 -60 LINE",
"-1050 -500 LINE",
"-953 -500 LINE",
"-650 -328 LINE",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -60 LINE",
"-561 -60 LINE",
"-561 -150 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-428 -170 LINE",
"-428 -355 LINE",
"-650 -223 LINE",
"-872 -355 LINE",
"-872 -50 LINE",
"-1050 -50 LINE",
"-1050 -500 LINE",
"-872 -500 LINE",
"-650 -368 LINE",
"-428 -500 LINE",
"-250 -500 LINE",
"-250 -50 LINE",
"-561 -50 LINE",
"-561 -170 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01211 10 9 4 4 1 4 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 4 1 0 4 87 3 1 0 0 1 95 2 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0120 4 4 0 95 3 1 0 0 18 77 2 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01220 17 18 17 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-872 -500 LINE",
"-650 -368 LINE",
"-428 -500 LINE",
"-200 -500 LINE",
"-200 -50 LINE",
"-561 -50 LINE",
"-561 -170 LINE",
"-478 -170 LINE",
"-478 -305 LINE",
"-650 -203 LINE",
"-822 -305 LINE",
"-822 -50 LINE",
"-1100 -50 LINE",
"-1100 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-872 -500 LINE",
"-650 -368 LINE",
"-428 -500 LINE",
"-100 -500 LINE",
"-100 -50 LINE",
"-561 -50 LINE",
"-561 -170 LINE",
"-478 -170 LINE",
"-478 -305 LINE",
"-650 -203 LINE",
"-822 -305 LINE",
"-822 -50 LINE",
"-1200 -50 LINE",
"-1200 -500 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1795;
},
{
glyphname = uni17D2_1796;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-992 -60 LINE",
"-1050 -60 LINE",
"-1050 -470 LINE",
"-803 -470 LINE",
"-803 -420 LINE",
"-992 -420 LINE",
"-992 -119 LINE",
"-650 -266 LINE",
"-308 -119 LINE",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -60 LINE",
"-308 -60 LINE",
"-650 -208 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-953 -60 LINE",
"-1050 -60 LINE",
"-1050 -500 LINE",
"-803 -500 LINE",
"-803 -412 LINE",
"-953 -412 LINE",
"-953 -149 LINE",
"-650 -296 LINE",
"-347 -149 LINE",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -60 LINE",
"-347 -60 LINE",
"-650 -208 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-872 -50 LINE",
"-1050 -50 LINE",
"-1050 -500 LINE",
"-783 -500 LINE",
"-783 -387 LINE",
"-872 -387 LINE",
"-872 -189 LINE",
"-650 -306 LINE",
"-428 -189 LINE",
"-428 -500 LINE",
"-250 -500 LINE",
"-250 -50 LINE",
"-428 -50 LINE",
"-650 -168 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\01213 6 5 4 4 2 0 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0124 1 0 0 1 95 3 1 1 1 20 77 0 2 2 1 96 3 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0124 1 0 0 18 77 0 2 2 1 96 3 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 20 17 16 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-478 -50 LINE",
"-650 -148 LINE",
"-822 -50 LINE",
"-1100 -50 LINE",
"-1100 -500 LINE",
"-733 -500 LINE",
"-733 -387 LINE",
"-822 -387 LINE",
"-822 -219 LINE",
"-650 -316 LINE",
"-478 -219 LINE",
"-478 -500 LINE",
"-200 -500 LINE",
"-200 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-478 -50 LINE",
"-650 -148 LINE",
"-822 -50 LINE",
"-1200 -50 LINE",
"-1200 -500 LINE",
"-733 -500 LINE",
"-733 -367 LINE",
"-822 -367 LINE",
"-822 -219 LINE",
"-650 -316 LINE",
"-478 -219 LINE",
"-478 -500 LINE",
"-100 -500 LINE",
"-100 -50 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1796;
},
{
glyphname = uni17D2_1797;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1157 -420 LINE",
"-1157 -470 LINE",
"-992 -470 LINE",
"-992 -283 LINE SMOOTH",
"-992 -110 OFFCURVE",
"-650 -110 QCURVE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -283 QCURVE SMOOTH",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -283 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -420 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1157 -412 LINE",
"-1157 -500 LINE",
"-953 -500 LINE",
"-953 -283 LINE SMOOTH",
"-953 -148 OFFCURVE",
"-650 -148 QCURVE SMOOTH",
"-347 -148 OFFCURVE",
"-347 -283 QCURVE SMOOTH",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -60 OFFCURVE",
"-650 -60 QCURVE SMOOTH",
"-1050 -60 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -412 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 -183 QCURVE SMOOTH",
"-779 -150 OFFCURVE",
"-650 -150 QCURVE SMOOTH",
"-521 -150 OFFCURVE",
"-469 -183 QCURVE SMOOTH",
"-417 -217 OFFCURVE",
"-417 -283 QCURVE SMOOTH",
"-417 -500 LINE",
"-250 -500 LINE",
"-250 -283 LINE SMOOTH",
"-250 -184 OFFCURVE",
"-339 -116 QCURVE SMOOTH",
"-428 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-872 -50 OFFCURVE",
"-961 -116 QCURVE SMOOTH",
"-1050 -184 OFFCURVE",
"-1050 -283 QCURVE SMOOTH",
"-1050 -400 LINE",
"-1157 -400 LINE",
"-1157 -500 LINE",
"-883 -500 LINE",
"-883 -283 LINE SMOOTH",
"-883 -217 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 4 1 2 4 105 0 1 1 0 95 3 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 22 values pushed */\0120 4 4 2 97 0 2 2 18 77 0 1 1 0 95 3 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01236 20 36 17 17 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-200 -500 LINE",
"-200 -283 LINE SMOOTH",
"-200 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1100 -50 OFFCURVE",
"-1100 -283 QCURVE SMOOTH",
"-1100 -350 LINE",
"-1207 -350 LINE",
"-1207 -500 LINE",
"-833 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-833 -283 LINE SMOOTH",
"-833 -180 OFFCURVE",
"-650 -180 QCURVE SMOOTH",
"-467 -180 OFFCURVE",
"-467 -283 QCURVE SMOOTH",
"-467 -500 LINE",
"-100 -500 LINE",
"-100 -283 LINE SMOOTH",
"-100 -50 OFFCURVE",
"-650 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -283 QCURVE SMOOTH",
"-1200 -350 LINE",
"-1307 -350 LINE",
"-1307 -500 LINE",
"-833 -500 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1797;
},
{
glyphname = uni17D2_1798;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-358 -307 LINE",
"-358 -470 OFFCURVE",
"-235 -470 QCURVE SMOOTH",
"-120 -470 OFFCURVE",
"-120 -363 QCURVE SMOOTH",
"-120 -257 OFFCURVE",
"-255 -257 QCURVE SMOOTH",
"-293 -257 LINE",
"-293 -60 LINE",
"-358 -60 LINE",
"-358 -257 LINE",
"-1080 -257 LINE",
"-1080 -307 LINE"
);
},
{
closed = 1;
nodes = (
"-255 -307 LINE SMOOTH",
"-178 -307 OFFCURVE",
"-178 -363 QCURVE SMOOTH",
"-178 -420 OFFCURVE",
"-235 -420 QCURVE SMOOTH",
"-293 -420 OFFCURVE",
"-293 -307 QCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-377 -345 LINE",
"-377 -500 OFFCURVE",
"-240 -500 QCURVE SMOOTH",
"-120 -500 OFFCURVE",
"-120 -378 QCURVE SMOOTH",
"-120 -257 OFFCURVE",
"-273 -257 QCURVE",
"-273 -60 LINE",
"-377 -60 LINE",
"-377 -257 LINE",
"-1080 -257 LINE",
"-1080 -345 LINE"
);
},
{
closed = 1;
nodes = (
"-208 -345 OFFCURVE",
"-208 -378 QCURVE SMOOTH",
"-208 -412 OFFCURVE",
"-240 -412 QCURVE SMOOTH",
"-273 -412 OFFCURVE",
"-273 -345 QCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-401 -387 LINE",
"-395 -500 OFFCURVE",
"-257 -500 QCURVE SMOOTH",
"-120 -500 OFFCURVE",
"-120 -387 QCURVE SMOOTH",
"-120 -333 OFFCURVE",
"-164 -261 OFFCURVE",
"-243 -237 QCURVE",
"-243 -50 LINE",
"-406 -50 LINE",
"-406 -237 LINE",
"-1100 -237 LINE",
"-1100 -387 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 5 values pushed */\0124 1 0 1 75 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 3 2 0 3 103 0 1 1 2 97 0 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 3 2 0 3 103 0 1 1 18 77 0 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 37 17 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1150 -387 LINE",
"-451 -387 LINE",
"-445 -500 OFFCURVE",
"-257 -500 QCURVE SMOOTH",
"-70 -500 OFFCURVE",
"-70 -347 QCURVE SMOOTH",
"-70 -187 OFFCURVE",
"-193 -187 QCURVE",
"-193 -50 LINE",
"-456 -50 LINE",
"-456 -187 LINE",
"-1150 -187 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1200 -387 LINE",
"-471 -387 LINE",
"-465 -500 OFFCURVE",
"-227 -500 QCURVE SMOOTH",
"10 -500 OFFCURVE",
"10 -347 QCURVE SMOOTH",
"10 -187 OFFCURVE",
"-113 -187 QCURVE",
"-113 -50 LINE",
"-476 -50 LINE",
"-476 -187 LINE",
"-1200 -187 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_1798;
},
{
glyphname = uni17D21799;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 -220 LINE SMOOTH",
"280 -420 OFFCURVE",
"15 -420 QCURVE SMOOTH",
"-250 -420 OFFCURVE",
"-250 -220 QCURVE SMOOTH",
"-250 -60 LINE",
"-308 -60 LINE",
"-308 -220 LINE SMOOTH",
"-308 -470 OFFCURVE",
"15 -470 QCURVE SMOOTH",
"338 -470 OFFCURVE",
"338 -220 QCURVE SMOOTH",
"338 833 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -220 LINE SMOOTH",
"250 -412 OFFCURVE",
"10 -412 QCURVE SMOOTH",
"-230 -412 OFFCURVE",
"-230 -220 QCURVE SMOOTH",
"-230 -60 LINE",
"-338 -60 LINE",
"-338 -220 LINE SMOOTH",
"-338 -500 OFFCURVE",
"10 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -220 QCURVE SMOOTH",
"358 840 LINE"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"79 -350 OFFCURVE",
"-4 -350 QCURVE SMOOTH",
"-87 -350 OFFCURVE",
"-200 -295 OFFCURVE",
"-200 -220 QCURVE SMOOTH",
"-200 -100 LINE",
"-388 -100 LINE",
"-388 -220 LINE SMOOTH",
"-388 -375 OFFCURVE",
"-273 -438 QCURVE SMOOTH",
"-154 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"146 -500 OFFCURVE",
"265 -438 QCURVE SMOOTH",
"388 -375 OFFCURVE",
"388 -220 QCURVE SMOOTH",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 -220 LINE SMOOTH",
"200 -295 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01213 1 2 3 1 1 76 0 3 1 4 1 3 4 128 0 1 1 0 95 0 0 0 17 77 0 4 4 2 97 0 2 2 20 2 78 35 20 37 17 25 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -220 LINE SMOOTH",
"150 -320 OFFCURVE",
"-4 -320 QCURVE SMOOTH",
"-150 -320 OFFCURVE",
"-150 -220 QCURVE SMOOTH",
"-150 -100 LINE",
"-438 -100 LINE",
"-438 -220 LINE SMOOTH",
"-438 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -220 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -220 LINE SMOOTH",
"100 -300 OFFCURVE",
"-4 -300 QCURVE SMOOTH",
"-100 -300 OFFCURVE",
"-100 -220 QCURVE SMOOTH",
"-100 -50 LINE",
"-488 -50 LINE",
"-488 -220 LINE SMOOTH",
"-488 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -220 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D21799;
},
{
glyphname = uni17D2179A;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 -220 LINE SMOOTH",
"250 -470 OFFCURVE",
"578 -470 QCURVE SMOOTH",
"906 -470 OFFCURVE",
"906 -220 QCURVE SMOOTH",
"906 -60 LINE",
"848 -60 LINE",
"848 -220 LINE SMOOTH",
"848 -420 OFFCURVE",
"578 -420 QCURVE SMOOTH",
"308 -420 OFFCURVE",
"308 -220 QCURVE SMOOTH",
"308 830 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 -500 OFFCURVE",
"598 -500 QCURVE SMOOTH",
"946 -500 OFFCURVE",
"946 -220 QCURVE SMOOTH",
"946 -60 LINE",
"838 -60 LINE",
"838 -220 LINE SMOOTH",
"838 -412 OFFCURVE",
"598 -412 QCURVE SMOOTH",
"358 -412 OFFCURVE",
"358 -220 QCURVE SMOOTH",
"358 840 LINE",
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -220 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 -220 LINE SMOOTH",
"200 -375 OFFCURVE",
"319 -438 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"588 -500 QCURVE SMOOTH",
"738 -500 OFFCURVE",
"857 -438 QCURVE SMOOTH",
"976 -375 OFFCURVE",
"976 -220 QCURVE SMOOTH",
"976 -100 LINE",
"788 -100 LINE",
"788 -220 LINE SMOOTH",
"788 -295 OFFCURVE",
"671 -350 OFFCURVE",
"588 -350 QCURVE SMOOTH",
"505 -350 OFFCURVE",
"388 -295 OFFCURVE",
"388 -220 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01219 0 2 1 4 1 76 0 1 4 0 4 1 0 128 0 4 4 3 95 0 3 3 17 77 0 0 0 2 97 0 2 2 20 2 78 17 28 36 19 35 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"150 -500 OFFCURVE",
"592 -500 QCURVE SMOOTH",
"1026 -500 OFFCURVE",
"1026 -220 QCURVE SMOOTH",
"1026 -100 LINE",
"738 -100 LINE",
"738 -220 LINE SMOOTH",
"738 -320 OFFCURVE",
"592 -320 QCURVE SMOOTH",
"438 -320 OFFCURVE",
"438 -220 QCURVE SMOOTH",
"438 840 LINE",
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -220 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -220 LINE SMOOTH",
"100 -500 OFFCURVE",
"592 -500 QCURVE SMOOTH",
"1076 -500 OFFCURVE",
"1076 -220 QCURVE SMOOTH",
"1076 -50 LINE",
"688 -50 LINE",
"688 -220 LINE SMOOTH",
"688 -300 OFFCURVE",
"592 -300 QCURVE SMOOTH",
"488 -300 OFFCURVE",
"488 -220 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D2179A;
},
{
glyphname = uni17D2_179B;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-405 -420 OFFCURVE",
"-479 -420 QCURVE SMOOTH",
"-583 -420 OFFCURVE",
"-670 -60 OFFCURVE",
"-825 -60 QCURVE SMOOTH",
"-930 -60 OFFCURVE",
"-1050 -216 OFFCURVE",
"-1050 -470 QCURVE",
"-992 -470 LINE",
"-992 -248 OFFCURVE",
"-905 -106 OFFCURVE",
"-825 -106 QCURVE SMOOTH",
"-715 -106 OFFCURVE",
"-628 -470 OFFCURVE",
"-485 -470 QCURVE SMOOTH",
"-392 -470 OFFCURVE",
"-250 -324 OFFCURVE",
"-250 -60 QCURVE",
"-308 -60 LINE",
"-308 -282 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-415 -412 OFFCURVE",
"-479 -412 QCURVE SMOOTH",
"-553 -412 OFFCURVE",
"-670 -60 OFFCURVE",
"-825 -60 QCURVE SMOOTH",
"-950 -60 OFFCURVE",
"-1070 -216 OFFCURVE",
"-1070 -500 QCURVE",
"-972 -500 LINE",
"-972 -258 OFFCURVE",
"-895 -144 OFFCURVE",
"-825 -144 QCURVE SMOOTH",
"-735 -144 OFFCURVE",
"-628 -500 OFFCURVE",
"-485 -500 QCURVE SMOOTH",
"-372 -500 OFFCURVE",
"-230 -354 OFFCURVE",
"-230 -60 QCURVE",
"-328 -60 LINE",
"-328 -292 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-415 -376 OFFCURVE",
"-479 -376 QCURVE SMOOTH",
"-543 -376 OFFCURVE",
"-650 -50 OFFCURVE",
"-825 -50 QCURVE SMOOTH",
"-950 -50 OFFCURVE",
"-1100 -216 OFFCURVE",
"-1100 -500 QCURVE",
"-912 -500 LINE",
"-912 -258 OFFCURVE",
"-895 -174 OFFCURVE",
"-825 -174 QCURVE SMOOTH",
"-755 -174 OFFCURVE",
"-648 -500 OFFCURVE",
"-485 -500 QCURVE SMOOTH",
"-322 -500 OFFCURVE",
"-200 -354 OFFCURVE",
"-200 -50 QCURVE",
"-388 -50 LINE",
"-388 -292 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0124 1 0 0 2 5 0 2 105 0 5 5 1 98 3 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 2 2 0 97 4 1 0 0 18 77 0 5 5 1 98 3 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01233 34 18 33 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-438 -326 OFFCURVE",
"-490 -326 QCURVE SMOOTH",
"-523 -326 OFFCURVE",
"-680 -50 OFFCURVE",
"-810 -50 QCURVE SMOOTH",
"-1150 -50 OFFCURVE",
"-1150 -500 QCURVE",
"-862 -500 LINE",
"-862 -224 OFFCURVE",
"-808 -224 QCURVE SMOOTH",
"-775 -224 OFFCURVE",
"-618 -500 OFFCURVE",
"-489 -500 QCURVE SMOOTH",
"-150 -500 OFFCURVE",
"-150 -50 QCURVE",
"-438 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-438 -276 OFFCURVE",
"-490 -276 QCURVE SMOOTH",
"-523 -276 OFFCURVE",
"-650 -50 OFFCURVE",
"-860 -50 QCURVE SMOOTH",
"-1200 -50 OFFCURVE",
"-1200 -500 QCURVE",
"-862 -500 LINE",
"-862 -274 OFFCURVE",
"-808 -274 QCURVE SMOOTH",
"-775 -274 OFFCURVE",
"-648 -500 OFFCURVE",
"-439 -500 QCURVE SMOOTH",
"-100 -500 OFFCURVE",
"-100 -50 QCURVE",
"-438 -50 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_179B;
},
{
glyphname = uni17D2_179C;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-250 -291 OFFCURVE",
"-250 -126 QCURVE SMOOTH",
"-250 -60 LINE",
"-308 -60 LINE",
"-500 -146 OFFCURVE",
"-851 -235 OFFCURVE",
"-1050 -257 QCURVE",
"-1050 -293 LINE SMOOTH",
"-1050 -342 OFFCURVE",
"-921 -470 OFFCURVE",
"-734 -470 QCURVE SMOOTH",
"-548 -470 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-500 -204 OFFCURVE",
"-308 -122 QCURVE",
"-308 -258 OFFCURVE",
"-567 -420 OFFCURVE",
"-736 -420 QCURVE SMOOTH",
"-884 -420 OFFCURVE",
"-992 -335 OFFCURVE",
"-992 -298 QCURVE",
"-800 -281 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-250 -311 OFFCURVE",
"-250 -126 QCURVE SMOOTH",
"-250 -60 LINE",
"-347 -60 LINE",
"-600 -148 OFFCURVE",
"-900 -223 OFFCURVE",
"-1050 -237 QCURVE",
"-1050 -303 LINE SMOOTH",
"-1050 -392 OFFCURVE",
"-921 -500 OFFCURVE",
"-704 -500 QCURVE SMOOTH",
"-518 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-500 -204 OFFCURVE",
"-347 -142 QCURVE",
"-347 -268 OFFCURVE",
"-587 -412 OFFCURVE",
"-706 -412 QCURVE SMOOTH",
"-854 -412 OFFCURVE",
"-953 -355 OFFCURVE",
"-953 -308 QCURVE",
"-760 -277 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-250 -311 OFFCURVE",
"-250 -126 QCURVE SMOOTH",
"-250 -50 LINE",
"-428 -50 LINE",
"-622 -124 OFFCURVE",
"-949 -218 OFFCURVE",
"-1050 -237 QCURVE",
"-1050 -313 LINE SMOOTH",
"-1050 -402 OFFCURVE",
"-921 -500 OFFCURVE",
"-704 -500 QCURVE SMOOTH",
"-518 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-563 -228 OFFCURVE",
"-428 -182 QCURVE",
"-428 -258 OFFCURVE",
"-587 -372 OFFCURVE",
"-686 -372 QCURVE SMOOTH",
"-734 -372 OFFCURVE",
"-872 -355 OFFCURVE",
"-872 -318 QCURVE",
"-710 -277 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\01218 12 4 3 2 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 2 1 133 0 2 2 0 97 3 1 0 0 20 0 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 18 77 0 2 2 0 97 3 1 0 0 20 0 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0121 0 16 14 8 7 0 11 1 11 4 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-200 -311 OFFCURVE",
"-200 -126 QCURVE SMOOTH",
"-200 -50 LINE",
"-478 -50 LINE",
"-622 -124 OFFCURVE",
"-949 -218 OFFCURVE",
"-1100 -237 QCURVE",
"-1100 -313 LINE SMOOTH",
"-1100 -402 OFFCURVE",
"-921 -500 OFFCURVE",
"-704 -500 QCURVE SMOOTH",
"-518 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-478 -182 QCURVE",
"-478 -258 OFFCURVE",
"-587 -355 OFFCURVE",
"-686 -355 QCURVE SMOOTH",
"-822 -355 OFFCURVE",
"-822 -318 QCURVE",
"-600 -253 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-100 -311 OFFCURVE",
"-100 -126 QCURVE SMOOTH",
"-100 -50 LINE",
"-478 -50 LINE",
"-622 -124 OFFCURVE",
"-1049 -218 OFFCURVE",
"-1200 -237 QCURVE",
"-1200 -313 LINE SMOOTH",
"-1200 -402 OFFCURVE",
"-1021 -500 OFFCURVE",
"-704 -500 QCURVE SMOOTH",
"-468 -500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-478 -182 QCURVE",
"-478 -258 OFFCURVE",
"-587 -355 OFFCURVE",
"-686 -355 QCURVE SMOOTH",
"-822 -355 OFFCURVE",
"-822 -318 QCURVE",
"-600 -253 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D2_179C;
},
{
glyphname = uni17D2179F;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-308 -470 OFFCURVE",
"15 -470 QCURVE SMOOTH",
"338 -470 OFFCURVE",
"338 -220 QCURVE SMOOTH",
"338 0 LINE",
"498 0 LINE",
"498 50 LINE",
"338 50 LINE",
"338 833 LINE",
"91 1045 LINE",
"143 1150 LINE",
"338 1150 LINE",
"338 1200 LINE",
"120 1200 LINE",
"42 1063 OFFCURVE",
"42 1042 QCURVE SMOOTH",
"42 1014 OFFCURVE",
"102 965 QCURVE SMOOTH",
"280 816 LINE",
"280 50 LINE",
"30 50 LINE",
"30 0 LINE",
"280 0 LINE",
"280 -220 LINE SMOOTH",
"280 -420 OFFCURVE",
"15 -420 QCURVE SMOOTH",
"-250 -420 OFFCURVE",
"-250 -220 QCURVE SMOOTH",
"-250 -60 LINE",
"-470 -60 LINE",
"-470 -110 LINE",
"-308 -110 LINE",
"-308 -220 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 -412 OFFCURVE",
"10 -412 QCURVE SMOOTH",
"-230 -412 OFFCURVE",
"-230 -220 QCURVE SMOOTH",
"-230 -60 LINE",
"-470 -60 LINE",
"-470 -148 LINE",
"-338 -148 LINE",
"-338 -220 LINE SMOOTH",
"-338 -500 OFFCURVE",
"10 -500 QCURVE SMOOTH",
"358 -500 OFFCURVE",
"358 -220 QCURVE SMOOTH",
"358 0 LINE",
"498 0 LINE",
"498 88 LINE",
"358 88 LINE",
"358 840 LINE",
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 88 LINE",
"30 88 LINE",
"30 0 LINE",
"250 0 LINE",
"250 -220 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"200 0 LINE",
"200 -220 LINE SMOOTH",
"200 -295 OFFCURVE",
"79 -350 OFFCURVE",
"-4 -350 QCURVE SMOOTH",
"-87 -350 OFFCURVE",
"-200 -295 OFFCURVE",
"-200 -220 QCURVE SMOOTH",
"-200 -50 LINE",
"-500 -50 LINE",
"-500 -150 LINE",
"-388 -150 LINE",
"-388 -220 LINE SMOOTH",
"-388 -375 OFFCURVE",
"-273 -438 QCURVE SMOOTH",
"-154 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"146 -500 OFFCURVE",
"265 -438 QCURVE SMOOTH",
"388 -375 OFFCURVE",
"388 -220 QCURVE SMOOTH",
"388 0 LINE",
"498 0 LINE",
"498 138 LINE",
"388 138 LINE",
"388 840 LINE",
"140 1062 LINE",
"388 1062 LINE",
"388 1200 LINE",
"140 1200 LINE",
"65 1102 LINE",
"28 1053 LINE SMOOTH",
"12 1033 OFFCURVE",
"12 1012 QCURVE SMOOTH",
"12 984 OFFCURVE",
"43 955 QCURVE SMOOTH",
"95 905 LINE",
"200 806 LINE",
"200 138 LINE",
"0 138 LINE",
"0 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01214 2 2 0 2 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 41 values pushed */\0120 7 0 6 8 7 6 103 0 2 2 1 95 0 1 1 17 77 3 1 0 0 4 95 9 1 4 4 19 77 0 8 8 5 97 0 5 5 20 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 43 values pushed */\0120 2 2 1 95 0 1 1 17 77 3 1 0 0 4 95 9 1 4 4 19 77 0 6 6 7 95 0 7 7 18 77 0 8 8 5 97 0 5 5 20 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\01240 39 35 17 20 36 17 18 17 25 16 10 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-438 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"438 -500 OFFCURVE",
"438 -220 QCURVE SMOOTH",
"438 0 LINE",
"548 0 LINE",
"548 188 LINE",
"438 188 LINE",
"438 840 LINE",
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 188 LINE",
"0 188 LINE",
"0 0 LINE",
"150 0 LINE",
"150 -220 LINE SMOOTH",
"150 -320 OFFCURVE",
"-4 -320 QCURVE SMOOTH",
"-150 -320 OFFCURVE",
"-150 -220 QCURVE SMOOTH",
"-150 -50 LINE",
"-550 -50 LINE",
"-550 -200 LINE",
"-438 -200 LINE",
"-438 -220 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 188 LINE",
"0 188 LINE",
"0 0 LINE",
"100 0 LINE",
"100 -220 LINE SMOOTH",
"100 -300 OFFCURVE",
"-4 -300 QCURVE SMOOTH",
"-100 -300 OFFCURVE",
"-100 -220 QCURVE SMOOTH",
"-100 -50 LINE",
"-600 -50 LINE",
"-600 -200 LINE",
"-488 -200 LINE",
"-488 -220 LINE SMOOTH",
"-488 -500 OFFCURVE",
"-4 -500 QCURVE SMOOTH",
"488 -500 OFFCURVE",
"488 -220 QCURVE SMOOTH",
"488 0 LINE",
"568 0 LINE",
"568 188 LINE",
"488 188 LINE",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D2179F;
},
{
glyphname = uni17D2_17A0;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1050 -357 LINE SMOOTH",
"-1050 -402 OFFCURVE",
"-1013 -436 QCURVE SMOOTH",
"-976 -470 OFFCURVE",
"-903 -470 QCURVE SMOOTH",
"-625 -470 LINE",
"-625 -110 LINE",
"-397 -110 LINE SMOOTH",
"-308 -110 OFFCURVE",
"-308 -172 QCURVE SMOOTH",
"-308 -470 LINE",
"-250 -470 LINE",
"-250 -172 LINE SMOOTH",
"-250 -127 OFFCURVE",
"-286 -94 QCURVE SMOOTH",
"-323 -60 OFFCURVE",
"-397 -60 QCURVE SMOOTH",
"-675 -60 LINE",
"-675 -420 LINE",
"-903 -420 LINE SMOOTH",
"-992 -420 OFFCURVE",
"-992 -357 QCURVE SMOOTH",
"-992 -60 LINE",
"-1050 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1050 -387 LINE SMOOTH",
"-1050 -432 OFFCURVE",
"-1013 -466 QCURVE SMOOTH",
"-976 -500 OFFCURVE",
"-903 -500 QCURVE SMOOTH",
"-610 -500 LINE",
"-610 -148 LINE",
"-397 -148 LINE SMOOTH",
"-347 -148 OFFCURVE",
"-347 -172 QCURVE SMOOTH",
"-347 -500 LINE",
"-250 -500 LINE",
"-250 -172 LINE SMOOTH",
"-250 -127 OFFCURVE",
"-286 -94 QCURVE SMOOTH",
"-323 -60 OFFCURVE",
"-397 -60 QCURVE SMOOTH",
"-690 -60 LINE",
"-690 -412 LINE",
"-903 -412 LINE SMOOTH",
"-953 -412 OFFCURVE",
"-953 -387 QCURVE SMOOTH",
"-953 -60 LINE",
"-1050 -60 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1050 -387 LINE SMOOTH",
"-1050 -432 OFFCURVE",
"-1013 -466 QCURVE SMOOTH",
"-976 -500 OFFCURVE",
"-903 -500 QCURVE SMOOTH",
"-570 -500 LINE",
"-570 -185 LINE",
"-428 -185 LINE",
"-428 -500 LINE",
"-250 -500 LINE",
"-250 -162 LINE SMOOTH",
"-250 -117 OFFCURVE",
"-286 -84 QCURVE SMOOTH",
"-323 -50 OFFCURVE",
"-397 -50 QCURVE SMOOTH",
"-730 -50 LINE",
"-730 -365 LINE",
"-872 -365 LINE",
"-872 -50 LINE",
"-1050 -50 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0126 5 2 1 0 3 0 1 3 103 0 0 0 2 96 4 1 2 2 20 2 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 3 3 1 95 6 5 2 1 1 18 77 0 0 0 2 96 4 1 2 2 20 2 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 19 0 19 33 17 20 33 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1100 -50 LINE",
"-1100 -387 LINE SMOOTH",
"-1100 -500 OFFCURVE",
"-903 -500 QCURVE SMOOTH",
"-570 -500 LINE",
"-570 -235 LINE",
"-458 -235 LINE",
"-458 -500 LINE",
"-200 -500 LINE",
"-200 -162 LINE SMOOTH",
"-200 -50 OFFCURVE",
"-397 -50 QCURVE SMOOTH",
"-730 -50 LINE",
"-730 -315 LINE",
"-842 -315 LINE",
"-842 -50 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1200 -50 LINE",
"-1200 -387 LINE SMOOTH",
"-1200 -500 OFFCURVE",
"-1003 -500 QCURVE SMOOTH",
"-570 -500 LINE",
"-570 -265 LINE",
"-458 -265 LINE",
"-458 -500 LINE",
"-100 -500 LINE",
"-100 -162 LINE SMOOTH",
"-100 -50 OFFCURVE",
"-297 -50 QCURVE SMOOTH",
"-730 -50 LINE",
"-730 -285 LINE",
"-842 -285 LINE",
"-842 -50 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_17A0;
},
{
glyphname = uni17D2_17A2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-308 -420 LINE",
"-450 -420 LINE",
"-450 -470 LINE",
"-250 -470 LINE",
"-250 -50 LINE",
"-308 -50 LINE",
"-308 -193 LINE",
"-991 -193 LINE",
"-991 -50 LINE",
"-1050 -50 LINE",
"-1050 -420 LINE",
"-1150 -420 LINE",
"-1150 -470 LINE",
"-991 -470 LINE",
"-991 -243 LINE",
"-308 -243 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-347 -412 LINE",
"-450 -412 LINE",
"-450 -500 LINE",
"-250 -500 LINE",
"-250 -50 LINE",
"-347 -50 LINE",
"-347 -174 LINE",
"-953 -174 LINE",
"-953 -50 LINE",
"-1050 -50 LINE",
"-1050 -412 LINE",
"-1150 -412 LINE",
"-1150 -500 LINE",
"-953 -500 LINE",
"-953 -262 LINE",
"-347 -262 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-530 -500 LINE",
"-250 -500 LINE",
"-250 -50 LINE",
"-430 -50 LINE",
"-430 -162 LINE",
"-870 -162 LINE",
"-870 -50 LINE",
"-1050 -50 LINE",
"-1050 -387 LINE",
"-1150 -387 LINE",
"-1150 -500 LINE",
"-870 -500 LINE",
"-870 -275 LINE",
"-430 -275 LINE",
"-430 -387 LINE",
"-530 -387 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01222 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0125 1 3 4 3 133 0 4 0 0 2 4 0 103 8 7 2 2 2 1 96 6 1 1 1 20 1 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 0 0 2 4 0 103 5 1 3 3 18 77 8 7 2 2 2 1 96 6 1 1 1 20 1 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 15 0 15 17 17 17 17 17 17 17 9 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-480 -387 LINE",
"-580 -387 LINE",
"-580 -500 LINE",
"-200 -500 LINE",
"-200 -50 LINE",
"-480 -50 LINE",
"-480 -162 LINE",
"-820 -162 LINE",
"-820 -50 LINE",
"-1100 -50 LINE",
"-1100 -387 LINE",
"-1200 -387 LINE",
"-1200 -500 LINE",
"-820 -500 LINE",
"-820 -305 LINE",
"-480 -305 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-480 -367 LINE",
"-580 -367 LINE",
"-580 -500 LINE",
"-100 -500 LINE",
"-100 -50 LINE",
"-480 -50 LINE",
"-480 -142 LINE",
"-820 -142 LINE",
"-820 -50 LINE",
"-1200 -50 LINE",
"-1200 -367 LINE",
"-1300 -367 LINE",
"-1300 -500 LINE",
"-820 -500 LINE",
"-820 -305 LINE",
"-480 -305 LINE"
);
}
);
width = 0;
}
);
note = uni17D2_17A2;
},
{
glyphname = uni17BB.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-308 -800 LINE",
"-250 -800 LINE",
"-250 -500 LINE",
"-423 -500 LINE",
"-423 -542 LINE",
"-308 -542 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-347 -800 LINE",
"-250 -800 LINE",
"-250 -500 LINE",
"-453 -500 LINE",
"-453 -580 LINE",
"-347 -580 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-438 -800 LINE",
"-250 -800 LINE",
"-250 -500 LINE",
"-523 -500 LINE",
"-523 -600 LINE",
"-438 -600 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0120 0 3 1 2 1 0 2 103 0 1 1 21 1 78 0 0 0 5 0 5 17 17 4 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-573 -600 LINE",
"-488 -600 LINE",
"-488 -800 LINE",
"-200 -800 LINE",
"-200 -500 LINE",
"-573 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-573 -600 LINE",
"-488 -600 LINE",
"-488 -800 LINE",
"-100 -800 LINE",
"-100 -500 LINE",
"-573 -500 LINE"
);
}
);
width = 0;
}
);
note = uni17BB.b;
},
{
glyphname = uni17BC.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-480 -800 QCURVE SMOOTH",
"-250 -800 OFFCURVE",
"-250 -660 QCURVE SMOOTH",
"-250 -500 LINE",
"-308 -500 LINE",
"-308 -660 LINE SMOOTH",
"-308 -750 OFFCURVE",
"-480 -750 QCURVE SMOOTH",
"-652 -750 OFFCURVE",
"-652 -660 QCURVE SMOOTH",
"-652 -500 LINE",
"-710 -500 LINE",
"-710 -660 LINE SMOOTH",
"-710 -800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-500 -800 QCURVE SMOOTH",
"-250 -800 OFFCURVE",
"-250 -660 QCURVE SMOOTH",
"-250 -500 LINE",
"-348 -500 LINE",
"-348 -660 LINE SMOOTH",
"-348 -720 OFFCURVE",
"-500 -720 QCURVE SMOOTH",
"-652 -720 OFFCURVE",
"-652 -660 QCURVE SMOOTH",
"-652 -500 LINE",
"-750 -500 LINE",
"-750 -660 LINE SMOOTH",
"-750 -800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-500 -800 QCURVE SMOOTH",
"-200 -800 OFFCURVE",
"-200 -660 QCURVE SMOOTH",
"-200 -500 LINE",
"-378 -500 LINE",
"-378 -660 LINE SMOOTH",
"-378 -720 OFFCURVE",
"-500 -720 QCURVE SMOOTH",
"-622 -720 OFFCURVE",
"-622 -660 QCURVE SMOOTH",
"-622 -500 LINE",
"-800 -500 LINE",
"-800 -660 LINE SMOOTH",
"-800 -800 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01211 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 0 1 1 0 112 0 1 1 3 98 0 3 3 21 3 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 17 values pushed */\0122 1 0 1 0 133 0 1 1 3 98 0 3 3 21 3 78 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01234 18 34 17 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-850 -800 OFFCURVE",
"-500 -800 QCURVE SMOOTH",
"-150 -800 OFFCURVE",
"-150 -660 QCURVE SMOOTH",
"-150 -500 LINE",
"-408 -500 LINE",
"-408 -660 LINE SMOOTH",
"-408 -720 OFFCURVE",
"-500 -720 QCURVE SMOOTH",
"-592 -720 OFFCURVE",
"-592 -660 QCURVE SMOOTH",
"-592 -500 LINE",
"-850 -500 LINE",
"-850 -660 LINE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-900 -800 OFFCURVE",
"-500 -800 QCURVE SMOOTH",
"-100 -800 OFFCURVE",
"-100 -660 QCURVE SMOOTH",
"-100 -500 LINE",
"-438 -500 LINE",
"-438 -610 LINE SMOOTH",
"-438 -670 OFFCURVE",
"-500 -670 QCURVE SMOOTH",
"-562 -670 OFFCURVE",
"-562 -610 QCURVE SMOOTH",
"-562 -500 LINE",
"-900 -500 LINE",
"-900 -660 LINE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17BC.b;
},
{
glyphname = uni17BD.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-310 -800 LINE",
"-250 -800 LINE",
"-250 -500 LINE",
"-308 -500 LINE",
"-308 -737 LINE",
"-455 -640 LINE",
"-602 -737 LINE",
"-602 -500 LINE",
"-660 -500 LINE",
"-660 -800 LINE",
"-600 -800 LINE",
"-455 -693 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-350 -800 LINE",
"-250 -800 LINE",
"-250 -500 LINE",
"-348 -500 LINE",
"-348 -707 LINE",
"-495 -620 LINE",
"-642 -707 LINE",
"-642 -500 LINE",
"-740 -500 LINE",
"-740 -800 LINE",
"-640 -800 LINE",
"-495 -703 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-400 -800 LINE",
"-200 -800 LINE",
"-200 -500 LINE",
"-378 -500 LINE",
"-378 -707 LINE",
"-525 -620 LINE",
"-672 -707 LINE",
"-672 -500 LINE",
"-850 -500 LINE",
"-850 -800 LINE",
"-650 -800 LINE",
"-525 -713 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 29 values pushed */\01211 6 5 4 4 0 1 1 76 2 1 1 1 0 95 3 1 0 0 21 0 78 17 20 17 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-620 -800 LINE",
"-525 -713 LINE",
"-430 -800 LINE",
"-150 -800 LINE",
"-150 -500 LINE",
"-408 -500 LINE",
"-408 -677 LINE",
"-525 -590 LINE",
"-642 -677 LINE",
"-642 -500 LINE",
"-900 -500 LINE",
"-900 -800 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-590 -800 LINE",
"-525 -733 LINE",
"-460 -800 LINE",
"-100 -800 LINE",
"-100 -500 LINE",
"-438 -500 LINE",
"-438 -657 LINE",
"-525 -580 LINE",
"-612 -657 LINE",
"-612 -500 LINE",
"-950 -500 LINE",
"-950 -800 LINE"
);
}
);
width = 0;
}
);
note = uni17BD.b;
},
{
glyphname = uni17B7.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-920 1510 QCURVE SMOOTH",
"-250 1510 LINE",
"-250 1560 LINE",
"-370 1700 OFFCURVE",
"-651 1850 OFFCURVE",
"-770 1850 QCURVE SMOOTH",
"-1040 1850 OFFCURVE",
"-1040 1620 QCURVE SMOOTH",
"-1040 1510 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-404 1660 OFFCURVE",
"-310 1560 QCURVE",
"-920 1560 LINE SMOOTH",
"-990 1560 OFFCURVE",
"-990 1620 QCURVE SMOOTH",
"-990 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-660 1800 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-920 1500 QCURVE SMOOTH",
"-230 1500 LINE",
"-230 1588 LINE",
"-370 1730 OFFCURVE",
"-651 1880 OFFCURVE",
"-770 1880 QCURVE SMOOTH",
"-1050 1880 OFFCURVE",
"-1050 1640 QCURVE SMOOTH",
"-1050 1500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-474 1690 OFFCURVE",
"-362 1588 QCURVE",
"-920 1588 LINE SMOOTH",
"-962 1588 OFFCURVE",
"-962 1640 QCURVE SMOOTH",
"-962 1792 OFFCURVE",
"-770 1792 QCURVE SMOOTH",
"-710 1792 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1650 LINE",
"-310 1750 OFFCURVE",
"-450 1825 QCURVE SMOOTH",
"-591 1900 OFFCURVE",
"-740 1900 QCURVE SMOOTH",
"-890 1900 OFFCURVE",
"-1050 1750 OFFCURVE",
"-1050 1650 QCURVE SMOOTH",
"-1050 1500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1710 OFFCURVE",
"-392 1630 QCURVE",
"-900 1630 LINE",
"-900 1710 OFFCURVE",
"-830 1770 OFFCURVE",
"-740 1770 QCURVE SMOOTH",
"-680 1770 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 12 11 15 14 11 17 12 17 36 34 5 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1000 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1650 LINE",
"-310 1750 OFFCURVE",
"-450 1825 QCURVE SMOOTH",
"-591 1900 OFFCURVE",
"-740 1900 QCURVE SMOOTH",
"-1100 1900 OFFCURVE",
"-1100 1650 QCURVE SMOOTH",
"-1100 1500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1720 OFFCURVE",
"-442 1630 QCURVE",
"-850 1630 LINE",
"-850 1720 OFFCURVE",
"-740 1720 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-989 1500 QCURVE SMOOTH",
"-100 1500 LINE",
"-100 1650 LINE",
"-222 1750 OFFCURVE",
"-378 1825 QCURVE SMOOTH",
"-534 1900 OFFCURVE",
"-700 1900 QCURVE SMOOTH",
"-1100 1900 OFFCURVE",
"-1100 1650 QCURVE SMOOTH",
"-1100 1500 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1720 OFFCURVE",
"-392 1630 QCURVE",
"-800 1630 LINE",
"-800 1720 OFFCURVE",
"-690 1720 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B7.a;
},
{
glyphname = uni17B8.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-404 1660 OFFCURVE",
"-310 1560 QCURVE",
"-920 1560 LINE SMOOTH",
"-990 1560 OFFCURVE",
"-990 1620 QCURVE SMOOTH",
"-990 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-660 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-510 1775 QCURVE SMOOTH",
"-651 1850 OFFCURVE",
"-770 1850 QCURVE SMOOTH",
"-1040 1850 OFFCURVE",
"-1040 1620 QCURVE SMOOTH",
"-1040 1510 OFFCURVE",
"-920 1510 QCURVE SMOOTH",
"-250 1510 LINE",
"-250 1900 LINE",
"-300 1900 LINE",
"-300 1615 LINE",
"-399 1715 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-474 1690 OFFCURVE",
"-362 1588 QCURVE",
"-920 1588 LINE SMOOTH",
"-962 1588 OFFCURVE",
"-962 1640 QCURVE SMOOTH",
"-962 1792 OFFCURVE",
"-770 1792 QCURVE SMOOTH",
"-710 1792 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-510 1805 QCURVE SMOOTH",
"-651 1880 OFFCURVE",
"-770 1880 QCURVE SMOOTH",
"-1050 1880 OFFCURVE",
"-1050 1640 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-920 1500 QCURVE SMOOTH",
"-230 1500 LINE",
"-230 1900 LINE",
"-318 1900 LINE",
"-318 1671 LINE",
"-414 1754 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1740 OFFCURVE",
"-740 1740 QCURVE SMOOTH",
"-680 1740 OFFCURVE",
"-504 1687 OFFCURVE",
"-392 1616 QCURVE",
"-900 1616 LINE",
"-900 1687 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-338 1729 LINE",
"-391 1761 OFFCURVE",
"-450 1789 QCURVE SMOOTH",
"-591 1856 OFFCURVE",
"-740 1856 QCURVE SMOOTH",
"-890 1856 OFFCURVE",
"-1050 1722 OFFCURVE",
"-1050 1633 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1900 LINE",
"-338 1900 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01218 1 0 1 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 31 values pushed */\0125 1 4 3 0 4 112 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 96 0 2 0 2 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0125 1 4 3 4 133 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 96 0 2 0 2 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0127 7 7 19 7 19 35 35 34 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-740 1699 QCURVE SMOOTH",
"-554 1699 OFFCURVE",
"-442 1618 QCURVE",
"-850 1618 LINE",
"-850 1699 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1795 QCURVE SMOOTH",
"-591 1863 OFFCURVE",
"-740 1863 QCURVE SMOOTH",
"-1100 1863 OFFCURVE",
"-1100 1636 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1908 LINE",
"-388 1908 LINE",
"-388 1763 LINE",
"-418 1779 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-690 1696 QCURVE SMOOTH",
"-504 1696 OFFCURVE",
"-392 1616 QCURVE",
"-800 1616 LINE",
"-800 1696 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-378 1789 QCURVE SMOOTH",
"-534 1856 OFFCURVE",
"-700 1856 QCURVE SMOOTH",
"-1100 1856 OFFCURVE",
"-1100 1633 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-933 1500 QCURVE SMOOTH",
"-100 1500 LINE",
"-100 1900 LINE",
"-309 1900 LINE",
"-309 1758 LINE",
"-342 1774 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17B8.a;
},
{
glyphname = uni17B9.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-410 1855 QCURVE SMOOTH",
"-300 1855 OFFCURVE",
"-300 1755 QCURVE SMOOTH",
"-300 1678 OFFCURVE",
"-366 1661 QCURVE",
"-435 1714 OFFCURVE",
"-510 1750 QCURVE SMOOTH",
"-515 1753 OFFCURVE",
"-520 1755 QCURVE",
"-520 1855 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-569 1777 QCURVE",
"-676 1818 OFFCURVE",
"-770 1818 QCURVE SMOOTH",
"-1040 1818 OFFCURVE",
"-1040 1610 QCURVE SMOOTH",
"-1040 1510 OFFCURVE",
"-920 1510 QCURVE SMOOTH",
"-250 1510 LINE",
"-250 1555 LINE",
"-285 1593 OFFCURVE",
"-323 1625 QCURVE",
"-250 1657 OFFCURVE",
"-250 1755 QCURVE SMOOTH",
"-250 1900 OFFCURVE",
"-410 1900 QCURVE SMOOTH",
"-558 1900 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-404 1646 OFFCURVE",
"-310 1555 QCURVE",
"-920 1555 LINE SMOOTH",
"-990 1555 OFFCURVE",
"-990 1610 QCURVE SMOOTH",
"-990 1773 OFFCURVE",
"-770 1773 QCURVE SMOOTH",
"-660 1773 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-410 1828 QCURVE SMOOTH",
"-317 1828 OFFCURVE",
"-317 1750 QCURVE SMOOTH",
"-317 1692 OFFCURVE",
"-370 1678 QCURVE",
"-436 1720 OFFCURVE",
"-503 1751 QCURVE",
"-503 1828 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-230 1750 QCURVE SMOOTH",
"-230 1900 OFFCURVE",
"-410 1900 QCURVE SMOOTH",
"-568 1900 OFFCURVE",
"-587 1784 QCURVE",
"-684 1817 OFFCURVE",
"-770 1817 QCURVE SMOOTH",
"-1050 1817 OFFCURVE",
"-1050 1617 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-920 1500 QCURVE SMOOTH",
"-230 1500 LINE",
"-230 1573 LINE",
"-262 1600 OFFCURVE",
"-294 1624 QCURVE",
"-230 1661 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-474 1658 OFFCURVE",
"-362 1573 QCURVE",
"-920 1573 LINE SMOOTH",
"-962 1573 OFFCURVE",
"-962 1617 QCURVE SMOOTH",
"-962 1743 OFFCURVE",
"-770 1743 QCURVE SMOOTH",
"-710 1743 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1716 OFFCURVE",
"-740 1716 QCURVE SMOOTH",
"-680 1716 OFFCURVE",
"-504 1668 OFFCURVE",
"-392 1604 QCURVE",
"-900 1604 LINE",
"-900 1668 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-226 1661 QCURVE SMOOTH",
"-200 1698 OFFCURVE",
"-200 1740 QCURVE SMOOTH",
"-200 1782 OFFCURVE",
"-255 1859 OFFCURVE",
"-351 1900 OFFCURVE",
"-402 1900 QCURVE SMOOTH",
"-453 1900 OFFCURVE",
"-549 1859 OFFCURVE",
"-576 1821 QCURVE SMOOTH",
"-582 1812 OFFCURVE",
"-587 1804 QCURVE",
"-662 1820 OFFCURVE",
"-740 1820 QCURVE SMOOTH",
"-890 1820 OFFCURVE",
"-1050 1700 OFFCURVE",
"-1050 1620 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1620 LINE",
"-218 1634 OFFCURVE",
"-238 1646 QCURVE",
"-232 1653 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1760 QCURVE SMOOTH",
"-465 1766 OFFCURVE",
"-480 1772 QCURVE",
"-479 1774 OFFCURVE",
"-478 1775 QCURVE SMOOTH",
"-466 1791 OFFCURVE",
"-424 1810 OFFCURVE",
"-402 1810 QCURVE SMOOTH",
"-379 1810 OFFCURVE",
"-338 1791 OFFCURVE",
"-314 1758 OFFCURVE",
"-314 1740 QCURVE SMOOTH",
"-314 1722 OFFCURVE",
"-325 1706 QCURVE SMOOTH",
"-327 1703 OFFCURVE",
"-329 1701 QCURVE",
"-386 1733 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01242 18 2 1 5 9 7 2 0 1 2 76 0 4 0 5 1 4 5 105 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 95 0 2 0 2 79 46 37 35 37 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-226 1660 QCURVE SMOOTH",
"-200 1698 OFFCURVE",
"-200 1739 QCURVE SMOOTH",
"-200 1781 OFFCURVE",
"-255 1858 OFFCURVE",
"-351 1899 OFFCURVE",
"-402 1899 QCURVE SMOOTH",
"-453 1899 OFFCURVE",
"-549 1858 OFFCURVE",
"-576 1820 QCURVE SMOOTH",
"-582 1811 OFFCURVE",
"-587 1803 QCURVE",
"-662 1819 OFFCURVE",
"-740 1819 QCURVE SMOOTH",
"-1100 1819 OFFCURVE",
"-1100 1620 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1620 LINE",
"-218 1633 OFFCURVE",
"-238 1646 QCURVE",
"-232 1652 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-450 1759 QCURVE SMOOTH",
"-465 1766 OFFCURVE",
"-480 1771 QCURVE",
"-479 1773 OFFCURVE",
"-478 1775 QCURVE",
"-466 1790 OFFCURVE",
"-424 1809 OFFCURVE",
"-402 1809 QCURVE SMOOTH",
"-379 1809 OFFCURVE",
"-338 1790 OFFCURVE",
"-314 1758 OFFCURVE",
"-314 1739 QCURVE SMOOTH",
"-314 1721 OFFCURVE",
"-325 1705 QCURVE",
"-327 1703 OFFCURVE",
"-329 1700 QCURVE",
"-386 1732 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1676 OFFCURVE",
"-442 1604 QCURVE",
"-850 1604 LINE",
"-850 1676 OFFCURVE",
"-740 1676 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-129 1661 QCURVE SMOOTH",
"-100 1698 OFFCURVE",
"-100 1740 QCURVE SMOOTH",
"-100 1782 OFFCURVE",
"-161 1859 OFFCURVE",
"-268 1900 OFFCURVE",
"-324 1900 QCURVE SMOOTH",
"-381 1900 OFFCURVE",
"-488 1859 OFFCURVE",
"-518 1821 QCURVE SMOOTH",
"-524 1812 OFFCURVE",
"-530 1804 QCURVE",
"-613 1820 OFFCURVE",
"-700 1820 QCURVE SMOOTH",
"-1100 1820 OFFCURVE",
"-1100 1620 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-933 1500 QCURVE SMOOTH",
"-100 1500 LINE",
"-100 1620 LINE",
"-120 1634 OFFCURVE",
"-142 1646 QCURVE",
"-136 1653 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-380 1760 QCURVE SMOOTH",
"-395 1766 OFFCURVE",
"-410 1772 QCURVE",
"-409 1774 OFFCURVE",
"-408 1775 QCURVE SMOOTH",
"-396 1791 OFFCURVE",
"-354 1810 OFFCURVE",
"-332 1810 QCURVE SMOOTH",
"-309 1810 OFFCURVE",
"-268 1791 OFFCURVE",
"-244 1758 OFFCURVE",
"-244 1740 QCURVE SMOOTH",
"-244 1722 OFFCURVE",
"-255 1706 QCURVE SMOOTH",
"-257 1703 OFFCURVE",
"-259 1701 QCURVE",
"-316 1733 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1676 OFFCURVE",
"-392 1604 QCURVE",
"-800 1604 LINE",
"-800 1676 OFFCURVE",
"-690 1676 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B9.a;
},
{
glyphname = uni17BA.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-404 1660 OFFCURVE",
"-310 1560 QCURVE",
"-920 1560 LINE SMOOTH",
"-990 1560 OFFCURVE",
"-990 1620 QCURVE SMOOTH",
"-990 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-660 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-530 1900 LINE",
"-530 1785 LINE",
"-659 1850 OFFCURVE",
"-770 1850 QCURVE SMOOTH",
"-1040 1850 OFFCURVE",
"-1040 1620 QCURVE SMOOTH",
"-1040 1510 OFFCURVE",
"-920 1510 QCURVE SMOOTH",
"-250 1510 LINE",
"-250 1900 LINE",
"-300 1900 LINE",
"-300 1615 LINE",
"-386 1701 OFFCURVE",
"-480 1758 QCURVE",
"-480 1900 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-474 1673 OFFCURVE",
"-362 1580 QCURVE",
"-920 1580 LINE SMOOTH",
"-962 1580 OFFCURVE",
"-962 1627 QCURVE SMOOTH",
"-962 1765 OFFCURVE",
"-770 1765 QCURVE SMOOTH",
"-710 1765 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-548 1900 LINE",
"-548 1795 LINE",
"-667 1845 OFFCURVE",
"-770 1845 QCURVE SMOOTH",
"-1050 1845 OFFCURVE",
"-1050 1627 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-920 1500 QCURVE SMOOTH",
"-230 1500 LINE",
"-230 1891 LINE",
"-318 1891 LINE",
"-318 1655 LINE",
"-389 1711 OFFCURVE",
"-460 1751 QCURVE",
"-460 1900 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-830 1716 OFFCURVE",
"-740 1716 QCURVE SMOOTH",
"-680 1716 OFFCURVE",
"-504 1668 OFFCURVE",
"-392 1604 QCURVE",
"-900 1604 LINE",
"-900 1668 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-740 1820 QCURVE SMOOTH",
"-890 1820 OFFCURVE",
"-1050 1700 OFFCURVE",
"-1050 1620 QCURVE SMOOTH",
"-1050 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1860 LINE",
"-338 1860 LINE",
"-338 1706 LINE",
"-378 1727 OFFCURVE",
"-420 1746 QCURVE",
"-420 1900 LINE",
"-558 1900 LINE",
"-558 1797 LINE",
"-647 1820 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01210 7 2 1 5 12 1 0 1 2 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0129 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 3 0 2 112 0 3 5 0 3 112 0 5 0 1 0 5 1 105 0 0 4 4 0 87 0 0 0 4 96 0 4 0 4 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 34 values pushed */\0120 2 3 2 133 0 3 5 3 133 0 5 0 1 0 5 1 105 0 0 4 4 0 87 0 0 0 4 96 0 4 0 4 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01235 33 20 19 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-740 1819 QCURVE SMOOTH",
"-1100 1819 OFFCURVE",
"-1100 1620 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-950 1500 QCURVE SMOOTH",
"-200 1500 LINE",
"-200 1859 LINE",
"-338 1859 LINE",
"-338 1706 LINE",
"-378 1727 OFFCURVE",
"-420 1746 QCURVE",
"-420 1899 LINE",
"-558 1899 LINE",
"-558 1796 LINE",
"-647 1819 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-554 1676 OFFCURVE",
"-442 1604 QCURVE",
"-850 1604 LINE",
"-850 1676 OFFCURVE",
"-740 1676 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-700 1820 QCURVE SMOOTH",
"-1100 1820 OFFCURVE",
"-1100 1620 QCURVE SMOOTH",
"-1100 1500 OFFCURVE",
"-933 1500 QCURVE SMOOTH",
"-100 1500 LINE",
"-100 1860 LINE",
"-253 1860 LINE",
"-253 1706 LINE",
"-298 1727 OFFCURVE",
"-344 1746 QCURVE",
"-344 1900 LINE",
"-498 1900 LINE",
"-498 1797 LINE",
"-597 1820 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-504 1676 OFFCURVE",
"-392 1604 QCURVE",
"-800 1604 LINE",
"-800 1676 OFFCURVE",
"-690 1676 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17BA.a;
},
{
glyphname = uni17C6.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-530 1808 OFFCURVE",
"-485 1727 OFFCURVE",
"-485 1685 QCURVE SMOOTH",
"-485 1643 OFFCURVE",
"-527 1562 OFFCURVE",
"-608 1520 OFFCURVE",
"-650 1520 QCURVE SMOOTH",
"-692 1520 OFFCURVE",
"-770 1562 OFFCURVE",
"-815 1643 OFFCURVE",
"-815 1685 QCURVE SMOOTH",
"-815 1727 OFFCURVE",
"-770 1808 OFFCURVE",
"-692 1850 OFFCURVE",
"-650 1850 QCURVE SMOOTH",
"-608 1850 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-807 1845 OFFCURVE",
"-865 1741 OFFCURVE",
"-865 1685 QCURVE SMOOTH",
"-865 1629 OFFCURVE",
"-808 1526 OFFCURVE",
"-705 1470 OFFCURVE",
"-650 1470 QCURVE SMOOTH",
"-594 1470 OFFCURVE",
"-491 1526 OFFCURVE",
"-435 1629 OFFCURVE",
"-435 1685 QCURVE SMOOTH",
"-435 1741 OFFCURVE",
"-493 1845 OFFCURVE",
"-596 1900 OFFCURVE",
"-650 1900 QCURVE SMOOTH",
"-704 1900 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-550 1791 OFFCURVE",
"-513 1731 OFFCURVE",
"-513 1700 QCURVE SMOOTH",
"-513 1669 OFFCURVE",
"-548 1609 OFFCURVE",
"-615 1578 OFFCURVE",
"-650 1578 QCURVE SMOOTH",
"-685 1578 OFFCURVE",
"-750 1609 OFFCURVE",
"-787 1669 OFFCURVE",
"-787 1700 QCURVE SMOOTH",
"-787 1731 OFFCURVE",
"-750 1791 OFFCURVE",
"-685 1822 OFFCURVE",
"-650 1822 QCURVE SMOOTH",
"-615 1822 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-814 1848 OFFCURVE",
"-875 1752 OFFCURVE",
"-875 1700 QCURVE SMOOTH",
"-875 1648 OFFCURVE",
"-815 1552 OFFCURVE",
"-708 1500 OFFCURVE",
"-650 1500 QCURVE SMOOTH",
"-591 1500 OFFCURVE",
"-484 1552 OFFCURVE",
"-425 1648 OFFCURVE",
"-425 1700 QCURVE SMOOTH",
"-425 1752 OFFCURVE",
"-486 1848 OFFCURVE",
"-593 1900 OFFCURVE",
"-650 1900 QCURVE SMOOTH",
"-707 1900 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-584 1760 OFFCURVE",
"-560 1720 OFFCURVE",
"-560 1700 QCURVE SMOOTH",
"-560 1680 OFFCURVE",
"-583 1640 OFFCURVE",
"-627 1620 OFFCURVE",
"-650 1620 QCURVE SMOOTH",
"-673 1620 OFFCURVE",
"-716 1640 OFFCURVE",
"-740 1680 OFFCURVE",
"-740 1700 QCURVE SMOOTH",
"-740 1720 OFFCURVE",
"-716 1760 OFFCURVE",
"-673 1780 OFFCURVE",
"-650 1780 QCURVE SMOOTH",
"-627 1780 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-814 1848 OFFCURVE",
"-875 1752 OFFCURVE",
"-875 1700 QCURVE SMOOTH",
"-875 1648 OFFCURVE",
"-815 1552 OFFCURVE",
"-708 1500 OFFCURVE",
"-650 1500 QCURVE SMOOTH",
"-591 1500 OFFCURVE",
"-484 1552 OFFCURVE",
"-425 1648 OFFCURVE",
"-425 1700 QCURVE SMOOTH",
"-425 1752 OFFCURVE",
"-486 1848 OFFCURVE",
"-593 1900 OFFCURVE",
"-650 1900 QCURVE SMOOTH",
"-707 1900 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-598 1643 QCURVE SMOOTH",
"-611 1638 OFFCURVE",
"-626 1638 QCURVE SMOOTH",
"-632 1638 OFFCURVE",
"-639 1639 QCURVE SMOOTH",
"-663 1642 OFFCURVE",
"-682 1653 QCURVE SMOOTH",
"-702 1663 OFFCURVE",
"-732 1697 OFFCURVE",
"-734 1714 QCURVE SMOOTH",
"-734 1721 LINE SMOOTH",
"-734 1735 OFFCURVE",
"-728 1745 QCURVE SMOOTH",
"-720 1757 OFFCURVE",
"-702 1765 QCURVE SMOOTH",
"-689 1770 OFFCURVE",
"-674 1770 QCURVE SMOOTH",
"-668 1770 OFFCURVE",
"-660 1768 QCURVE",
"-637 1766 OFFCURVE",
"-618 1755 QCURVE SMOOTH",
"-598 1745 OFFCURVE",
"-568 1711 OFFCURVE",
"-566 1693 QCURVE SMOOTH",
"-566 1687 LINE SMOOTH",
"-566 1673 OFFCURVE",
"-572 1663 QCURVE SMOOTH",
"-580 1651 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-832 1855 OFFCURVE",
"-900 1757 OFFCURVE",
"-900 1704 QCURVE SMOOTH",
"-900 1651 OFFCURVE",
"-833 1553 OFFCURVE",
"-714 1500 OFFCURVE",
"-650 1500 QCURVE SMOOTH",
"-584 1500 OFFCURVE",
"-466 1553 OFFCURVE",
"-400 1651 OFFCURVE",
"-400 1704 QCURVE SMOOTH",
"-400 1757 OFFCURVE",
"-468 1855 OFFCURVE",
"-587 1908 OFFCURVE",
"-650 1908 QCURVE SMOOTH",
"-713 1908 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-598 1640 QCURVE SMOOTH",
"-611 1635 OFFCURVE",
"-626 1635 QCURVE SMOOTH",
"-632 1635 OFFCURVE",
"-639 1636 QCURVE SMOOTH",
"-663 1640 OFFCURVE",
"-682 1650 QCURVE SMOOTH",
"-702 1660 OFFCURVE",
"-732 1693 OFFCURVE",
"-734 1710 QCURVE SMOOTH",
"-734 1717 LINE SMOOTH",
"-734 1730 OFFCURVE",
"-728 1740 QCURVE SMOOTH",
"-720 1752 OFFCURVE",
"-702 1760 QCURVE SMOOTH",
"-689 1765 OFFCURVE",
"-674 1765 QCURVE SMOOTH",
"-668 1765 OFFCURVE",
"-660 1763 QCURVE SMOOTH",
"-637 1760 OFFCURVE",
"-618 1750 QCURVE SMOOTH",
"-598 1740 OFFCURVE",
"-568 1707 OFFCURVE",
"-566 1689 QCURVE SMOOTH",
"-566 1683 LINE SMOOTH",
"-566 1670 OFFCURVE",
"-572 1660 QCURVE SMOOTH",
"-580 1648 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-868 1848 OFFCURVE",
"-950 1752 OFFCURVE",
"-950 1700 QCURVE SMOOTH",
"-950 1648 OFFCURVE",
"-870 1552 OFFCURVE",
"-727 1500 OFFCURVE",
"-650 1500 QCURVE SMOOTH",
"-571 1500 OFFCURVE",
"-429 1552 OFFCURVE",
"-350 1648 OFFCURVE",
"-350 1700 QCURVE SMOOTH",
"-350 1752 OFFCURVE",
"-432 1848 OFFCURVE",
"-574 1900 OFFCURVE",
"-650 1900 QCURVE SMOOTH",
"-726 1900 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17C6.a;
},
{
glyphname = uni17CE.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-925 1719 LINE",
"-925 1680 LINE",
"-676 1680 LINE",
"-676 1500 LINE",
"-624 1500 LINE",
"-624 1680 LINE",
"-375 1680 LINE",
"-375 1719 LINE",
"-624 1719 LINE",
"-624 1899 LINE",
"-676 1899 LINE",
"-676 1719 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-925 1758 LINE",
"-925 1681 LINE",
"-695 1681 LINE",
"-695 1500 LINE",
"-605 1500 LINE",
"-605 1681 LINE",
"-375 1681 LINE",
"-375 1758 LINE",
"-605 1758 LINE",
"-605 1899 LINE",
"-695 1899 LINE",
"-695 1758 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-925 1741 LINE",
"-925 1621 LINE",
"-725 1621 LINE",
"-725 1463 LINE",
"-575 1463 LINE",
"-575 1621 LINE",
"-375 1621 LINE",
"-375 1741 LINE",
"-575 1741 LINE",
"-575 1899 LINE",
"-725 1899 LINE",
"-725 1741 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 0 1 3 0 87 5 1 1 4 1 2 3 1 2 103 0 0 0 3 95 0 3 0 3 79 17 17 17 17 17 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-775 1899 LINE",
"-775 1778 LINE",
"-975 1778 LINE",
"-975 1601 LINE",
"-775 1601 LINE",
"-775 1480 LINE",
"-525 1480 LINE",
"-525 1601 LINE",
"-325 1601 LINE",
"-325 1778 LINE",
"-525 1778 LINE",
"-525 1899 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-825 1899 LINE",
"-825 1798 LINE",
"-1025 1798 LINE",
"-1025 1621 LINE",
"-825 1621 LINE",
"-825 1500 LINE",
"-475 1500 LINE",
"-475 1621 LINE",
"-275 1621 LINE",
"-275 1798 LINE",
"-475 1798 LINE",
"-475 1899 LINE"
);
}
);
width = 0;
}
);
note = uni17CE.a;
},
{
glyphname = uni17D0.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-379 1510 QCURVE SMOOTH",
"100 1510 OFFCURVE",
"100 1890 QCURVE",
"50 1890 LINE",
"50 1560 OFFCURVE",
"-379 1560 QCURVE SMOOTH",
"-612 1560 OFFCURVE",
"-612 1690 QCURVE SMOOTH",
"-612 1810 OFFCURVE",
"-436 1810 QCURVE SMOOTH",
"-389 1810 LINE",
"-389 1860 LINE",
"-433 1860 LINE SMOOTH",
"-662 1860 OFFCURVE",
"-662 1690 QCURVE SMOOTH",
"-662 1510 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-379 1500 QCURVE SMOOTH",
"100 1500 OFFCURVE",
"100 1900 QCURVE",
"12 1900 LINE",
"12 1588 OFFCURVE",
"-379 1588 QCURVE SMOOTH",
"-612 1588 OFFCURVE",
"-612 1700 QCURVE SMOOTH",
"-612 1802 OFFCURVE",
"-436 1802 QCURVE SMOOTH",
"-389 1802 LINE",
"-389 1890 LINE",
"-433 1890 LINE SMOOTH",
"-700 1890 OFFCURVE",
"-700 1700 QCURVE SMOOTH",
"-700 1500 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-309 1534 QCURVE SMOOTH",
"100 1534 OFFCURVE",
"100 1900 QCURVE",
"-50 1900 LINE",
"-50 1653 OFFCURVE",
"-309 1653 QCURVE SMOOTH",
"-550 1653 OFFCURVE",
"-550 1717 QCURVE SMOOTH",
"-550 1772 OFFCURVE",
"-436 1772 QCURVE SMOOTH",
"-389 1772 LINE",
"-389 1891 LINE",
"-433 1891 LINE SMOOTH",
"-700 1891 OFFCURVE",
"-700 1717 QCURVE SMOOTH",
"-700 1534 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\0123 1 0 0 1 2 0 1 105 0 2 4 4 2 89 0 2 2 4 98 0 4 2 4 82 33 17 34 33 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-309 1500 QCURVE SMOOTH",
"100 1500 OFFCURVE",
"100 1900 QCURVE",
"-100 1900 LINE",
"-100 1660 OFFCURVE",
"-309 1660 QCURVE SMOOTH",
"-450 1660 OFFCURVE",
"-450 1700 QCURVE SMOOTH",
"-450 1760 OFFCURVE",
"-386 1760 QCURVE SMOOTH",
"-339 1760 LINE",
"-339 1890 LINE",
"-383 1890 LINE SMOOTH",
"-700 1890 OFFCURVE",
"-700 1700 QCURVE SMOOTH",
"-700 1500 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-349 1490 QCURVE SMOOTH",
"100 1490 OFFCURVE",
"100 1890 QCURVE",
"-150 1890 LINE",
"-150 1652 OFFCURVE",
"-349 1652 QCURVE SMOOTH",
"-450 1652 OFFCURVE",
"-450 1703 QCURVE SMOOTH",
"-450 1771 OFFCURVE",
"-386 1771 QCURVE SMOOTH",
"-339 1771 LINE",
"-339 1881 LINE",
"-383 1881 LINE SMOOTH",
"-760 1881 OFFCURVE",
"-760 1703 QCURVE SMOOTH",
"-760 1490 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17D0.a;
},
{
glyphname = uni1789.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"500 350 OFFCURVE",
"500 249 QCURVE SMOOTH",
"500 50 OFFCURVE",
"388 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 122 QCURVE SMOOTH",
"308 350 LINE",
"388 350 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1056 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"250 1200 OFFCURVE",
"250 923 QCURVE SMOOTH",
"250 122 LINE SMOOTH",
"250 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"550 0 OFFCURVE",
"550 249 QCURVE SMOOTH",
"550 400 OFFCURVE",
"388 400 QCURVE SMOOTH",
"308 400 LINE",
"308 923 LINE SMOOTH",
"308 1150 OFFCURVE",
"445 1150 QCURVE SMOOTH",
"510 1150 OFFCURVE",
"591 1034 QCURVE SMOOTH",
"618 995 OFFCURVE",
"650 995 QCURVE SMOOTH",
"682 995 OFFCURVE",
"709 1034 QCURVE SMOOTH",
"791 1150 OFFCURVE",
"857 1150 QCURVE SMOOTH",
"992 1150 OFFCURVE",
"992 923 QCURVE SMOOTH",
"992 0 LINE",
"1050 0 LINE",
"1050 923 LINE SMOOTH",
"1050 945 OFFCURVE",
"1049 966 QCURVE",
"1084 1029 OFFCURVE",
"1146 1082 QCURVE SMOOTH",
"1227 1150 OFFCURVE",
"1361 1150 QCURVE SMOOTH",
"1642 1150 OFFCURVE",
"1642 877 QCURVE SMOOTH",
"1642 0 LINE",
"1700 0 LINE",
"1700 877 LINE SMOOTH",
"1700 1200 OFFCURVE",
"1361 1200 QCURVE SMOOTH",
"1163 1200 OFFCURVE",
"1040 1035 QCURVE",
"1006 1200 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"490 340 OFFCURVE",
"490 249 QCURVE SMOOTH",
"490 88 OFFCURVE",
"388 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 122 QCURVE SMOOTH",
"338 340 LINE",
"388 340 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1011 1118 QCURVE SMOOTH",
"951 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1066 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"230 1036 OFFCURVE",
"230 923 QCURVE SMOOTH",
"230 122 LINE SMOOTH",
"230 0 OFFCURVE",
"388 0 QCURVE SMOOTH",
"578 0 OFFCURVE",
"578 249 QCURVE SMOOTH",
"578 428 OFFCURVE",
"388 428 QCURVE SMOOTH",
"338 428 LINE",
"338 923 LINE SMOOTH",
"338 1100 OFFCURVE",
"445 1100 QCURVE SMOOTH",
"510 1100 OFFCURVE",
"591 984 QCURVE SMOOTH",
"618 945 OFFCURVE",
"650 945 QCURVE SMOOTH",
"682 945 OFFCURVE",
"709 984 QCURVE SMOOTH",
"791 1100 OFFCURVE",
"857 1100 QCURVE SMOOTH",
"962 1100 OFFCURVE",
"962 923 QCURVE SMOOTH",
"962 0 LINE",
"1070 0 LINE",
"1070 937 LINE",
"1095 993 OFFCURVE",
"1144 1041 QCURVE SMOOTH",
"1217 1112 OFFCURVE",
"1331 1112 QCURVE SMOOTH",
"1612 1112 OFFCURVE",
"1612 877 QCURVE SMOOTH",
"1612 0 LINE",
"1720 0 LINE",
"1720 877 LINE SMOOTH",
"1720 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1144 1200 OFFCURVE",
"1039 1070 QCURVE",
"1027 1095 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"480 249 QCURVE SMOOTH",
"480 138 OFFCURVE",
"388 138 QCURVE",
"388 310 LINE",
"480 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"388 0 QCURVE SMOOTH",
"598 0 OFFCURVE",
"598 249 QCURVE SMOOTH",
"598 448 OFFCURVE",
"388 448 QCURVE",
"388 923 LINE SMOOTH",
"388 1050 OFFCURVE",
"461 1050 QCURVE SMOOTH",
"510 1050 OFFCURVE",
"591 956 QCURVE SMOOTH",
"618 925 OFFCURVE",
"650 925 QCURVE SMOOTH",
"682 925 OFFCURVE",
"709 956 QCURVE SMOOTH",
"791 1050 OFFCURVE",
"840 1050 QCURVE SMOOTH",
"912 1050 OFFCURVE",
"912 923 QCURVE SMOOTH",
"912 0 LINE",
"1100 0 LINE",
"1100 877 LINE SMOOTH",
"1100 969 OFFCURVE",
"1159 1015 QCURVE SMOOTH",
"1217 1062 OFFCURVE",
"1331 1062 QCURVE SMOOTH",
"1445 1062 OFFCURVE",
"1504 1015 QCURVE SMOOTH",
"1562 969 OFFCURVE",
"1562 877 QCURVE SMOOTH",
"1562 0 LINE",
"1750 0 LINE",
"1750 877 LINE SMOOTH",
"1750 1015 OFFCURVE",
"1650 1108 QCURVE SMOOTH",
"1550 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1126 1200 OFFCURVE",
"1025 1119 QCURVE",
"950 1200 OFFCURVE",
"857 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"445 1200 QCURVE SMOOTH",
"350 1200 OFFCURVE",
"275 1118 QCURVE SMOOTH",
"200 1036 OFFCURVE",
"200 923 QCURVE SMOOTH",
"200 122 LINE SMOOTH",
"200 0 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01216 12 2 6 2 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01242 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 9 6 11 6 9 11 128 0 11 13 1 1 0 11 1 105 10 8 2 6 6 2 97 4 3 2 2 2 17 77 0 0 0 5 95 12 7 2 5 5 19 5 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 55 values pushed */\0120 9 8 11 8 9 11 128 0 11 13 1 1 0 11 1 105 0 6 6 2 97 4 3 2 2 2 17 77 10 1 8 8 2 97 4 3 2 2 2 17 77 0 0 0 5 95 12 7 2 5 5 19 5 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 32 values pushed */\0120 0 54 52 50 49 47 45 43 41 39 37 35 34 30 28 24 23 19 17 15 13 11 9 0 4 0 4 17 14 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 1950;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"530 249 QCURVE SMOOTH",
"530 138 OFFCURVE",
"438 138 QCURVE",
"438 310 LINE",
"530 310 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1066 1118 QCURVE SMOOTH",
"981 1200 OFFCURVE",
"887 1200 QCURVE SMOOTH",
"762 1200 OFFCURVE",
"650 1076 QCURVE",
"539 1200 OFFCURVE",
"415 1200 QCURVE SMOOTH",
"320 1200 OFFCURVE",
"150 1036 OFFCURVE",
"150 923 QCURVE SMOOTH",
"150 122 LINE SMOOTH",
"150 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"438 0 LINE SMOOTH",
"648 0 OFFCURVE",
"648 249 QCURVE SMOOTH",
"648 448 OFFCURVE",
"438 448 QCURVE",
"438 923 LINE SMOOTH",
"438 1000 OFFCURVE",
"474 1000 QCURVE SMOOTH",
"510 1000 OFFCURVE",
"591 906 QCURVE SMOOTH",
"618 875 OFFCURVE",
"650 875 QCURVE SMOOTH",
"682 875 OFFCURVE",
"709 906 QCURVE SMOOTH",
"791 1000 OFFCURVE",
"827 1000 QCURVE SMOOTH",
"862 1000 OFFCURVE",
"862 923 QCURVE SMOOTH",
"862 0 LINE",
"1150 0 LINE",
"1150 881 LINE",
"1172 934 OFFCURVE",
"1199 966 QCURVE SMOOTH",
"1237 1012 OFFCURVE",
"1331 1012 QCURVE SMOOTH",
"1512 1012 OFFCURVE",
"1512 877 QCURVE SMOOTH",
"1512 0 LINE",
"1800 0 LINE",
"1800 877 LINE SMOOTH",
"1800 1200 OFFCURVE",
"1331 1200 QCURVE SMOOTH",
"1163 1200 OFFCURVE",
"1072 1112 QCURVE",
"1069 1115 OFFCURVE"
);
}
);
width = 1950;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"550 259 QCURVE SMOOTH",
"550 144 OFFCURVE",
"488 144 QCURVE",
"488 323 LINE",
"550 323 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"917 1250 QCURVE SMOOTH",
"762 1250 OFFCURVE",
"650 1126 QCURVE",
"539 1250 OFFCURVE",
"385 1250 QCURVE SMOOTH",
"240 1250 OFFCURVE",
"100 1086 OFFCURVE",
"100 973 QCURVE SMOOTH",
"100 127 LINE SMOOTH",
"100 0 OFFCURVE",
"294 0 QCURVE SMOOTH",
"488 0 LINE SMOOTH",
"668 0 OFFCURVE",
"668 259 QCURVE SMOOTH",
"668 467 OFFCURVE",
"488 467 QCURVE",
"488 973 LINE SMOOTH",
"488 1000 OFFCURVE",
"514 1000 QCURVE SMOOTH",
"530 1000 OFFCURVE",
"628 895 OFFCURVE",
"650 895 QCURVE SMOOTH",
"672 895 OFFCURVE",
"771 1000 OFFCURVE",
"787 1000 QCURVE SMOOTH",
"812 1000 OFFCURVE",
"812 973 QCURVE SMOOTH",
"812 0 LINE",
"1200 0 LINE",
"1200 955 LINE",
"1209 964 OFFCURVE",
"1220 973 QCURVE SMOOTH",
"1267 1012 OFFCURVE",
"1331 1012 QCURVE SMOOTH",
"1462 1012 OFFCURVE",
"1462 877 QCURVE SMOOTH",
"1462 0 LINE",
"1850 0 LINE",
"1850 877 LINE SMOOTH",
"1850 1250 OFFCURVE",
"1431 1250 QCURVE SMOOTH",
"1226 1250 OFFCURVE",
"1124 1169 QCURVE",
"1050 1250 OFFCURVE"
);
}
);
width = 1950;
}
);
note = uni1789.a;
},
{
glyphname = uni17D2179A.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"122 1048 LINE",
"200 1150 LINE",
"408 1150 LINE",
"408 1200 LINE",
"180 1200 LINE",
"69 1069 OFFCURVE",
"69 1045 QCURVE SMOOTH",
"69 1020 OFFCURVE",
"114 967 QCURVE SMOOTH",
"250 806 LINE",
"250 -550 LINE SMOOTH",
"250 -800 OFFCURVE",
"578 -800 QCURVE SMOOTH",
"906 -800 OFFCURVE",
"906 -550 QCURVE SMOOTH",
"906 -500 LINE",
"848 -500 LINE",
"848 -550 LINE SMOOTH",
"848 -750 OFFCURVE",
"578 -750 QCURVE SMOOTH",
"308 -750 OFFCURVE",
"308 -550 QCURVE SMOOTH",
"308 830 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 -800 OFFCURVE",
"598 -800 QCURVE SMOOTH",
"946 -800 OFFCURVE",
"946 -520 QCURVE",
"838 -520 LINE",
"838 -712 OFFCURVE",
"598 -712 QCURVE SMOOTH",
"358 -712 OFFCURVE",
"358 -520 QCURVE SMOOTH",
"358 840 LINE",
"131 1060 LINE",
"153 1112 LINE",
"358 1112 LINE",
"358 1200 LINE",
"110 1200 LINE",
"32 1063 OFFCURVE",
"32 1042 QCURVE SMOOTH",
"32 1014 OFFCURVE",
"250 806 QCURVE",
"250 -520 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"438 1062 LINE",
"438 1200 LINE",
"190 1200 LINE",
"115 1102 LINE",
"78 1053 LINE SMOOTH",
"59 1029 OFFCURVE",
"59 1005 QCURVE SMOOTH",
"59 980 OFFCURVE",
"80 955 QCURVE SMOOTH",
"120 905 LINE",
"200 806 LINE",
"200 -520 LINE SMOOTH",
"200 -675 OFFCURVE",
"319 -738 QCURVE SMOOTH",
"438 -800 OFFCURVE",
"588 -800 QCURVE SMOOTH",
"738 -800 OFFCURVE",
"857 -738 QCURVE SMOOTH",
"976 -675 OFFCURVE",
"976 -520 QCURVE",
"788 -520 LINE",
"788 -595 OFFCURVE",
"671 -650 OFFCURVE",
"588 -650 QCURVE SMOOTH",
"505 -650 OFFCURVE",
"388 -595 OFFCURVE",
"388 -520 QCURVE SMOOTH",
"388 840 LINE",
"190 1062 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01217 0 2 1 4 1 76 0 1 4 0 4 1 0 128 0 4 4 3 95 0 3 3 17 77 0 0 0 2 97 0 2 2 21 2 78 17 28 35 18 35 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"438 1012 LINE",
"438 1200 LINE",
"170 1200 LINE",
"95 1102 LINE",
"58 1053 LINE SMOOTH",
"39 1029 OFFCURVE",
"39 1005 QCURVE SMOOTH",
"39 980 OFFCURVE",
"60 955 QCURVE SMOOTH",
"100 905 LINE",
"150 843 LINE",
"150 -520 LINE SMOOTH",
"150 -800 OFFCURVE",
"588 -800 QCURVE SMOOTH",
"1026 -800 OFFCURVE",
"1026 -520 QCURVE",
"738 -520 LINE",
"738 -650 OFFCURVE",
"588 -650 QCURVE SMOOTH",
"438 -650 OFFCURVE",
"438 -520 QCURVE SMOOTH",
"438 840 LINE"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"220 1012 LINE",
"488 1012 LINE",
"488 1250 LINE",
"140 1250 LINE",
"42 1084 LINE SMOOTH",
"9 1029 OFFCURVE",
"9 1005 QCURVE SMOOTH",
"9 980 OFFCURVE",
"32 946 QCURVE SMOOTH",
"100 843 LINE",
"100 -520 LINE SMOOTH",
"100 -800 OFFCURVE",
"592 -800 QCURVE SMOOTH",
"1076 -800 OFFCURVE",
"1076 -520 QCURVE",
"688 -520 LINE",
"688 -600 OFFCURVE",
"592 -600 QCURVE SMOOTH",
"488 -600 OFFCURVE",
"488 -520 QCURVE SMOOTH",
"488 840 LINE"
);
}
);
width = 588;
}
);
note = uni17D2179A.b;
},
{
glyphname = uni17BF.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"116 1600 OFFCURVE",
"210 1500 QCURVE",
"-320 1500 LINE SMOOTH",
"-390 1500 OFFCURVE",
"-390 1560 QCURVE SMOOTH",
"-390 1740 OFFCURVE",
"-230 1740 QCURVE SMOOTH",
"-140 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"220 1850 LINE",
"220 1555 LINE",
"134 1641 OFFCURVE",
"40 1698 QCURVE",
"40 1880 LINE",
"-10 1880 LINE",
"-10 1725 LINE",
"-139 1790 OFFCURVE",
"-230 1790 QCURVE SMOOTH",
"-440 1790 OFFCURVE",
"-440 1560 QCURVE SMOOTH",
"-440 1450 OFFCURVE",
"-320 1450 QCURVE SMOOTH",
"212 1450 LINE",
"280 1413 OFFCURVE",
"280 1300 QCURVE SMOOTH",
"280 -580 LINE SMOOTH",
"280 -750 OFFCURVE",
"15 -750 QCURVE SMOOTH",
"-250 -750 OFFCURVE",
"-250 -580 QCURVE SMOOTH",
"-250 -500 LINE",
"-308 -500 LINE",
"-308 -580 LINE SMOOTH",
"-308 -800 OFFCURVE",
"15 -800 QCURVE SMOOTH",
"338 -800 OFFCURVE",
"338 -580 QCURVE SMOOTH",
"338 1300 LINE SMOOTH",
"338 1403 OFFCURVE",
"270 1465 QCURVE",
"270 1850 LINE"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-4 1610 OFFCURVE",
"108 1508 QCURVE",
"-370 1508 LINE SMOOTH",
"-412 1508 OFFCURVE",
"-412 1560 QCURVE SMOOTH",
"-412 1712 OFFCURVE",
"-270 1712 QCURVE SMOOTH",
"-240 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"358 1404 OFFCURVE",
"240 1478 QCURVE",
"240 1850 LINE",
"152 1850 LINE",
"152 1591 LINE",
"81 1652 OFFCURVE",
"10 1696 QCURVE",
"10 1900 LINE",
"-78 1900 LINE",
"-78 1744 LINE",
"-197 1800 OFFCURVE",
"-270 1800 QCURVE SMOOTH",
"-500 1800 OFFCURVE",
"-500 1560 QCURVE SMOOTH",
"-500 1420 OFFCURVE",
"-370 1420 QCURVE SMOOTH",
"172 1420 LINE",
"250 1363 OFFCURVE",
"250 1240 QCURVE SMOOTH",
"250 -560 LINE SMOOTH",
"250 -710 OFFCURVE",
"10 -710 QCURVE SMOOTH",
"-230 -710 OFFCURVE",
"-230 -560 QCURVE SMOOTH",
"-230 -500 LINE",
"-338 -500 LINE",
"-338 -560 LINE SMOOTH",
"-338 -800 OFFCURVE",
"10 -800 QCURVE SMOOTH",
"358 -800 OFFCURVE",
"358 -560 QCURVE SMOOTH",
"358 1240 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-350 1670 OFFCURVE",
"-310 1670 QCURVE SMOOTH",
"-280 1670 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-370 1530 LINE",
"-370 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-388 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"388 -800 OFFCURVE",
"388 -560 QCURVE SMOOTH",
"388 1210 LINE SMOOTH",
"388 1433 OFFCURVE",
"200 1500 QCURVE",
"200 1850 LINE",
"62 1850 LINE",
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-410 1800 OFFCURVE",
"-520 1650 OFFCURVE",
"-520 1550 QCURVE SMOOTH",
"-520 1400 OFFCURVE",
"-420 1400 QCURVE SMOOTH",
"0 1400 LINE SMOOTH",
"200 1400 OFFCURVE",
"200 1210 QCURVE SMOOTH",
"200 -560 LINE SMOOTH",
"200 -660 OFFCURVE",
"0 -660 QCURVE SMOOTH",
"-200 -660 OFFCURVE",
"-200 -560 QCURVE SMOOTH",
"-200 -500 LINE",
"-388 -500 LINE",
"-388 -560 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01227 24 2 1 5 29 1 0 1 32 1 4 0 3 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0120 6 7 6 133 0 7 5 7 133 0 2 4 3 3 2 114 0 5 0 1 0 5 1 105 0 0 0 4 2 0 4 104 0 3 3 8 98 0 8 8 21 8 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 45 values pushed */\0120 6 7 6 133 0 7 5 7 133 0 2 4 3 4 2 3 128 0 5 0 1 0 5 1 105 0 0 0 4 2 0 4 104 0 3 3 8 98 0 8 8 21 8 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\01237 20 18 35 51 34 18 34 16 9 7 31 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-250 1620 OFFCURVE",
"-210 1620 QCURVE SMOOTH",
"-180 1620 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-270 1530 LINE",
"-270 1560 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"438 1383 OFFCURVE",
"200 1550 QCURVE",
"200 1850 LINE",
"62 1850 LINE",
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-410 1800 OFFCURVE",
"-520 1650 OFFCURVE",
"-520 1550 QCURVE SMOOTH",
"-520 1350 OFFCURVE",
"-420 1350 QCURVE SMOOTH",
"0 1350 LINE SMOOTH",
"150 1350 OFFCURVE",
"150 1210 QCURVE SMOOTH",
"150 -560 LINE SMOOTH",
"150 -660 OFFCURVE",
"0 -660 QCURVE SMOOTH",
"-150 -660 OFFCURVE",
"-150 -560 QCURVE SMOOTH",
"-150 -500 LINE",
"-438 -500 LINE",
"-438 -560 LINE SMOOTH",
"-438 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"438 -800 OFFCURVE",
"438 -560 QCURVE SMOOTH",
"438 1210 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-250 1620 OFFCURVE",
"-210 1620 QCURVE SMOOTH",
"-180 1620 OFFCURVE",
"-104 1610 OFFCURVE",
"8 1530 QCURVE",
"-270 1530 LINE",
"-270 1560 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"62 1850 LINE",
"62 1658 LINE",
"22 1684 OFFCURVE",
"-20 1708 QCURVE",
"-20 1900 LINE",
"-158 1900 LINE",
"-158 1771 LINE",
"-247 1800 OFFCURVE",
"-310 1800 QCURVE SMOOTH",
"-470 1800 OFFCURVE",
"-580 1650 OFFCURVE",
"-580 1550 QCURVE SMOOTH",
"-580 1350 OFFCURVE",
"-480 1350 QCURVE SMOOTH",
"0 1350 LINE SMOOTH",
"100 1350 OFFCURVE",
"100 1210 QCURVE SMOOTH",
"100 -560 LINE SMOOTH",
"100 -630 OFFCURVE",
"0 -630 QCURVE SMOOTH",
"-100 -630 OFFCURVE",
"-100 -560 QCURVE SMOOTH",
"-100 -520 LINE",
"-488 -520 LINE",
"-488 -560 LINE SMOOTH",
"-488 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"488 -800 OFFCURVE",
"488 -560 QCURVE SMOOTH",
"488 1210 LINE SMOOTH",
"488 1383 OFFCURVE",
"250 1550 QCURVE",
"250 1850 LINE"
);
}
);
width = 588;
}
);
note = uni17BF.b;
},
{
glyphname = uni17C0.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"280 -750 OFFCURVE",
"15 -750 QCURVE SMOOTH",
"-250 -750 OFFCURVE",
"-250 -580 QCURVE SMOOTH",
"-250 -500 LINE",
"-308 -500 LINE",
"-308 -580 LINE SMOOTH",
"-308 -800 OFFCURVE",
"15 -800 QCURVE SMOOTH",
"338 -800 OFFCURVE",
"338 -580 QCURVE SMOOTH",
"338 1250 LINE SMOOTH",
"338 1600 OFFCURVE",
"0 1600 QCURVE SMOOTH",
"-165 1600 OFFCURVE",
"-250 1502 QCURVE",
"-250 1900 LINE",
"-308 1900 LINE",
"-308 1400 LINE",
"-260 1400 LINE",
"-180 1550 OFFCURVE",
"0 1550 QCURVE SMOOTH",
"280 1550 OFFCURVE",
"280 1250 QCURVE SMOOTH",
"280 -580 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"250 -710 OFFCURVE",
"10 -710 QCURVE SMOOTH",
"-230 -710 OFFCURVE",
"-230 -560 QCURVE SMOOTH",
"-230 -500 LINE",
"-338 -500 LINE",
"-338 -560 LINE SMOOTH",
"-338 -800 OFFCURVE",
"10 -800 QCURVE SMOOTH",
"358 -800 OFFCURVE",
"358 -560 QCURVE SMOOTH",
"358 1250 LINE SMOOTH",
"358 1610 OFFCURVE",
"0 1610 QCURVE SMOOTH",
"-145 1610 OFFCURVE",
"-230 1532 QCURVE",
"-230 1900 LINE",
"-338 1900 LINE",
"-338 1400 LINE",
"-260 1400 LINE",
"-180 1530 OFFCURVE",
"0 1530 QCURVE SMOOTH",
"250 1530 OFFCURVE",
"250 1250 QCURVE SMOOTH",
"250 -560 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"0 -660 QCURVE SMOOTH",
"-200 -660 OFFCURVE",
"-200 -560 QCURVE SMOOTH",
"-200 -500 LINE",
"-388 -500 LINE",
"-388 -560 LINE SMOOTH",
"-388 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"388 -800 OFFCURVE",
"388 -560 QCURVE SMOOTH",
"388 1250 LINE SMOOTH",
"388 1610 OFFCURVE",
"0 1610 QCURVE SMOOTH",
"-105 1610 OFFCURVE",
"-200 1552 QCURVE",
"-200 1900 LINE",
"-388 1900 LINE",
"-388 1400 LINE",
"-260 1400 LINE",
"-200 1480 OFFCURVE",
"0 1480 QCURVE SMOOTH",
"200 1480 OFFCURVE",
"200 1250 QCURVE SMOOTH",
"200 -560 LINE SMOOTH",
"200 -660 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0129 1 0 3 1 76 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 5 1 6 6 5 114 0 3 0 0 1 3 0 105 0 2 0 1 5 2 1 103 0 6 6 4 98 0 4 4 21 4 78 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 35 values pushed */\0120 5 1 6 1 5 6 128 0 3 0 0 1 3 0 105 0 2 0 1 5 2 1 103 0 6 6 4 98 0 4 4 21 4 78 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01234 18 35 34 17 17 34 7 7 29 \012CALL[ ]	/* CallFunction */";
};
width = 588;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"438 1610 OFFCURVE",
"70 1610 QCURVE SMOOTH",
"-75 1610 OFFCURVE",
"-150 1552 QCURVE",
"-150 1900 LINE",
"-438 1900 LINE",
"-438 1400 LINE",
"-210 1400 LINE",
"-150 1430 OFFCURVE",
"0 1430 QCURVE SMOOTH",
"150 1430 OFFCURVE",
"150 1250 QCURVE SMOOTH",
"150 -560 LINE SMOOTH",
"150 -660 OFFCURVE",
"0 -660 QCURVE SMOOTH",
"-150 -660 OFFCURVE",
"-150 -560 QCURVE SMOOTH",
"-150 -500 LINE",
"-438 -500 LINE",
"-438 -560 LINE SMOOTH",
"-438 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"438 -800 OFFCURVE",
"438 -560 QCURVE SMOOTH",
"438 1250 LINE SMOOTH"
);
}
);
width = 588;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"100 -630 OFFCURVE",
"0 -630 QCURVE SMOOTH",
"-100 -630 OFFCURVE",
"-100 -560 QCURVE SMOOTH",
"-100 -520 LINE",
"-488 -520 LINE",
"-488 -560 LINE SMOOTH",
"-488 -800 OFFCURVE",
"0 -800 QCURVE SMOOTH",
"488 -800 OFFCURVE",
"488 -560 QCURVE SMOOTH",
"488 1250 LINE SMOOTH",
"488 1660 OFFCURVE",
"70 1660 QCURVE SMOOTH",
"-25 1660 OFFCURVE",
"-100 1602 QCURVE",
"-100 1900 LINE",
"-488 1900 LINE",
"-488 1400 LINE",
"-160 1400 LINE",
"-100 1430 OFFCURVE",
"0 1430 QCURVE SMOOTH",
"100 1430 OFFCURVE",
"100 1250 QCURVE SMOOTH",
"100 -560 LINE SMOOTH"
);
}
);
width = 588;
}
);
note = uni17C0.b;
},
{
glyphname = uni17B7_17CD;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-313 1750 QCURVE SMOOTH",
"-281 1750 LINE SMOOTH",
"-80 1750 OFFCURVE",
"-80 1900 QCURVE",
"-130 1900 LINE",
"-130 1800 OFFCURVE",
"-281 1800 QCURVE SMOOTH",
"-313 1800 LINE SMOOTH",
"-432 1800 OFFCURVE",
"-449 1679 QCURVE",
"-479 1698 OFFCURVE",
"-510 1715 QCURVE SMOOTH",
"-651 1790 OFFCURVE",
"-770 1790 QCURVE SMOOTH",
"-1040 1790 OFFCURVE",
"-1040 1560 QCURVE SMOOTH",
"-1040 1450 OFFCURVE",
"-920 1450 QCURVE SMOOTH",
"-250 1450 LINE",
"-250 1500 LINE",
"-322 1584 OFFCURVE",
"-402 1645 QCURVE",
"-398 1750 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-404 1600 OFFCURVE",
"-310 1500 QCURVE",
"-920 1500 LINE SMOOTH",
"-990 1500 OFFCURVE",
"-990 1560 QCURVE SMOOTH",
"-990 1740 OFFCURVE",
"-770 1740 QCURVE SMOOTH",
"-660 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-263 1730 QCURVE SMOOTH",
"-40 1730 OFFCURVE",
"-40 1900 QCURVE",
"-128 1900 LINE",
"-128 1818 OFFCURVE",
"-263 1818 QCURVE SMOOTH",
"-426 1818 OFFCURVE",
"-462 1697 QCURVE",
"-486 1712 OFFCURVE",
"-510 1725 QCURVE SMOOTH",
"-651 1800 OFFCURVE",
"-770 1800 QCURVE SMOOTH",
"-1050 1800 OFFCURVE",
"-1050 1560 QCURVE SMOOTH",
"-1050 1420 OFFCURVE",
"-920 1420 QCURVE SMOOTH",
"-230 1420 LINE",
"-230 1508 LINE",
"-306 1585 OFFCURVE",
"-382 1642 QCURVE",
"-376 1730 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-474 1610 OFFCURVE",
"-362 1508 QCURVE",
"-920 1508 LINE SMOOTH",
"-962 1508 OFFCURVE",
"-962 1560 QCURVE SMOOTH",
"-962 1712 OFFCURVE",
"-770 1712 QCURVE SMOOTH",
"-710 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-384 1597 QCURVE",
"-372 1620 OFFCURVE",
"-343 1620 QCURVE SMOOTH",
"-100 1620 OFFCURVE",
"-100 1850 QCURVE SMOOTH",
"-100 1900 LINE",
"-247 1900 LINE",
"-247 1750 OFFCURVE",
"-343 1750 QCURVE SMOOTH",
"-456 1750 OFFCURVE",
"-504 1686 QCURVE",
"-534 1706 OFFCURVE",
"-565 1725 QCURVE SMOOTH",
"-691 1800 OFFCURVE",
"-790 1800 QCURVE SMOOTH",
"-890 1800 OFFCURVE",
"-1050 1650 OFFCURVE",
"-1050 1550 QCURVE SMOOTH",
"-1050 1400 OFFCURVE",
"-950 1400 QCURVE SMOOTH",
"-197 1400 LINE",
"-197 1510 LINE",
"-282 1510 OFFCURVE",
"-330 1519 QCURVE",
"-330 1550 LINE",
"-357 1574 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-830 1670 OFFCURVE",
"-790 1670 QCURVE SMOOTH",
"-730 1670 OFFCURVE",
"-682 1640 QCURVE SMOOTH",
"-638 1612 OFFCURVE",
"-539 1542 QCURVE",
"-539 1536 OFFCURVE",
"-538 1530 QCURVE",
"-900 1530 LINE",
"-900 1610 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\01214 1 7 3 24 1 0 3 0 5 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 15 values pushed */\01214 1 7 3 24 0 2 6 5 1 1 0 6 3 76 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 4 2 3 4 112 0 2 0 7 5 2 7 105 0 3 0 5 0 3 5 106 6 1 0 1 1 0 89 6 1 0 0 1 95 0 1 0 1 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 4 2 4 133 0 2 0 7 5 2 7 105 0 3 0 5 0 3 5 106 6 1 0 1 1 0 89 6 1 0 0 1 95 0 1 0 1 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 4 2 4 133 0 0 6 1 6 0 114 0 2 0 7 5 2 7 105 0 3 0 5 6 3 5 106 0 6 0 1 6 87 0 6 6 1 95 0 1 6 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01237 19 34 17 36 35 33 18 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-357 1574 OFFCURVE",
"-384 1597 QCURVE",
"-372 1620 OFFCURVE",
"-343 1620 QCURVE SMOOTH",
"-100 1620 OFFCURVE",
"-100 1850 QCURVE SMOOTH",
"-100 1900 LINE",
"-297 1900 LINE",
"-297 1800 OFFCURVE",
"-343 1800 QCURVE SMOOTH",
"-456 1800 OFFCURVE",
"-504 1686 QCURVE",
"-534 1706 OFFCURVE",
"-565 1725 QCURVE SMOOTH",
"-691 1800 OFFCURVE",
"-790 1800 QCURVE SMOOTH",
"-1100 1800 OFFCURVE",
"-1100 1550 QCURVE SMOOTH",
"-1100 1400 OFFCURVE",
"-1000 1400 QCURVE SMOOTH",
"-197 1400 LINE",
"-197 1510 LINE",
"-282 1510 OFFCURVE",
"-330 1519 QCURVE",
"-330 1550 LINE"
);
},
{
closed = 1;
nodes = (
"-850 1640 OFFCURVE",
"-790 1640 QCURVE SMOOTH",
"-730 1640 OFFCURVE",
"-579 1542 QCURVE",
"-579 1536 OFFCURVE",
"-578 1530 QCURVE",
"-850 1530 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-267 1400 QCURVE SMOOTH",
"-202 1400 LINE",
"-202 1530 LINE",
"-267 1530 LINE SMOOTH",
"-312 1530 OFFCURVE",
"-312 1575 QCURVE SMOOTH",
"-312 1620 OFFCURVE",
"-243 1620 QCURVE SMOOTH",
"-20 1620 OFFCURVE",
"-20 1850 QCURVE SMOOTH",
"-20 1900 LINE",
"-267 1900 LINE",
"-267 1800 OFFCURVE",
"-353 1800 QCURVE SMOOTH",
"-509 1800 OFFCURVE",
"-570 1717 QCURVE",
"-577 1721 OFFCURVE",
"-583 1725 QCURVE SMOOTH",
"-705 1800 OFFCURVE",
"-836 1800 QCURVE SMOOTH",
"-1150 1800 OFFCURVE",
"-1150 1550 QCURVE SMOOTH",
"-1150 1400 OFFCURVE",
"-1063 1400 QCURVE SMOOTH",
"-364 1400 LINE",
"-364 1404 LINE",
"-320 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-682 1620 OFFCURVE",
"-594 1530 QCURVE",
"-914 1530 LINE",
"-914 1620 OFFCURVE",
"-828 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B7_17CD;
},
{
glyphname = uni17B7.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-720 1450 QCURVE SMOOTH",
"-50 1450 LINE",
"-50 1500 LINE",
"-170 1640 OFFCURVE",
"-451 1790 OFFCURVE",
"-570 1790 QCURVE SMOOTH",
"-840 1790 OFFCURVE",
"-840 1560 QCURVE SMOOTH",
"-840 1450 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-204 1600 OFFCURVE",
"-110 1500 QCURVE",
"-720 1500 LINE SMOOTH",
"-790 1500 OFFCURVE",
"-790 1560 QCURVE SMOOTH",
"-790 1740 OFFCURVE",
"-570 1740 QCURVE SMOOTH",
"-460 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-720 1420 QCURVE SMOOTH",
"-30 1420 LINE",
"-30 1508 LINE",
"-170 1650 OFFCURVE",
"-451 1800 OFFCURVE",
"-570 1800 QCURVE SMOOTH",
"-850 1800 OFFCURVE",
"-850 1560 QCURVE SMOOTH",
"-850 1420 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-274 1610 OFFCURVE",
"-162 1508 QCURVE",
"-720 1508 LINE SMOOTH",
"-762 1508 OFFCURVE",
"-762 1560 QCURVE SMOOTH",
"-762 1712 OFFCURVE",
"-570 1712 QCURVE SMOOTH",
"-510 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-712 1400 QCURVE SMOOTH",
"-50 1400 LINE",
"-50 1550 LINE",
"-147 1650 OFFCURVE",
"-271 1725 QCURVE SMOOTH",
"-395 1800 OFFCURVE",
"-526 1800 QCURVE SMOOTH",
"-659 1800 OFFCURVE",
"-800 1650 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-318 1610 OFFCURVE",
"-219 1530 QCURVE",
"-668 1530 LINE",
"-668 1610 OFFCURVE",
"-606 1670 OFFCURVE",
"-526 1670 QCURVE SMOOTH",
"-474 1670 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0127 1 3 2 1 76 0 0 4 1 2 3 0 2 105 0 3 1 1 3 87 0 3 3 1 95 0 1 3 1 79 12 11 15 14 11 17 12 17 36 34 5 7 24 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-667 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1550 LINE",
"-92 1650 OFFCURVE",
"-208 1725 QCURVE SMOOTH",
"-326 1800 OFFCURVE",
"-450 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE",
"-750 1550 QCURVE SMOOTH",
"-750 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-295 1620 OFFCURVE",
"-202 1530 QCURVE",
"-542 1530 LINE",
"-542 1620 OFFCURVE",
"-450 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-711 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1550 LINE",
"-98 1650 OFFCURVE",
"-222 1725 QCURVE SMOOTH",
"-347 1800 OFFCURVE",
"-480 1800 QCURVE SMOOTH",
"-800 1800 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-323 1620 OFFCURVE",
"-234 1530 QCURVE",
"-560 1530 LINE",
"-560 1620 OFFCURVE",
"-472 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B7.r;
},
{
glyphname = uni17B8.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-204 1600 OFFCURVE",
"-110 1500 QCURVE",
"-720 1500 LINE SMOOTH",
"-790 1500 OFFCURVE",
"-790 1560 QCURVE SMOOTH",
"-790 1740 OFFCURVE",
"-570 1740 QCURVE SMOOTH",
"-460 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-310 1715 QCURVE SMOOTH",
"-451 1790 OFFCURVE",
"-570 1790 QCURVE SMOOTH",
"-840 1790 OFFCURVE",
"-840 1560 QCURVE SMOOTH",
"-840 1450 OFFCURVE",
"-720 1450 QCURVE SMOOTH",
"-50 1450 LINE",
"-50 1850 LINE",
"-100 1850 LINE",
"-100 1555 LINE",
"-199 1655 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-274 1610 OFFCURVE",
"-162 1508 QCURVE",
"-720 1508 LINE SMOOTH",
"-762 1508 OFFCURVE",
"-762 1560 QCURVE SMOOTH",
"-762 1712 OFFCURVE",
"-570 1712 QCURVE SMOOTH",
"-510 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-310 1725 QCURVE SMOOTH",
"-451 1800 OFFCURVE",
"-570 1800 QCURVE SMOOTH",
"-850 1800 OFFCURVE",
"-850 1560 QCURVE SMOOTH",
"-850 1420 OFFCURVE",
"-720 1420 QCURVE SMOOTH",
"-30 1420 LINE",
"-30 1850 LINE",
"-118 1850 LINE",
"-118 1591 LINE",
"-214 1674 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-606 1670 OFFCURVE",
"-526 1670 QCURVE SMOOTH",
"-474 1670 OFFCURVE",
"-318 1610 OFFCURVE",
"-219 1530 QCURVE",
"-668 1530 LINE",
"-668 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-172 1658 LINE",
"-219 1694 OFFCURVE",
"-271 1725 QCURVE SMOOTH",
"-395 1800 OFFCURVE",
"-526 1800 QCURVE SMOOTH",
"-659 1800 OFFCURVE",
"-800 1650 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-712 1400 QCURVE SMOOTH",
"-50 1400 LINE",
"-50 1850 LINE",
"-172 1850 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01218 1 0 1 1 76 5 1 4 3 4 133 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 96 0 2 0 2 80 7 7 7 19 7 19 35 35 34 16 6 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-450 1620 QCURVE SMOOTH",
"-295 1620 OFFCURVE",
"-202 1530 QCURVE",
"-542 1530 LINE",
"-542 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-208 1725 QCURVE SMOOTH",
"-326 1800 OFFCURVE",
"-450 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE",
"-750 1550 QCURVE SMOOTH",
"-750 1400 OFFCURVE",
"-625 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1850 LINE",
"-187 1850 LINE",
"-187 1711 LINE",
"-197 1718 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-472 1620 QCURVE SMOOTH",
"-323 1620 OFFCURVE",
"-234 1530 QCURVE",
"-560 1530 LINE",
"-560 1620 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-222 1725 QCURVE SMOOTH",
"-347 1800 OFFCURVE",
"-480 1800 QCURVE SMOOTH",
"-800 1800 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-666 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1850 LINE",
"-167 1850 LINE",
"-167 1690 LINE",
"-194 1708 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17B8.r;
},
{
glyphname = uni17B9.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-210 1830 QCURVE SMOOTH",
"-100 1830 OFFCURVE",
"-100 1720 QCURVE SMOOTH",
"-100 1635 OFFCURVE",
"-166 1616 QCURVE",
"-235 1675 OFFCURVE",
"-310 1715 QCURVE SMOOTH",
"-315 1718 OFFCURVE",
"-320 1720 QCURVE",
"-320 1830 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-369 1744 QCURVE",
"-476 1790 OFFCURVE",
"-570 1790 QCURVE SMOOTH",
"-840 1790 OFFCURVE",
"-840 1560 QCURVE SMOOTH",
"-840 1450 OFFCURVE",
"-720 1450 QCURVE SMOOTH",
"-50 1450 LINE",
"-50 1500 LINE",
"-85 1541 OFFCURVE",
"-123 1577 QCURVE",
"-50 1612 OFFCURVE",
"-50 1720 QCURVE SMOOTH",
"-50 1880 OFFCURVE",
"-210 1880 QCURVE SMOOTH",
"-358 1880 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-204 1600 OFFCURVE",
"-110 1500 QCURVE",
"-720 1500 LINE SMOOTH",
"-790 1500 OFFCURVE",
"-790 1560 QCURVE SMOOTH",
"-790 1740 OFFCURVE",
"-570 1740 QCURVE SMOOTH",
"-460 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-210 1813 QCURVE SMOOTH",
"-117 1813 OFFCURVE",
"-117 1720 QCURVE SMOOTH",
"-117 1650 OFFCURVE",
"-170 1633 QCURVE",
"-236 1684 OFFCURVE",
"-303 1721 QCURVE",
"-303 1813 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-30 1720 QCURVE SMOOTH",
"-30 1900 OFFCURVE",
"-210 1900 QCURVE SMOOTH",
"-368 1900 OFFCURVE",
"-387 1761 QCURVE",
"-484 1800 OFFCURVE",
"-570 1800 QCURVE SMOOTH",
"-850 1800 OFFCURVE",
"-850 1560 QCURVE SMOOTH",
"-850 1420 OFFCURVE",
"-720 1420 QCURVE SMOOTH",
"-30 1420 LINE",
"-30 1508 LINE",
"-62 1540 OFFCURVE",
"-94 1569 QCURVE",
"-30 1613 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-274 1610 OFFCURVE",
"-162 1508 QCURVE",
"-720 1508 LINE SMOOTH",
"-762 1508 OFFCURVE",
"-762 1560 QCURVE SMOOTH",
"-762 1712 OFFCURVE",
"-570 1712 QCURVE SMOOTH",
"-510 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-606 1670 OFFCURVE",
"-526 1670 QCURVE SMOOTH",
"-474 1670 OFFCURVE",
"-318 1610 OFFCURVE",
"-219 1530 QCURVE",
"-668 1530 LINE",
"-668 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-73 1601 QCURVE SMOOTH",
"-50 1648 OFFCURVE",
"-50 1700 QCURVE SMOOTH",
"-50 1752 OFFCURVE",
"-99 1849 OFFCURVE",
"-183 1900 OFFCURVE",
"-228 1900 QCURVE SMOOTH",
"-273 1900 OFFCURVE",
"-358 1849 OFFCURVE",
"-382 1801 QCURVE SMOOTH",
"-387 1790 OFFCURVE",
"-391 1780 QCURVE",
"-458 1800 OFFCURVE",
"-526 1800 QCURVE SMOOTH",
"-659 1800 OFFCURVE",
"-800 1650 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-712 1400 QCURVE SMOOTH",
"-50 1400 LINE",
"-50 1550 LINE",
"-66 1567 OFFCURVE",
"-84 1583 QCURVE",
"-78 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-271 1725 QCURVE SMOOTH",
"-284 1733 OFFCURVE",
"-297 1740 QCURVE",
"-296 1742 OFFCURVE",
"-295 1744 QCURVE SMOOTH",
"-285 1764 OFFCURVE",
"-248 1787 OFFCURVE",
"-228 1787 QCURVE SMOOTH",
"-208 1787 OFFCURVE",
"-172 1764 OFFCURVE",
"-151 1723 OFFCURVE",
"-151 1700 QCURVE SMOOTH",
"-151 1677 OFFCURVE",
"-160 1657 QCURVE",
"-162 1654 OFFCURVE",
"-164 1651 QCURVE",
"-214 1691 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01242 18 2 1 5 9 7 2 0 1 2 76 0 4 0 5 1 4 5 105 0 3 0 1 0 3 1 105 0 0 2 2 0 87 0 0 0 2 95 0 2 0 2 79 46 37 35 37 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-22 1601 QCURVE SMOOTH",
"0 1648 OFFCURVE",
"0 1700 QCURVE SMOOTH",
"0 1752 OFFCURVE",
"-46 1849 OFFCURVE",
"-126 1900 OFFCURVE",
"-168 1900 QCURVE SMOOTH",
"-211 1900 OFFCURVE",
"-291 1849 OFFCURVE",
"-313 1801 QCURVE SMOOTH",
"-318 1790 OFFCURVE",
"-322 1780 QCURVE",
"-385 1800 OFFCURVE",
"-450 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE",
"-750 1550 QCURVE SMOOTH",
"-750 1400 OFFCURVE",
"-625 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1550 LINE",
"-15 1567 OFFCURVE",
"-32 1583 QCURVE",
"-27 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-208 1725 QCURVE SMOOTH",
"-221 1733 OFFCURVE",
"-233 1740 QCURVE",
"-232 1742 OFFCURVE",
"-232 1744 QCURVE",
"-222 1764 OFFCURVE",
"-187 1787 OFFCURVE",
"-168 1787 QCURVE SMOOTH",
"-149 1787 OFFCURVE",
"-115 1764 OFFCURVE",
"-95 1723 OFFCURVE",
"-95 1700 QCURVE SMOOTH",
"-95 1677 OFFCURVE",
"-104 1657 QCURVE",
"-106 1654 OFFCURVE",
"-107 1651 QCURVE",
"-155 1691 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-295 1620 OFFCURVE",
"-202 1530 QCURVE",
"-542 1530 LINE",
"-542 1620 OFFCURVE",
"-450 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-23 1601 QCURVE SMOOTH",
"0 1648 OFFCURVE",
"0 1700 QCURVE SMOOTH",
"0 1752 OFFCURVE",
"-49 1849 OFFCURVE",
"-134 1900 OFFCURVE",
"-179 1900 QCURVE SMOOTH",
"-225 1900 OFFCURVE",
"-310 1849 OFFCURVE",
"-334 1801 QCURVE SMOOTH",
"-339 1790 OFFCURVE",
"-344 1780 QCURVE",
"-410 1800 OFFCURVE",
"-480 1800 QCURVE SMOOTH",
"-800 1800 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-666 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1550 LINE",
"-16 1567 OFFCURVE",
"-34 1583 QCURVE",
"-29 1591 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-224 1725 QCURVE SMOOTH",
"-236 1733 OFFCURVE",
"-248 1740 QCURVE",
"-247 1742 OFFCURVE",
"-246 1744 QCURVE SMOOTH",
"-237 1764 OFFCURVE",
"-203 1787 OFFCURVE",
"-186 1787 QCURVE SMOOTH",
"-167 1787 OFFCURVE",
"-134 1764 OFFCURVE",
"-115 1723 OFFCURVE",
"-115 1700 QCURVE SMOOTH",
"-115 1677 OFFCURVE",
"-124 1657 QCURVE",
"-126 1654 OFFCURVE",
"-127 1651 QCURVE",
"-173 1691 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-323 1620 OFFCURVE",
"-234 1530 QCURVE",
"-560 1530 LINE",
"-560 1620 OFFCURVE",
"-472 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17B9.r;
},
{
glyphname = uni17BA.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-204 1600 OFFCURVE",
"-110 1500 QCURVE",
"-720 1500 LINE SMOOTH",
"-790 1500 OFFCURVE",
"-790 1560 QCURVE SMOOTH",
"-790 1740 OFFCURVE",
"-570 1740 QCURVE SMOOTH",
"-460 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-330 1880 LINE",
"-330 1725 LINE",
"-459 1790 OFFCURVE",
"-570 1790 QCURVE SMOOTH",
"-840 1790 OFFCURVE",
"-840 1560 QCURVE SMOOTH",
"-840 1450 OFFCURVE",
"-720 1450 QCURVE SMOOTH",
"-50 1450 LINE",
"-50 1850 LINE",
"-100 1850 LINE",
"-100 1555 LINE",
"-186 1641 OFFCURVE",
"-280 1698 QCURVE",
"-280 1880 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-274 1610 OFFCURVE",
"-162 1508 QCURVE",
"-720 1508 LINE SMOOTH",
"-762 1508 OFFCURVE",
"-762 1560 QCURVE SMOOTH",
"-762 1712 OFFCURVE",
"-570 1712 QCURVE SMOOTH",
"-510 1712 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-348 1900 LINE",
"-348 1744 LINE",
"-467 1800 OFFCURVE",
"-570 1800 QCURVE SMOOTH",
"-850 1800 OFFCURVE",
"-850 1560 QCURVE SMOOTH",
"-850 1420 OFFCURVE",
"-720 1420 QCURVE SMOOTH",
"-30 1420 LINE",
"-30 1850 LINE",
"-118 1850 LINE",
"-118 1591 LINE",
"-189 1652 OFFCURVE",
"-260 1696 QCURVE",
"-260 1900 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-606 1670 OFFCURVE",
"-526 1670 QCURVE SMOOTH",
"-474 1670 OFFCURVE",
"-318 1610 OFFCURVE",
"-219 1530 QCURVE",
"-668 1530 LINE",
"-668 1610 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-526 1800 QCURVE SMOOTH",
"-659 1800 OFFCURVE",
"-800 1650 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-712 1400 QCURVE SMOOTH",
"-50 1400 LINE",
"-50 1850 LINE",
"-172 1850 LINE",
"-172 1658 LINE",
"-207 1684 OFFCURVE",
"-244 1708 QCURVE",
"-244 1900 LINE",
"-366 1900 LINE",
"-366 1771 LINE",
"-444 1800 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01210 7 2 1 5 12 1 0 1 2 76 0 2 3 2 133 0 3 5 3 133 0 5 0 1 0 5 1 105 0 0 4 4 0 87 0 0 0 4 96 0 4 0 4 80 35 33 20 19 34 16 6 7 28 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-450 1800 QCURVE SMOOTH",
"-750 1800 OFFCURVE",
"-750 1550 QCURVE SMOOTH",
"-750 1400 OFFCURVE",
"-625 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1850 LINE",
"-115 1850 LINE",
"-115 1658 LINE",
"-148 1684 OFFCURVE",
"-183 1708 QCURVE",
"-183 1900 LINE",
"-298 1900 LINE",
"-298 1771 LINE",
"-372 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-295 1620 OFFCURVE",
"-202 1530 QCURVE",
"-542 1530 LINE",
"-542 1620 OFFCURVE",
"-450 1620 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-480 1800 QCURVE SMOOTH",
"-800 1800 OFFCURVE",
"-800 1550 QCURVE SMOOTH",
"-800 1400 OFFCURVE",
"-666 1400 QCURVE SMOOTH",
"0 1400 LINE",
"0 1850 LINE",
"-122 1850 LINE",
"-122 1658 LINE",
"-158 1684 OFFCURVE",
"-195 1708 QCURVE",
"-195 1900 LINE",
"-318 1900 LINE",
"-318 1771 LINE",
"-398 1800 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-323 1620 OFFCURVE",
"-234 1530 QCURVE",
"-560 1530 LINE",
"-560 1620 OFFCURVE",
"-472 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17BA.r;
},
{
glyphname = uni17C6.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-290 1698 OFFCURVE",
"-245 1617 OFFCURVE",
"-245 1575 QCURVE SMOOTH",
"-245 1533 OFFCURVE",
"-287 1452 OFFCURVE",
"-368 1410 OFFCURVE",
"-410 1410 QCURVE SMOOTH",
"-452 1410 OFFCURVE",
"-530 1452 OFFCURVE",
"-575 1533 OFFCURVE",
"-575 1575 QCURVE SMOOTH",
"-575 1617 OFFCURVE",
"-530 1698 OFFCURVE",
"-452 1740 OFFCURVE",
"-410 1740 QCURVE SMOOTH",
"-368 1740 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-567 1735 OFFCURVE",
"-625 1631 OFFCURVE",
"-625 1575 QCURVE SMOOTH",
"-625 1519 OFFCURVE",
"-568 1416 OFFCURVE",
"-465 1360 OFFCURVE",
"-410 1360 QCURVE SMOOTH",
"-354 1360 OFFCURVE",
"-251 1416 OFFCURVE",
"-195 1519 OFFCURVE",
"-195 1575 QCURVE SMOOTH",
"-195 1631 OFFCURVE",
"-253 1735 OFFCURVE",
"-356 1790 OFFCURVE",
"-410 1790 QCURVE SMOOTH",
"-464 1790 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-310 1627 OFFCURVE",
"-273 1560 OFFCURVE",
"-273 1525 QCURVE SMOOTH",
"-273 1490 OFFCURVE",
"-308 1423 OFFCURVE",
"-375 1388 OFFCURVE",
"-410 1388 QCURVE SMOOTH",
"-445 1388 OFFCURVE",
"-510 1423 OFFCURVE",
"-547 1490 OFFCURVE",
"-547 1525 QCURVE SMOOTH",
"-547 1560 OFFCURVE",
"-510 1627 OFFCURVE",
"-445 1662 OFFCURVE",
"-410 1662 QCURVE SMOOTH",
"-375 1662 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-574 1692 OFFCURVE",
"-635 1584 OFFCURVE",
"-635 1525 QCURVE SMOOTH",
"-635 1466 OFFCURVE",
"-575 1359 OFFCURVE",
"-468 1300 OFFCURVE",
"-410 1300 QCURVE SMOOTH",
"-351 1300 OFFCURVE",
"-244 1359 OFFCURVE",
"-185 1466 OFFCURVE",
"-185 1525 QCURVE SMOOTH",
"-185 1584 OFFCURVE",
"-246 1692 OFFCURVE",
"-353 1750 OFFCURVE",
"-410 1750 QCURVE SMOOTH",
"-467 1750 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-314 1592 OFFCURVE",
"-290 1548 OFFCURVE",
"-290 1525 QCURVE SMOOTH",
"-290 1502 OFFCURVE",
"-313 1458 OFFCURVE",
"-357 1435 OFFCURVE",
"-380 1435 QCURVE SMOOTH",
"-403 1435 OFFCURVE",
"-446 1458 OFFCURVE",
"-470 1502 OFFCURVE",
"-470 1525 QCURVE SMOOTH",
"-470 1548 OFFCURVE",
"-446 1592 OFFCURVE",
"-403 1615 OFFCURVE",
"-380 1615 QCURVE SMOOTH",
"-357 1615 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-544 1692 OFFCURVE",
"-605 1584 OFFCURVE",
"-605 1525 QCURVE SMOOTH",
"-605 1466 OFFCURVE",
"-545 1359 OFFCURVE",
"-438 1300 OFFCURVE",
"-380 1300 QCURVE SMOOTH",
"-321 1300 OFFCURVE",
"-214 1359 OFFCURVE",
"-155 1466 OFFCURVE",
"-155 1525 QCURVE SMOOTH",
"-155 1584 OFFCURVE",
"-216 1692 OFFCURVE",
"-323 1750 OFFCURVE",
"-380 1750 QCURVE SMOOTH",
"-437 1750 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0125 1 2 4 1 0 1 2 0 105 0 1 3 3 1 89 0 1 1 3 97 0 3 1 3 81 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 7 22 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-318 1458 QCURVE SMOOTH",
"-331 1452 OFFCURVE",
"-346 1452 QCURVE SMOOTH",
"-352 1452 OFFCURVE",
"-359 1453 QCURVE SMOOTH",
"-383 1457 OFFCURVE",
"-402 1469 QCURVE SMOOTH",
"-422 1480 OFFCURVE",
"-452 1517 OFFCURVE",
"-454 1536 QCURVE SMOOTH",
"-454 1544 LINE SMOOTH",
"-454 1559 OFFCURVE",
"-448 1570 QCURVE SMOOTH",
"-440 1584 OFFCURVE",
"-422 1592 QCURVE SMOOTH",
"-409 1598 OFFCURVE",
"-394 1598 QCURVE SMOOTH",
"-388 1598 OFFCURVE",
"-380 1596 QCURVE SMOOTH",
"-357 1593 OFFCURVE",
"-338 1581 QCURVE SMOOTH",
"-318 1570 OFFCURVE",
"-288 1533 OFFCURVE",
"-286 1513 QCURVE SMOOTH",
"-286 1506 LINE SMOOTH",
"-286 1491 OFFCURVE",
"-292 1480 QCURVE SMOOTH",
"-300 1466 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-552 1692 OFFCURVE",
"-620 1584 OFFCURVE",
"-620 1525 QCURVE SMOOTH",
"-620 1466 OFFCURVE",
"-553 1359 OFFCURVE",
"-434 1300 OFFCURVE",
"-370 1300 QCURVE SMOOTH",
"-304 1300 OFFCURVE",
"-186 1359 OFFCURVE",
"-120 1466 OFFCURVE",
"-120 1525 QCURVE SMOOTH",
"-120 1584 OFFCURVE",
"-188 1692 OFFCURVE",
"-307 1750 OFFCURVE",
"-370 1750 QCURVE SMOOTH",
"-433 1750 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-298 1488 QCURVE SMOOTH",
"-311 1482 OFFCURVE",
"-326 1482 QCURVE SMOOTH",
"-332 1482 OFFCURVE",
"-339 1483 QCURVE SMOOTH",
"-363 1487 OFFCURVE",
"-382 1499 QCURVE SMOOTH",
"-402 1510 OFFCURVE",
"-432 1547 OFFCURVE",
"-434 1566 QCURVE SMOOTH",
"-434 1574 LINE SMOOTH",
"-434 1589 OFFCURVE",
"-428 1600 QCURVE SMOOTH",
"-420 1614 OFFCURVE",
"-402 1622 QCURVE SMOOTH",
"-389 1628 OFFCURVE",
"-374 1628 QCURVE SMOOTH",
"-368 1628 OFFCURVE",
"-360 1626 QCURVE SMOOTH",
"-337 1623 OFFCURVE",
"-318 1611 QCURVE SMOOTH",
"-298 1600 OFFCURVE",
"-268 1563 OFFCURVE",
"-266 1543 QCURVE SMOOTH",
"-266 1536 LINE SMOOTH",
"-266 1521 OFFCURVE",
"-272 1510 QCURVE SMOOTH",
"-280 1496 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-568 1722 OFFCURVE",
"-650 1614 OFFCURVE",
"-650 1555 QCURVE SMOOTH",
"-650 1496 OFFCURVE",
"-570 1389 OFFCURVE",
"-427 1330 OFFCURVE",
"-350 1330 QCURVE SMOOTH",
"-271 1330 OFFCURVE",
"-129 1389 OFFCURVE",
"-50 1496 OFFCURVE",
"-50 1555 QCURVE SMOOTH",
"-50 1614 OFFCURVE",
"-132 1722 OFFCURVE",
"-274 1780 OFFCURVE",
"-350 1780 QCURVE SMOOTH",
"-426 1780 OFFCURVE"
);
}
);
width = 0;
}
);
note = uni17C6.r;
},
{
glyphname = uni17C9.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-580 1350 LINE",
"-530 1350 LINE",
"-530 1750 LINE",
"-580 1750 LINE"
);
},
{
closed = 1;
nodes = (
"-270 1350 LINE",
"-220 1350 LINE",
"-220 1750 LINE",
"-270 1750 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-599 1300 LINE",
"-511 1300 LINE",
"-511 1700 LINE",
"-599 1700 LINE"
);
},
{
closed = 1;
nodes = (
"-289 1300 LINE",
"-201 1300 LINE",
"-201 1700 LINE",
"-289 1700 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-600 1300 LINE",
"-450 1300 LINE",
"-450 1700 LINE",
"-600 1700 LINE"
);
},
{
closed = 1;
nodes = (
"-290 1300 LINE",
"-140 1300 LINE",
"-140 1700 LINE",
"-290 1700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0125 3 4 3 1 0 0 1 87 5 3 4 3 1 1 0 95 2 1 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 7 23 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-440 1700 LINE",
"-640 1700 LINE",
"-640 1300 LINE",
"-440 1300 LINE"
);
},
{
closed = 1;
nodes = (
"-80 1700 LINE",
"-280 1700 LINE",
"-280 1300 LINE",
"-80 1300 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-430 1700 LINE",
"-730 1700 LINE",
"-730 1300 LINE",
"-430 1300 LINE"
);
},
{
closed = 1;
nodes = (
"30 1700 LINE",
"-270 1700 LINE",
"-270 1300 LINE",
"30 1300 LINE"
);
}
);
width = 0;
}
);
note = uni17C9.r;
},
{
glyphname = uni17CD.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-453 1640 QCURVE SMOOTH",
"-311 1640 LINE SMOOTH",
"-20 1640 OFFCURVE",
"-20 1850 QCURVE",
"-70 1850 LINE",
"-70 1690 OFFCURVE",
"-311 1690 QCURVE SMOOTH",
"-453 1690 LINE SMOOTH",
"-652 1690 OFFCURVE",
"-652 1535 QCURVE SMOOTH",
"-652 1380 OFFCURVE",
"-477 1380 QCURVE SMOOTH",
"-412 1380 LINE",
"-412 1430 LINE",
"-477 1430 LINE SMOOTH",
"-602 1430 OFFCURVE",
"-602 1535 QCURVE SMOOTH",
"-602 1640 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-413 1570 QCURVE SMOOTH",
"-301 1570 LINE SMOOTH",
"-10 1570 OFFCURVE",
"-10 1800 QCURVE",
"-98 1800 LINE",
"-98 1658 OFFCURVE",
"-301 1658 QCURVE SMOOTH",
"-413 1658 LINE SMOOTH",
"-650 1658 OFFCURVE",
"-650 1475 QCURVE SMOOTH",
"-650 1310 OFFCURVE",
"-437 1310 QCURVE SMOOTH",
"-372 1310 LINE",
"-372 1398 LINE",
"-437 1398 LINE SMOOTH",
"-562 1398 OFFCURVE",
"-562 1475 QCURVE SMOOTH",
"-562 1570 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-333 1520 QCURVE SMOOTH",
"0 1520 OFFCURVE",
"0 1750 QCURVE SMOOTH",
"0 1800 LINE",
"-147 1800 LINE",
"-147 1650 OFFCURVE",
"-333 1650 QCURVE SMOOTH",
"-600 1650 OFFCURVE",
"-600 1455 QCURVE SMOOTH",
"-600 1300 OFFCURVE",
"-357 1300 QCURVE SMOOTH",
"-292 1300 LINE",
"-292 1410 LINE",
"-357 1410 LINE SMOOTH",
"-452 1410 OFFCURVE",
"-452 1455 QCURVE SMOOTH",
"-452 1520 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0120 3 2 2 3 112 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 2 3 133 0 2 0 4 0 2 4 106 0 0 1 1 0 89 0 0 0 1 97 0 1 0 1 81 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01234 17 34 33 33 5 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-352 1520 OFFCURVE",
"-283 1520 QCURVE SMOOTH",
"0 1520 OFFCURVE",
"0 1750 QCURVE SMOOTH",
"0 1800 LINE",
"-197 1800 LINE",
"-197 1700 OFFCURVE",
"-333 1700 QCURVE SMOOTH",
"-600 1700 OFFCURVE",
"-600 1475 QCURVE SMOOTH",
"-600 1300 OFFCURVE",
"-307 1300 QCURVE SMOOTH",
"-242 1300 LINE",
"-242 1430 LINE",
"-307 1430 LINE SMOOTH",
"-352 1430 OFFCURVE",
"-352 1475 QCURVE SMOOTH"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-462 1550 OFFCURVE",
"-393 1550 QCURVE SMOOTH",
"-331 1550 LINE SMOOTH",
"30 1550 OFFCURVE",
"30 1780 QCURVE SMOOTH",
"30 1830 LINE",
"-217 1830 LINE",
"-217 1730 OFFCURVE",
"-331 1730 QCURVE SMOOTH",
"-443 1730 LINE SMOOTH",
"-760 1730 OFFCURVE",
"-760 1505 QCURVE SMOOTH",
"-760 1330 OFFCURVE",
"-417 1330 QCURVE SMOOTH",
"-352 1330 LINE",
"-352 1460 LINE",
"-417 1460 LINE SMOOTH",
"-462 1460 OFFCURVE",
"-462 1505 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = uni17CD.r;
},
{
glyphname = iMark_17CDkhmer.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-113 1750 QCURVE SMOOTH",
"-81 1750 LINE SMOOTH",
"120 1750 OFFCURVE",
"120 1900 QCURVE",
"70 1900 LINE",
"70 1800 OFFCURVE",
"-81 1800 QCURVE SMOOTH",
"-113 1800 LINE SMOOTH",
"-232 1800 OFFCURVE",
"-249 1679 QCURVE",
"-279 1698 OFFCURVE",
"-310 1715 QCURVE SMOOTH",
"-451 1790 OFFCURVE",
"-570 1790 QCURVE SMOOTH",
"-840 1790 OFFCURVE",
"-840 1560 QCURVE SMOOTH",
"-840 1450 OFFCURVE",
"-720 1450 QCURVE SMOOTH",
"-50 1450 LINE",
"-50 1500 LINE",
"-122 1584 OFFCURVE",
"-202 1645 QCURVE",
"-198 1750 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-204 1600 OFFCURVE",
"-110 1500 QCURVE",
"-720 1500 LINE SMOOTH",
"-790 1500 OFFCURVE",
"-790 1560 QCURVE SMOOTH",
"-790 1740 OFFCURVE",
"-570 1740 QCURVE SMOOTH",
"-460 1740 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-63 1730 QCURVE SMOOTH",
"160 1730 OFFCURVE",
"160 1900 QCURVE",
"72 1900 LINE",
"72 1818 OFFCURVE",
"-63 1818 QCURVE SMOOTH",
"-226 1818 OFFCURVE",
"-262 1697 QCURVE",
"-286 1712 OFFCURVE",
"-310 1725 QCURVE SMOOTH",
"-451 1800 OFFCURVE",
"-570 1800 QCURVE SMOOTH",
"-850 1800 OFFCURVE",
"-850 1560 QCURVE SMOOTH",
"-850 1420 OFFCURVE",
"-720 1420 QCURVE SMOOTH",
"-30 1420 LINE",
"-30 1508 LINE",
"-106 1585 OFFCURVE",
"-182 1642 QCURVE",
"-176 1730 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-274 1610 OFFCURVE",
"-162 1508 QCURVE",
"-720 1508 LINE SMOOTH",
"-762 1508 OFFCURVE",
"-762 1560 QCURVE SMOOTH",
"-762 1712 OFFCURVE",
"-570 1712 QCURVE SMOOTH",
"-510 1712 OFFCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-205 1597 QCURVE",
"-194 1620 OFFCURVE",
"-168 1620 QCURVE SMOOTH",
"50 1620 OFFCURVE",
"50 1850 QCURVE SMOOTH",
"50 1900 LINE",
"-82 1900 LINE",
"-82 1750 OFFCURVE",
"-168 1750 QCURVE SMOOTH",
"-269 1750 OFFCURVE",
"-312 1686 QCURVE",
"-339 1706 OFFCURVE",
"-367 1725 QCURVE SMOOTH",
"-480 1800 OFFCURVE",
"-569 1800 QCURVE SMOOTH",
"-659 1800 OFFCURVE",
"-802 1650 OFFCURVE",
"-802 1550 QCURVE SMOOTH",
"-802 1400 OFFCURVE",
"-712 1400 QCURVE SMOOTH",
"-37 1400 LINE",
"-37 1510 LINE",
"-113 1510 OFFCURVE",
"-156 1519 QCURVE",
"-156 1550 LINE",
"-180 1574 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-605 1670 OFFCURVE",
"-569 1670 QCURVE SMOOTH",
"-515 1670 OFFCURVE",
"-472 1640 QCURVE SMOOTH",
"-433 1612 OFFCURVE",
"-344 1542 QCURVE",
"-344 1536 OFFCURVE",
"-343 1530 QCURVE",
"-667 1530 LINE",
"-667 1610 OFFCURVE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\01214 1 7 3 24 1 0 3 0 5 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 15 values pushed */\01214 1 7 3 24 0 2 6 5 1 1 0 6 3 76 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01216 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 40 values pushed */\0120 4 2 3 4 112 0 2 0 7 5 2 7 105 0 3 0 5 0 3 5 106 6 1 0 1 1 0 89 6 1 0 0 1 95 0 1 0 1 79 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 39 values pushed */\0120 4 2 4 133 0 2 0 7 5 2 7 105 0 3 0 5 0 3 5 106 6 1 0 1 1 0 89 6 1 0 0 1 95 0 1 0 1 79 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 44 values pushed */\0120 4 2 4 133 0 0 6 1 6 0 114 0 2 0 7 5 2 7 105 0 3 0 5 6 3 5 106 0 6 0 1 6 87 0 6 6 1 95 0 1 6 1 79 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 11 values pushed */\01237 19 34 17 36 35 33 18 8 7 30 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-106 1574 OFFCURVE",
"-127 1597 QCURVE",
"-118 1620 OFFCURVE",
"-94 1620 QCURVE SMOOTH",
"100 1620 OFFCURVE",
"100 1850 QCURVE SMOOTH",
"100 1900 LINE",
"-58 1900 LINE",
"-58 1800 OFFCURVE",
"-94 1800 QCURVE SMOOTH",
"-185 1800 OFFCURVE",
"-223 1686 QCURVE",
"-247 1706 OFFCURVE",
"-272 1725 QCURVE SMOOTH",
"-373 1800 OFFCURVE",
"-452 1800 QCURVE SMOOTH",
"-700 1800 OFFCURVE",
"-700 1550 QCURVE SMOOTH",
"-700 1400 OFFCURVE",
"-620 1400 QCURVE SMOOTH",
"22 1400 LINE",
"22 1510 LINE",
"-46 1510 OFFCURVE",
"-84 1519 QCURVE",
"-84 1550 LINE"
);
},
{
closed = 1;
nodes = (
"-500 1640 OFFCURVE",
"-452 1640 QCURVE SMOOTH",
"-404 1640 OFFCURVE",
"-283 1542 QCURVE",
"-283 1536 OFFCURVE",
"-282 1530 QCURVE",
"-500 1530 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-118 1400 QCURVE SMOOTH",
"-66 1400 LINE",
"-66 1530 LINE",
"-118 1530 LINE SMOOTH",
"-154 1530 OFFCURVE",
"-154 1575 QCURVE SMOOTH",
"-154 1620 OFFCURVE",
"-99 1620 QCURVE SMOOTH",
"80 1620 OFFCURVE",
"80 1850 QCURVE SMOOTH",
"80 1900 LINE",
"-118 1900 LINE",
"-118 1800 OFFCURVE",
"-187 1800 QCURVE SMOOTH",
"-312 1800 OFFCURVE",
"-362 1717 QCURVE",
"-367 1721 OFFCURVE",
"-372 1725 QCURVE SMOOTH",
"-470 1800 OFFCURVE",
"-575 1800 QCURVE SMOOTH",
"-827 1800 OFFCURVE",
"-827 1550 QCURVE SMOOTH",
"-827 1400 OFFCURVE",
"-757 1400 QCURVE SMOOTH",
"-196 1400 LINE",
"-196 1404 LINE",
"-160 1400 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"-451 1620 OFFCURVE",
"-380 1530 QCURVE",
"-638 1530 LINE",
"-638 1620 OFFCURVE",
"-568 1620 QCURVE SMOOTH"
);
}
);
width = 0;
}
);
note = iMark_17CDkhmer.r;
},
{
glyphname = coeng_178Akhmer.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, -630, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_178Akhmer.n;
},
{
glyphname = coeng_178Bkhmer.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_178B;
transform = "{1, 0, 0, 1, -622, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_178B;
transform = "{1, 0, 0, 1, -622, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_178B;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_178B;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_178B;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_178Bkhmer.n;
},
{
glyphname = coeng_178Ckhmer.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_178C;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_178C;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_178C;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_178C;
transform = "{1, 0, 0, 1, -630, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_178C;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_178Ckhmer.n;
},
{
glyphname = coeng_17A0khmer.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_17A0;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_17A0;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_17A0;
transform = "{1, 0, 0, 1, -610, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_17A0;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_17A0;
transform = "{1, 0, 0, 1, -620, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_17A0khmer.n;
},
{
glyphname = coeng_178Akhmer.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_178A;
transform = "{1, 0, 0, 1, 200, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_178Akhmer.r;
},
{
glyphname = coeng_1797khmer.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_1797;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_1797;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_1797;
transform = "{1, 0, 0, 1, 250, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_1797;
transform = "{1, 0, 0, 1, 230, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_1797;
transform = "{1, 0, 0, 1, 200, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_1797khmer.r;
},
{
glyphname = coeng_1798khmer.r;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17D2_1798;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17D2_1798;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17D2_1798;
transform = "{1, 0, 0, 1, 240, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17D2_1798;
transform = "{1, 0, 0, 1, 210, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17D2_1798;
transform = "{1, 0, 0, 1, 190, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = coeng_1798khmer.r;
},
{
glyphname = uni17BB.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BB;
transform = "{1, 0, 0, 1, -710, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BB;
transform = "{1, 0, 0, 1, -680, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BB;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BB;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BB;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BB.n;
},
{
glyphname = uni17BC.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BC;
transform = "{1, 0, 0, 1, -730, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BC;
transform = "{1, 0, 0, 1, -680, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BC;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BC;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BC;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BC.n;
},
{
glyphname = uni17BD.n;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BD;
transform = "{1, 0, 0, 1, -730, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BD;
transform = "{1, 0, 0, 1, -680, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BD;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BD;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BD;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BD.n;
},
{
glyphname = uni17BB.n2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BB.b;
transform = "{1, 0, 0, 1, -700, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BB.b;
transform = "{1, 0, 0, 1, -670, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BB.b;
transform = "{1, 0, 0, 1, -600, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BB.b;
transform = "{1, 0, 0, 1, -600, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BB.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BB.n2;
},
{
glyphname = uni17BC.n2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BC.b;
transform = "{1, 0, 0, 1, -700, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BC.b;
transform = "{1, 0, 0, 1, -660, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BC.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BC.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BC.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BC.n2;
},
{
glyphname = uni17BD.n2;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
components = (
{
name = uni17BD.b;
transform = "{1, 0, 0, 1, -740, 0}";
}
);
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
width = 0;
},
{
components = (
{
name = uni17BD.b;
transform = "{1, 0, 0, 1, -660, 0}";
}
);
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
width = 0;
},
{
components = (
{
name = uni17BD.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
width = 0;
},
{
components = (
{
name = uni17BD.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
width = 0;
},
{
components = (
{
name = uni17BD.b;
transform = "{1, 0, 0, 1, -650, 0}";
}
);
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
width = 0;
}
);
note = uni17BD.n2;
},
{
glyphname = coeng_1798khmer.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-358 -647 LINE",
"-358 -810 OFFCURVE",
"-235 -810 QCURVE SMOOTH",
"-120 -810 OFFCURVE",
"-120 -703 QCURVE SMOOTH",
"-120 -597 OFFCURVE",
"-255 -597 QCURVE SMOOTH",
"-293 -597 LINE",
"-293 -490 LINE",
"-358 -490 LINE",
"-358 -597 LINE",
"-1080 -597 LINE",
"-1080 -647 LINE"
);
},
{
closed = 1;
nodes = (
"-255 -647 LINE SMOOTH",
"-178 -647 OFFCURVE",
"-178 -703 QCURVE SMOOTH",
"-178 -760 OFFCURVE",
"-235 -760 QCURVE SMOOTH",
"-293 -760 OFFCURVE",
"-293 -647 QCURVE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-377 -658 LINE",
"-377 -800 OFFCURVE",
"-240 -800 QCURVE SMOOTH",
"-120 -800 OFFCURVE",
"-120 -689 QCURVE SMOOTH",
"-120 -578 OFFCURVE",
"-273 -578 QCURVE",
"-273 -498 LINE",
"-377 -498 LINE",
"-377 -578 LINE",
"-1080 -578 LINE",
"-1080 -658 LINE"
);
},
{
closed = 1;
nodes = (
"-208 -658 OFFCURVE",
"-208 -689 QCURVE SMOOTH",
"-208 -720 OFFCURVE",
"-240 -720 QCURVE SMOOTH",
"-273 -720 OFFCURVE",
"-273 -658 QCURVE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-401 -708 LINE",
"-395 -800 OFFCURVE",
"-257 -800 QCURVE SMOOTH",
"-120 -800 OFFCURVE",
"-120 -708 QCURVE SMOOTH",
"-120 -663 OFFCURVE",
"-164 -605 OFFCURVE",
"-243 -585 QCURVE",
"-243 -432 LINE",
"-406 -432 LINE",
"-406 -585 LINE",
"-1100 -585 LINE",
"-1100 -708 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0124 1 0 1 75 0 0 0 3 2 0 3 103 0 1 1 2 97 0 2 2 21 2 78 17 37 17 16 4 7 26 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1150 -715 LINE",
"-451 -715 LINE",
"-445 -800 OFFCURVE",
"-257 -800 QCURVE SMOOTH",
"-70 -800 OFFCURVE",
"-70 -684 QCURVE SMOOTH",
"-70 -564 OFFCURVE",
"-193 -564 QCURVE",
"-193 -460 LINE",
"-456 -460 LINE",
"-456 -564 LINE",
"-1150 -564 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1200 -715 LINE",
"-471 -715 LINE",
"-465 -800 OFFCURVE",
"-227 -800 QCURVE SMOOTH",
"10 -800 OFFCURVE",
"10 -684 QCURVE SMOOTH",
"10 -564 OFFCURVE",
"-113 -564 QCURVE",
"-113 -460 LINE",
"-476 -460 LINE",
"-476 -564 LINE",
"-1200 -564 LINE"
);
}
);
width = 0;
}
);
note = coeng_1798khmer.b;
},
{
glyphname = coeng_17A0khmer.b;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"-1050 -687 LINE SMOOTH",
"-1050 -732 OFFCURVE",
"-1013 -766 QCURVE SMOOTH",
"-976 -800 OFFCURVE",
"-903 -800 QCURVE SMOOTH",
"-625 -800 LINE",
"-625 -550 LINE",
"-397 -550 LINE SMOOTH",
"-308 -550 OFFCURVE",
"-308 -612 QCURVE SMOOTH",
"-308 -800 LINE",
"-250 -800 LINE",
"-250 -612 LINE SMOOTH",
"-250 -567 OFFCURVE",
"-286 -534 QCURVE SMOOTH",
"-323 -500 OFFCURVE",
"-397 -500 QCURVE SMOOTH",
"-675 -500 LINE",
"-675 -750 LINE",
"-903 -750 LINE SMOOTH",
"-992 -750 OFFCURVE",
"-992 -687 QCURVE SMOOTH",
"-992 -500 LINE",
"-1050 -500 LINE"
);
}
);
width = 0;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"-1050 -687 LINE SMOOTH",
"-1050 -732 OFFCURVE",
"-1013 -766 QCURVE SMOOTH",
"-976 -800 OFFCURVE",
"-903 -800 QCURVE SMOOTH",
"-610 -800 LINE",
"-610 -608 LINE",
"-397 -608 LINE SMOOTH",
"-347 -608 OFFCURVE",
"-347 -632 QCURVE SMOOTH",
"-347 -800 LINE",
"-250 -800 LINE",
"-250 -632 LINE SMOOTH",
"-250 -587 OFFCURVE",
"-286 -554 QCURVE SMOOTH",
"-323 -520 OFFCURVE",
"-397 -520 QCURVE SMOOTH",
"-690 -520 LINE",
"-690 -712 LINE",
"-903 -712 LINE SMOOTH",
"-953 -712 OFFCURVE",
"-953 -687 QCURVE SMOOTH",
"-953 -520 LINE",
"-1050 -520 LINE"
);
}
);
width = 0;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"-1050 -710 LINE SMOOTH",
"-1050 -746 OFFCURVE",
"-1013 -773 QCURVE SMOOTH",
"-976 -800 OFFCURVE",
"-903 -800 QCURVE SMOOTH",
"-570 -800 LINE",
"-570 -629 LINE",
"-428 -629 LINE",
"-428 -800 LINE",
"-250 -800 LINE",
"-250 -610 LINE SMOOTH",
"-250 -574 OFFCURVE",
"-286 -548 QCURVE SMOOTH",
"-323 -521 OFFCURVE",
"-397 -521 QCURVE SMOOTH",
"-730 -521 LINE",
"-730 -692 LINE",
"-872 -692 LINE",
"-872 -521 LINE",
"-1050 -521 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0126 5 2 1 0 3 0 1 3 103 0 0 0 2 96 4 1 2 2 21 2 78 0 0 0 19 0 19 33 17 20 33 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 0;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"-1100 -522 LINE",
"-1100 -730 LINE SMOOTH",
"-1100 -800 OFFCURVE",
"-903 -800 QCURVE SMOOTH",
"-570 -800 LINE",
"-570 -636 LINE",
"-458 -636 LINE",
"-458 -800 LINE",
"-200 -800 LINE",
"-200 -591 LINE SMOOTH",
"-200 -522 OFFCURVE",
"-397 -522 QCURVE SMOOTH",
"-730 -522 LINE",
"-730 -686 LINE",
"-842 -686 LINE",
"-842 -522 LINE"
);
}
);
width = 0;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"-1200 -517 LINE",
"-1200 -729 LINE SMOOTH",
"-1200 -800 OFFCURVE",
"-1003 -800 QCURVE SMOOTH",
"-570 -800 LINE",
"-570 -652 LINE",
"-458 -652 LINE",
"-458 -800 LINE",
"-100 -800 LINE",
"-100 -587 LINE SMOOTH",
"-100 -517 OFFCURVE",
"-297 -517 QCURVE SMOOTH",
"-730 -517 LINE",
"-730 -665 LINE",
"-842 -665 LINE",
"-842 -517 LINE"
);
}
);
width = 0;
}
);
note = coeng_17A0khmer.b;
},
{
glyphname = uni1794.a;
lastChange = "2020-10-12 02:38:09 +0000";
layers = (
{
layerId = "89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992";
paths = (
{
closed = 1;
nodes = (
"162 1048 LINE",
"230 1150 LINE",
"1120 1150 LINE",
"1120 1200 LINE",
"210 1200 LINE",
"109 1079 OFFCURVE",
"109 1055 QCURVE SMOOTH",
"109 1030 OFFCURVE",
"250 836 QCURVE",
"250 323 LINE SMOOTH",
"250 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"833 0 OFFCURVE",
"992 248 QCURVE",
"992 -120 LINE",
"1050 -120 LINE",
"1050 900 LINE",
"992 900 LINE",
"992 383 LINE SMOOTH",
"992 291 OFFCURVE",
"745 50 OFFCURVE",
"550 50 QCURVE SMOOTH",
"308 50 OFFCURVE",
"308 323 QCURVE SMOOTH",
"308 850 LINE"
);
}
);
width = 1300;
},
{
layerId = "963BFE9B-9129-4C18-A3F3-46AD815B745B";
paths = (
{
closed = 1;
nodes = (
"202 1058 LINE",
"230 1112 LINE",
"1120 1112 LINE",
"1120 1200 LINE",
"190 1200 LINE",
"99 1079 OFFCURVE",
"99 1055 QCURVE SMOOTH",
"99 1030 OFFCURVE",
"230 836 QCURVE",
"230 323 LINE SMOOTH",
"230 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"803 0 OFFCURVE",
"962 198 QCURVE",
"962 -120 LINE",
"1070 -120 LINE",
"1070 900 LINE",
"962 900 LINE",
"962 383 LINE SMOOTH",
"962 291 OFFCURVE",
"695 88 OFFCURVE",
"550 88 QCURVE SMOOTH",
"338 88 OFFCURVE",
"338 323 QCURVE SMOOTH",
"338 870 LINE"
);
}
);
width = 1300;
},
{
layerId = "A10A3B8F-5047-4E3E-80F3-6554B53DC79D";
paths = (
{
closed = 1;
nodes = (
"912 383 LINE SMOOTH",
"912 291 OFFCURVE",
"645 138 OFFCURVE",
"550 138 QCURVE SMOOTH",
"465 138 OFFCURVE",
"388 231 OFFCURVE",
"388 323 QCURVE SMOOTH",
"388 820 LINE",
"304 916 LINE SMOOTH",
"237 992 OFFCURVE",
"237 1024 QCURVE SMOOTH",
"237 1032 OFFCURVE",
"242 1037 QCURVE SMOOTH",
"263 1062 LINE",
"1150 1062 LINE",
"1150 1200 LINE",
"258 1200 LINE",
"118 1017 LINE SMOOTH",
"100 992 OFFCURVE",
"100 955 QCURVE SMOOTH",
"100 914 OFFCURVE",
"172 822 QCURVE SMOOTH",
"200 786 LINE",
"200 323 LINE SMOOTH",
"200 185 OFFCURVE",
"360 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"743 0 OFFCURVE",
"912 118 QCURVE",
"912 -120 LINE",
"1100 -120 LINE",
"1100 900 LINE",
"912 900 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01224 9 2 4 5 3 1 1 4 2 76 6 1 5 0 0 5 0 99 0 3 3 2 95 0 2 2 17 77 0 4 4 1 97 0 1 1 19 1 78 0 0 0 32 0 32 41 17 25 34 17 7 7 27 \012CALL[ ]	/* CallFunction */";
};
width = 1300;
},
{
layerId = "742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1";
paths = (
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1200 1012 LINE",
"1200 1200 LINE",
"218 1200 LINE",
"68 1017 LINE",
"50 992 OFFCURVE",
"50 955 QCURVE SMOOTH",
"50 914 OFFCURVE",
"122 822 QCURVE SMOOTH",
"150 786 LINE",
"150 323 LINE SMOOTH",
"150 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"743 0 OFFCURVE",
"862 118 QCURVE",
"862 -120 LINE",
"1150 -120 LINE",
"1150 900 LINE",
"862 900 LINE",
"862 413 LINE SMOOTH",
"862 321 OFFCURVE",
"645 188 OFFCURVE",
"550 188 QCURVE SMOOTH",
"438 188 OFFCURVE",
"438 323 QCURVE SMOOTH",
"438 820 LINE"
);
}
);
width = 1300;
},
{
layerId = "1AE80326-82F5-491E-9ED8-F639C1D819D6";
paths = (
{
closed = 1;
nodes = (
"237 942 OFFCURVE",
"237 974 QCURVE SMOOTH",
"237 982 OFFCURVE",
"242 987 QCURVE SMOOTH",
"263 1012 LINE",
"1250 1012 LINE",
"1250 1250 LINE",
"168 1250 LINE",
"57 1057 LINE SMOOTH",
"20 992 OFFCURVE",
"20 955 QCURVE SMOOTH",
"20 914 OFFCURVE",
"60 850 QCURVE SMOOTH",
"100 786 LINE",
"100 323 LINE SMOOTH",
"100 0 OFFCURVE",
"550 0 QCURVE SMOOTH",
"693 0 OFFCURVE",
"812 118 QCURVE",
"812 -120 LINE",
"1200 -120 LINE",
"1200 900 LINE",
"812 900 LINE",
"812 413 LINE SMOOTH",
"812 351 OFFCURVE",
"645 238 OFFCURVE",
"567 238 QCURVE SMOOTH",
"488 238 OFFCURVE",
"488 323 QCURVE SMOOTH",
"488 820 LINE"
);
}
);
width = 1300;
}
);
note = uni1794.a;
}
);
instances = (
{
interpolationWidth = 5;
instanceInterpolations = {
"89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992" = 1;
};
name = Thin;
weightClass = Thin;
},
{
interpolationWeight = 300;
interpolationWidth = 5;
instanceInterpolations = {
"963BFE9B-9129-4C18-A3F3-46AD815B745B" = 1;
};
name = Light;
weightClass = Light;
},
{
interpolationWeight = 400;
interpolationWidth = 5;
instanceInterpolations = {
"A10A3B8F-5047-4E3E-80F3-6554B53DC79D" = 1;
};
name = Regular;
},
{
interpolationWeight = 700;
interpolationWidth = 5;
instanceInterpolations = {
"742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1" = 1;
};
name = Bold;
weightClass = Bold;
},
{
interpolationWeight = 900;
interpolationWidth = 5;
instanceInterpolations = {
"1AE80326-82F5-491E-9ED8-F639C1D819D6" = 1;
};
name = Black;
weightClass = Black;
}
);
kerning = {
"89D8C5C7-992A-4B79-A2F2-D8D3CE0BA992" = {
A = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -123;
U = -41;
V = -164;
W = -143;
Y = -143;
asterisk = -143;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
question = -123;
quotedbl = -164;
quotesingle = -164;
u = -41;
v = -123;
w = -61;
y = -102;
};
B = {
A = -41;
T = -41;
V = -82;
W = -61;
X = -41;
Y = -82;
Z = -41;
asterisk = -41;
question = -41;
w = -20;
y = -41;
};
D = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
E = {
V = -41;
W = -41;
Y = -41;
};
F = {
A = -143;
a = -82;
c = -82;
d = -82;
e = -82;
g = -82;
o = -82;
q = -82;
};
G = {
T = -41;
V = -41;
W = -41;
Y = -41;
question = -41;
};
K = {
C = -41;
G = -41;
O = -41;
Q = -41;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
u = -41;
w = -61;
y = -61;
};
L = {
T = -143;
V = -102;
W = -102;
Y = -123;
asterisk = -164;
question = -143;
quotedbl = -123;
quotesingle = -123;
};
O = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
P = {
A = -102;
comma = -246;
period = -246;
};
Q = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
R = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -41;
U = -20;
V = -61;
W = -61;
Y = -61;
asterisk = -41;
question = -41;
w = -41;
y = -41;
};
S = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -41;
question = -41;
w = -20;
y = -41;
};
T = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -61;
c = -61;
comma = -184;
d = -61;
e = -61;
g = -61;
o = -61;
period = -184;
q = -61;
};
U = {
A = -41;
};
V = {
A = -164;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -123;
c = -123;
comma = -225;
d = -123;
e = -123;
g = -123;
o = -123;
period = -225;
q = -123;
s = -82;
};
W = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -102;
c = -123;
comma = -184;
d = -123;
e = -123;
g = -123;
o = -123;
period = -184;
q = -123;
};
X = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
w = -61;
y = -102;
};
Y = {
A = -143;
C = -61;
G = -61;
O = -61;
Q = -61;
S = -41;
a = -123;
c = -143;
comma = -164;
d = -143;
e = -143;
g = -143;
o = -143;
period = -164;
q = -143;
s = -123;
};
a = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
asterisk = {
A = -102;
comma = -246;
period = -246;
};
b = {
y = -41;
};
f = {
asterisk = 164;
braceright = 184;
bracketright = 184;
parenright = 184;
quotedbl = 164;
quotesingle = 164;
};
h = {
quotedbl = -82;
y = -41;
};
k = {
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
};
n = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
o = {
y = -41;
};
p = {
y = -41;
};
quotedbl = {
A = -164;
g = -82;
};
quotesingle = {
A = -164;
g = -82;
};
r = {
a = -41;
asterisk = 61;
};
v = {
comma = -102;
period = -143;
};
w = {
comma = -143;
period = -143;
};
y = {
comma = -184;
period = -184;
};
};
"963BFE9B-9129-4C18-A3F3-46AD815B745B" = {
A = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -123;
U = -41;
V = -164;
W = -143;
Y = -143;
asterisk = -143;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
question = -123;
quotedbl = -164;
quotesingle = -164;
u = -41;
v = -123;
w = -61;
y = -102;
};
B = {
A = -41;
T = -41;
V = -82;
W = -61;
X = -41;
Y = -82;
Z = -41;
asterisk = -41;
question = -41;
w = -20;
y = -41;
};
D = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
E = {
V = -41;
W = -41;
Y = -41;
};
F = {
A = -143;
a = -82;
c = -82;
d = -82;
e = -82;
g = -82;
o = -82;
q = -82;
};
G = {
T = -41;
V = -41;
W = -41;
Y = -41;
question = -41;
};
K = {
C = -41;
G = -41;
O = -41;
Q = -41;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
u = -41;
w = -61;
y = -61;
};
L = {
T = -143;
V = -102;
W = -102;
Y = -123;
asterisk = -164;
question = -143;
quotedbl = -123;
quotesingle = -123;
};
O = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
P = {
A = -102;
comma = -246;
period = -246;
};
Q = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
R = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -41;
U = -20;
V = -61;
W = -61;
Y = -61;
asterisk = -41;
question = -41;
w = -41;
y = -41;
};
S = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -41;
question = -41;
w = -20;
y = -41;
};
T = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -61;
c = -61;
comma = -184;
d = -61;
e = -61;
g = -61;
o = -61;
period = -184;
q = -61;
};
U = {
A = -41;
};
V = {
A = -164;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -123;
c = -123;
comma = -225;
d = -123;
e = -123;
g = -123;
o = -123;
period = -225;
q = -123;
s = -82;
};
W = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -102;
c = -123;
comma = -184;
d = -123;
e = -123;
g = -123;
o = -123;
period = -184;
q = -123;
};
X = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
w = -61;
y = -102;
};
Y = {
A = -143;
C = -61;
G = -61;
O = -61;
Q = -61;
S = -41;
a = -123;
c = -143;
comma = -164;
d = -143;
e = -143;
g = -143;
o = -143;
period = -164;
q = -143;
s = -123;
};
a = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
asterisk = {
A = -102;
comma = -246;
period = -246;
};
b = {
y = -41;
};
f = {
asterisk = 164;
braceright = 184;
bracketright = 184;
parenright = 184;
quotedbl = 164;
quotesingle = 164;
};
h = {
quotedbl = -82;
y = -41;
};
k = {
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
};
n = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
o = {
y = -41;
};
p = {
y = -41;
};
quotedbl = {
A = -164;
g = -82;
};
quotesingle = {
A = -164;
g = -82;
};
r = {
a = -41;
asterisk = 61;
};
v = {
comma = -102;
period = -143;
};
w = {
comma = -143;
period = -143;
};
y = {
comma = -184;
period = -184;
};
};
"A10A3B8F-5047-4E3E-80F3-6554B53DC79D" = {
A = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -123;
U = -41;
V = -164;
W = -143;
Y = -143;
asterisk = -143;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
question = -123;
quotedbl = -164;
quotesingle = -164;
u = -41;
v = -123;
w = -61;
y = -102;
};
B = {
A = -41;
T = -41;
V = -82;
W = -61;
X = -41;
Y = -82;
Z = -41;
asterisk = -41;
question = -41;
w = -20;
y = -41;
};
D = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
E = {
V = -41;
W = -41;
Y = -41;
};
F = {
A = -143;
a = -82;
c = -82;
d = -82;
e = -82;
g = -82;
o = -82;
q = -82;
};
G = {
T = -41;
V = -41;
W = -41;
Y = -41;
question = -41;
};
K = {
C = -41;
G = -41;
O = -41;
Q = -41;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
u = -41;
w = -61;
y = -61;
};
L = {
T = -143;
V = -102;
W = -102;
Y = -123;
asterisk = -164;
question = -143;
quotedbl = -123;
quotesingle = -123;
};
O = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
P = {
A = -102;
comma = -246;
period = -246;
};
Q = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
R = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -41;
U = -20;
V = -61;
W = -61;
Y = -61;
asterisk = -41;
question = -41;
w = -41;
y = -41;
};
S = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -41;
question = -41;
w = -20;
y = -41;
};
T = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -61;
c = -61;
comma = -184;
d = -61;
e = -61;
g = -61;
o = -61;
period = -184;
q = -61;
};
U = {
A = -41;
};
V = {
A = -164;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -123;
c = -123;
comma = -225;
d = -123;
e = -123;
g = -123;
o = -123;
period = -225;
q = -123;
s = -82;
};
W = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -102;
c = -123;
comma = -184;
d = -123;
e = -123;
g = -123;
o = -123;
period = -184;
q = -123;
};
X = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
w = -61;
y = -102;
};
Y = {
A = -143;
C = -61;
G = -61;
O = -61;
Q = -61;
S = -41;
a = -123;
c = -143;
comma = -164;
d = -143;
e = -143;
g = -143;
o = -143;
period = -164;
q = -143;
s = -123;
};
a = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
asterisk = {
A = -102;
comma = -246;
period = -246;
};
b = {
y = -41;
};
f = {
asterisk = 164;
braceright = 184;
bracketright = 184;
parenright = 184;
quotedbl = 164;
quotesingle = 164;
};
h = {
quotedbl = -82;
y = -41;
};
k = {
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
};
n = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
o = {
y = -41;
};
p = {
y = -41;
};
quotedbl = {
A = -164;
g = -82;
};
quotesingle = {
A = -164;
g = -82;
};
r = {
a = -41;
asterisk = 61;
};
v = {
comma = -102;
period = -143;
};
w = {
comma = -143;
period = -143;
};
y = {
comma = -184;
period = -184;
};
};
"742C6D49-27A7-4CE6-BB95-CE3E85DCFAA1" = {
A = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -123;
U = -41;
V = -164;
W = -143;
Y = -143;
asterisk = -143;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
question = -123;
quotedbl = -164;
quotesingle = -164;
u = -41;
v = -123;
w = -61;
y = -102;
};
B = {
A = -41;
T = -41;
V = -82;
W = -61;
X = -41;
Y = -82;
Z = -41;
asterisk = -41;
question = -41;
w = -20;
y = -41;
};
D = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
E = {
V = -41;
W = -41;
Y = -41;
};
F = {
A = -143;
a = -82;
c = -82;
d = -82;
e = -82;
g = -82;
o = -82;
q = -82;
};
G = {
T = -41;
V = -41;
W = -41;
Y = -41;
question = -41;
};
K = {
C = -41;
G = -41;
O = -41;
Q = -41;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
u = -41;
w = -61;
y = -61;
};
L = {
T = -143;
V = -102;
W = -102;
Y = -123;
asterisk = -164;
question = -143;
quotedbl = -123;
quotesingle = -123;
};
O = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
P = {
A = -102;
comma = -246;
period = -246;
};
Q = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
R = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -41;
U = -20;
V = -61;
W = -61;
Y = -61;
asterisk = -41;
question = -41;
w = -41;
y = -41;
};
S = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -41;
question = -41;
w = -20;
y = -41;
};
T = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -61;
c = -61;
comma = -184;
d = -61;
e = -61;
g = -61;
o = -61;
period = -184;
q = -61;
};
U = {
A = -41;
};
V = {
A = -164;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -123;
c = -123;
comma = -225;
d = -123;
e = -123;
g = -123;
o = -123;
period = -225;
q = -123;
s = -82;
};
W = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -102;
c = -123;
comma = -184;
d = -123;
e = -123;
g = -123;
o = -123;
period = -184;
q = -123;
};
X = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
w = -61;
y = -102;
};
Y = {
A = -143;
C = -61;
G = -61;
O = -61;
Q = -61;
S = -41;
a = -123;
c = -143;
comma = -164;
d = -143;
e = -143;
g = -143;
o = -143;
period = -164;
q = -143;
s = -123;
};
a = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
asterisk = {
A = -102;
comma = -246;
period = -246;
};
b = {
y = -41;
};
f = {
asterisk = 164;
braceright = 184;
bracketright = 184;
parenright = 184;
quotedbl = 164;
quotesingle = 164;
};
h = {
quotedbl = -82;
y = -41;
};
k = {
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
};
n = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
o = {
y = -41;
};
p = {
y = -41;
};
quotedbl = {
A = -164;
g = -82;
};
quotesingle = {
A = -164;
g = -82;
};
r = {
a = -41;
asterisk = 61;
};
v = {
comma = -102;
period = -143;
};
w = {
comma = -143;
period = -143;
};
y = {
comma = -184;
period = -184;
};
};
"1AE80326-82F5-491E-9ED8-F639C1D819D6" = {
A = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -123;
U = -41;
V = -164;
W = -143;
Y = -143;
asterisk = -143;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
question = -123;
quotedbl = -164;
quotesingle = -164;
u = -41;
v = -123;
w = -61;
y = -102;
};
B = {
A = -41;
T = -41;
V = -82;
W = -61;
X = -41;
Y = -82;
Z = -41;
asterisk = -41;
question = -41;
w = -20;
y = -41;
};
D = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
E = {
V = -41;
W = -41;
Y = -41;
};
F = {
A = -143;
a = -82;
c = -82;
d = -82;
e = -82;
g = -82;
o = -82;
q = -82;
};
G = {
T = -41;
V = -41;
W = -41;
Y = -41;
question = -41;
};
K = {
C = -41;
G = -41;
O = -41;
Q = -41;
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
u = -41;
w = -61;
y = -61;
};
L = {
T = -143;
V = -102;
W = -102;
Y = -123;
asterisk = -164;
question = -143;
quotedbl = -123;
quotesingle = -123;
};
O = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
P = {
A = -102;
comma = -246;
period = -246;
};
Q = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -61;
question = -41;
};
R = {
C = -41;
G = -41;
O = -41;
Q = -41;
T = -41;
U = -20;
V = -61;
W = -61;
Y = -61;
asterisk = -41;
question = -41;
w = -41;
y = -41;
};
S = {
A = -41;
T = -41;
V = -41;
W = -41;
X = -41;
Y = -41;
question = -41;
w = -20;
y = -41;
};
T = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -61;
c = -61;
comma = -184;
d = -61;
e = -61;
g = -61;
o = -61;
period = -184;
q = -61;
};
U = {
A = -41;
};
V = {
A = -164;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -123;
c = -123;
comma = -225;
d = -123;
e = -123;
g = -123;
o = -123;
period = -225;
q = -123;
s = -82;
};
W = {
A = -123;
C = -41;
G = -41;
O = -41;
Q = -41;
a = -102;
c = -123;
comma = -184;
d = -123;
e = -123;
g = -123;
o = -123;
period = -184;
q = -123;
};
X = {
C = -41;
G = -41;
O = -41;
Q = -41;
S = -20;
w = -61;
y = -102;
};
Y = {
A = -143;
C = -61;
G = -61;
O = -61;
Q = -61;
S = -41;
a = -123;
c = -143;
comma = -164;
d = -143;
e = -143;
g = -143;
o = -143;
period = -164;
q = -143;
s = -123;
};
a = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
asterisk = {
A = -102;
comma = -246;
period = -246;
};
b = {
y = -41;
};
f = {
asterisk = 164;
braceright = 184;
bracketright = 184;
parenright = 184;
quotedbl = 164;
quotesingle = 164;
};
h = {
quotedbl = -82;
y = -41;
};
k = {
c = -41;
d = -41;
e = -41;
g = -41;
o = -41;
q = -41;
};
n = {
quotedbl = -82;
quotesingle = -82;
y = -41;
};
o = {
y = -41;
};
p = {
y = -41;
};
quotedbl = {
A = -164;
g = -82;
};
quotesingle = {
A = -164;
g = -82;
};
r = {
a = -41;
asterisk = 61;
};
v = {
comma = -102;
period = -143;
};
w = {
comma = -143;
period = -143;
};
y = {
comma = -184;
period = -184;
};
};
};
manufacturer = "Danh Hong";
manufacturerURL = "http://code.google.com/p/noto/";
unitsPerEm = 2048;
versionMajor = 8;
versionMinor = 0;
}
